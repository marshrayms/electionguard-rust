
% xxxx ---- S0 Prefix Items - Not part of EGDS

% xdone 20250429-20250505 Added crate dependency license info to build
% xdone 20250429-20250505 New unit test (passing) test guardian::t::t1
% xdone 20250429-20250505 New unit test (passing) test guardian::t::t2
% xdone 20250429-20250505 Work on key ceremony
% xdone 20250429-20250505 Guardian definition
% xdone 20250429-20250505 Resource ID and format (rid, fmt, ridfmt) returns "Cow" strings.

% xdone 20250429-20250505 
% xdone 20250429-20250505 
% xdone 20250429-20250505 
% xdone 20250429-20250505 
% xdone 20250429-20250505 
% xdone 20250429-20250505 


% xtodo S0 Fix references to EGDS in the source code to always include section and page number
% xtodo S0 Fix references to EGDS in the source docs to always include section and page number

% xtodo S0 Set panic behavior to abort. See https://gitlab.torproject.org/legacy/trac/-/issues/27199
% xtodo S0 Remove eg/src/example*.rs files, migrate to resource_producer
% xtodo S0 Migrate away from 'anyhow' in library code
% xnote S0 Per Michael 2025-02-25, "Signed ElGamal" encryption refers to the third ciphertext component which is a Schnorr proof of knowledge of the encryption randomness.

% xtodo S0 Q|UG left pad as necessary to ensure length is correct
% xtodo S0 MAYB|serialize format wrapped in version

% xtodo S0 crate feature for guardian secret operations.

% xtodo S0 ensure SecretCoefficient is serialized in a fixed-length format

% xtodo S0 rewrite build-docs script in sh

% xtodo S0 Build on Linux32
% xtodo S0 Test on Linux32
% xtodo S0 Build on Linux64
% xtodo S0 Test on Linux64
% xtodo S0 Build on Win64
% xtodo S0 Test on Win64
% xtodo S0 Test library components for Wasm32

% xtodo S0 docs/general: style sheet for markdown, ideally match API docs

% xtodo S0 If an overvote occurs, the overvote must be captured, encrypted, and never decrypted.

% xtodo S0 docs/specs/serialization: data formats section
% xtodo S0 docs/specs/serialization: standards and references section
% xtodo S0 docs/specs/serialization: election manifest section
% xtodo S0 docs/specs/serialization: election record section
% xtodo S0 docs/specs/serialization: vendor data section

% xtodo S0 docs/api: reference NIST CDF where types clearly correspond. E.g., BallotStyle https://github.com/usnistgov/ElectionResultsReporting/blob/nist-pages/index.md#17_0_2_4_78e0236_1389366224561_797289_2360

% xtodo S0 docs/implementation guide/Requirements for election systems vendors: complete
% xtodo S0 docs/implementation guide/Requirements for verifier app authors: complete
% xtodo S0 docs/implementation guide/roles: consider splitting into separate pages: complete
% xtodo S0 docs/implementation guide/roles/Election Administrator: complete
% xtodo S0 docs/implementation guide/roles/Election Guardians: complete
% xtodo S0 docs/implementation guide/roles/Voters: complete
% xtodo S0 docs/implementation guide/roles/Political parties and voter-interest organizations: complete
% xtodo S0 docs/implementation guide/roles/Journalists and other media: complete
% xtodo S0 docs/implementation guide/Hardware requirements/Gurardian secret key storage: complete
% xtodo S0 docs/implementation guide/Hardware requirements/Gurardian secret key operations: complete
% xtodo S0 docs/implementation guide/step-by-step/Advance preparation: complete
% xtodo S0 docs/implementation guide/step-by-step/Key ceremony: complete
% xtodo S0 docs/implementation guide/step-by-step/Tally ceremony: complete
% xtodo S0 docs/implementation guide/step-by-step/Publishing: complete
% xtodo S0 docs/implementation guide/step-by-step/Verification: complete
% xtodo S0 docs/implementation guide/step-by-step/Reporting: complete

% xtodo S0 docs/api: use correct logo
% xtodo S0 docs/api: complete

% xtodo S0 docs: complete, #![warn(missing_docs)]

% xtodo S0 docs: upload docs to github pages (see compliance notes)

% xtodo S0 security review: ensure that no file leaks info through filesize

% xtodo S0 distinguish between PartySelection, BallotMeasureSelection, CandidateSelection
% xtodo S0 BallotDefinition doc for write-in option
% xtodo S0 would be nice to support a PartySelection type vote, rather than rely on the vendor to give us the correct selections explicitly

% xtodo S0 a trait for types that have pub fn validate(&Self, &ElectionParameters)

% xtodo S0 docs: more investigation into using rust modules to build documentation along with api, observe how cargo_crev does it with the include_str! macro: https://github.com/crev-dev/cargo-crev/blob/master/cargo-crev/src/doc/mod.rs
% xtodo S0 docs: more investigation into using mdbook for all project documentation https://github.com/rust-lang/rust/issues/66249
% xtodo S0 docs: cargo-external-doc is nice but doesn't support virtual manifests https://github.com/Geal/cargo-external-doc

% xtodo S0 VaryingParameters (n, k) This isn't really an 'index' (ordinal), it's a cardinal number. Maybe we need a general purpose ranged number type.

% xtodo S0 exe: common parameter: election filesystem directory to look for files (%ELECTIONGUARD_ARTIFACTS_DIR%)
% xtodo S0 exe: common parameter: manifest file
% xtodo S0 exe: common parameter: others

% xtodo S0 persist/file: create artifact directories if they don't exist. q: what about permissions on guardian secret directories?

% xtodo S0 perisist: encryption or password protection for guaridan secret key files
% xtodo S0 util: read guardian secret key, print info, suppressing secrets
% xtodo S0 util: read guardian public key, print info

% xtodo S0 persist: define standard election directory layout - look at other implementers and users
% xtodo S0 design: key file represents its kind: guardian, ..., ?

% xtodo S0 Consider structures defined in JSON schema https://github.com/usnistgov/ElectionResultsReporting/blob/version2/NIST_V2_election_results_reporting.json

% xtodo S0 if electionguard.exe fails to read or write a file, check the path to see if it has a leading ~. If so, print a good error message.

% xtodo S0 test on 32-bit target such as x86 or wasm32
% xtodo S0 test on big-endian target such as powerpc64-unknown-linux-gnu, s390x-unknown-linux-gnu, riscv64gc-unknown-linux-gnu, or loongarch64-unknown-linux-gnu

% xtodo S0 electionguard-test script: incorporate ballots
% xtodo S0 electionguard-test script: incorporate tally

% xxxx ====vvvv====vvvv====vvvv====vvvv====vvvv==== DONE ====vvvv====vvvv====vvvv====vvvv====vvvv====

% xdone S0 move types for numbers mod p and mod q back into 'eg' lib so they can be known at compile time
% xdone S0 change obtain_resource_production_result_from_cache_downcast
% xdone S0 electionguard.exe: common parameter: election filesystem directory to look for files (%ELECTIONGUARD_ARTIFACTS_DIR%)
% xdone S0 electionguard.exe: seed: write random seed to artifact file
% xdone S0 electionguard.exe manifest: write ElectionManifest to pretty json file
% xdone S0 electionguard.exe manifest: write ElectionManifest to canonical bytes file
% xdone S0 electionguard.exe parameters: write ElectionParameters to json file
% xdone S0 H_V, H_P, H_M, and H_B updated for 2.0 calculation
% xdone S0 Generate joint election public key
% xdone S0 Extended base hash H_E
% xdone S0 electionguard-test script: implementation in cmd started
% xdone S0 electionguard-test script: implementation in cmd exercises all (current) functionality
% xdone S0 BigUint values (mod p or q) now left-padded as necessary to avoid leaking value via serialized file size
% xdone S0 Hash values now serialized with 'H(upper hex)' format to match spec
% xdone S0 exe: Csprng now seeded with more entropy from the operating system RNG
% xdone S0 Election-varying parameters (n and k) now checked for validity
% xdone S0 Serialization of BigUints now uses base64 encoding
% xdone S0 Rename guardian private key to secret key
% xdone S0 electionguard.exe: generate guardian secret key
% xdone S0 electionguard.exe: write guardian secret key
% xdone S0 electionguard.exe: derive guardian public key from secret key
% xdone S0 electionguard.exe: write guardian public key
% xdone S0 Guardian i uses 1-based indexing
% xdone S0 compute H_E extended base hash
% xdone S0 compute joint election public key
% xdone S0 electionguard.exe: write joint election public key to json file
% xdone S0 standardize on 'validate' instead of 'verify' when checking deserialized structures
% xdone S0 instead of from_json and to_json implement from_stdioread and to_stdiowrite
% xdone S0 every struct that has Self::from_stdioread*() should prefer Self::from_stdioread_validated() and have a self.validate()
% xdone S0 electionguard.exe: write H_E extended base hash to json file
% xdone S0 convert many uses of if !() { bail!() } to ensure!()
% xdone S0 Generate data structure docs from the Reference Implementation in Rust
% xdone S0 eg: New constrained numeric type for indices. Convert n, k, and other indices to this type.
% xdone S0 build-docs script: initial implementation in cmd
% xdone S0 evaluate scripting language 'nu' https://www.nushell.sh/
% xdone S0 electionguard-test script: begin rewrite in nu
% xdone S0 doc/LICENSE: checked
% xdone S0 doc/SECURITY.md: complete
% xdone S0 docs/general: begin writing
% xdone S0 docs/api: begin writing
% xdone S0 Remove link to internal site
% xdone S0 VaryingParameters: enum BallotChaining { Prohibited, Allowed, Required, }
% xdone S0 remove old EG 1.54 constants
% xdone S0 exe: Under artifacts dir, first level dirs are specific to secrecy requirements
% xdone S0 Ballot define data type
% xdone S0 get fixeduint stuff out of bunna branch
% xdone S0 Merge code from Anunay
% xdone S0 doc/SUPPORT.md: complete
% xdone S0 doc/README.md: complete
% xdone S0 doc/CODE_OF_CONDUCT.md: complete
% xdone S0 doc/BUILDING.md: complete
% xdone S0 Complete all planned code reorganization/renaming
% xdone S0 docs/implementation guide/References: complete
% xdone S0 a trait for fn to_canonical_json()
% xdone S0 many to_stdiowrite() methods have common code that could be factored into a common function
% xdone S0 a trait for types that have to_stdiowrite()
% xdone S0 a trait for types that have to_stdiowrite() and perhaps _pretty() and _canonical() variants

% xdone S0 serialize bignums only all as uppercase hex

% xxxx ====vvvv====vvvv====vvvv==== funcional requirements from text of EG 2.1 Design Specification ====vvvv====vvvv====vvvv====

% xnote S0 Abbreviation: 'EG' ElectionGuard, possibly implies v2.1.0 Design Specification and/or Reference Implementation
% xnote S0 Abbreviation: 'EGDS' ElectionGuard v2.1.0 Design Specification
% xnote S0 Abbreviation: 'EGRI' ElectionGuard v2.1.0 Reference Implementation
% xnote S0 Abbreviation: 'RI' - Reference Implementation
% xnote S0 In EG, Ballots are always encrypted, so 'Ballot' implies 'encrypted'
% xnote S0 A 'Preencrypted Ballot' is a complete set of ciphertexts for all options which contains no information about Voter Selections.
% xtodo S0 What is a Preencrypted Ballot called after Voter Selections have been applied?

% xxxx 7mG3TEw43xIyPPcsStd4x9+hhlNRkCdNugt2ZqLDjqXFUs12L5G8J9DZ8o4dVEljODWqL1A9kwrP
% xxxx rJ5U6QTTc7yxZzWkHMnj9Ru9Y7T7Kwb7yYMyC+x8vom2hgomjr+vl+RiUL+dKAUNgNrX1NdlO2Td
% xxxx zMBkT05HZK6F/dtDgq4O9ErcpKa0c7vtq5n8SPH3d2CqqgTILSF+XdfVQTGflX1M3tIXZEEygGeh
% xxxx GVuL3AMp5Lb/HsI+ZMw5pcYv++ViW2DPI8Okl4pKFFx/azJIygVYIyk3kk1AwZoXH3F6SuqIn2s6
% xxxx 8BCgdRhOK46nVaOVT77AHU4WF56ov1Noq9sGk/P+lNbDXFH92hkXYINjCdtkvUMj4h7VcBCS4c/T
% xxxx TFD2pz7IHHBOaWFGksqgcpeIK9eA/nKxJLt8/JZZa7tt5YBdpK6Nlznrr/leUDY2GAK6PJxmJMpU
% xxxx ks3sCPDguEw3dofa3h1pstq9f53ORPhIIAsPIGzNPvbPz3Z5fL+bvF1ycEq1ca9dN4FZ6ereLIv/
% xxxx UVQRzh0AobPXgE2PkFtrIuEgmLMp2bDlInJXymo692E2PUPZo/K3r/bB7FVEIf8rCQp6KuPKiefy
% xxxx 6s+bXN3MuujTywaSplkm5lv8+I88hoHKqtKM2X3E2LDk2afjm0qU6AXQye1Vljt8k6Am+IhRCqnr
% xxxx t6Ia6SI+l+Zew0sdgMENnwqaQf5qFgtoAbswNRAc2joMQQXZ/vK61pjC5GyJ0XAahJQdIuBJaGPc
% xxxx
% xxxx
% xxxx ---- S1 Introduction

\pagebreak

\tableofcontents

\pagebreak

\section{Introduction}
This document describes the cryptographic details of the design of \EG, which can be used in conjunction with many new and existing voting systems to enable both end-to-end (E2E) verifiability and privacy-enhanced risk-limiting audits (RLAs). \EG is not a complete election system.  It instead provides components that are designed to be flexible and to promote innovation by election officials and system developers. When properly used, it can promote voter confidence by empowering voters to independently verify the accuracy of election results.

% xreqj {
  "section": "S1.a",
  "text": "EGRI can be used to enable end-to-end (E2E) verifiability.",
  "sc": "na" }
% xreqj {
  "section": "S1.a",
  "text": "EGRI can be used to enable privacy-enhanced risk-limiting audits (RLAs).",
  "sc": "na" }
% xreqj {
  "section": "S1.a",
  "text": "EGRI components can be used to empower individual voters to independently verify the accuracy of election results.",
  "sc": "na" }

\subsubsection*{End-to-End (E2E) Verifiability}
An E2E-verifiable election provides artifacts which allow voters to confirm that their votes have been accurately recorded and counted. Specifically, an election is End-to-end (E2E) verifiable if two properties are achieved.
\begin{enumerate}
\item Individual voters can verify that their votes have been accurately recorded.
\item Voters and observers can verify that all recorded votes have been accurately counted.
\end{enumerate}
An E2E-verifiable election does not
  guarantee that the recorded votes have been cast by legitimate
  voters: this needs to be ensured through the traditional voter
  identification mechanisms that are already deployed in elections.

An E2E-verifiable tally can be used as the primary tally in an election or as a verifiable secondary tally alongside traditional methods. \EG is compatible with in-person voting---either using an electronic ballot-marking device or an optical scanner capable of reading hand-marked or machine-marked ballots, with voting by mail, and even with Internet voting.\footnote{
Note that there are many challenges to responsible Internet voting that are mitigated but not fully solved by E2E-verifiability.  The 2015 U.S. Vote Foundation report at \url{https://www.usvotefoundation.org/E2E-VIV} details many of these issues, and the 2018 National Academies report at \url{https://nap.nationalacademies.org/catalog/25120/securing-the-vote-protecting-american-democracy} includes a section on Internet voting (pp. 101--105). These conclusions were reaffirmed by a 2022 study conducted by Berkeley's Goldman School of Public Policy available at \url{https://gspp.berkeley.edu/index.php/research-and-impact/news/recent-news/csp-working-group-findings-on-mobile-voting}.
}

% xreqj {
  "section": "S1.b",
  "text": "EGRI allows individual voters to verify that their votes have been accurately recorded.",
  "sc": "" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI allows voters to verify that all recorded votes have been accurately counted.",
  "sc": "" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI allows observers to verify that all recorded votes have been accurately counted.",
  "sc": "" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI provides an E2E-verifiable tally which can be used as the primary tally in an election.",
  "sc": "" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI provides an E2E-verifiable tally which can be used as a verifiable secondary tally alongside traditional methods.",
  "sc": "" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI is compatible with in-person voting using an electronic ballot-marking device.",
  "sc": "na" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI is compatible with in-person voting using an optical scanner capable of reading hand-marked ballots.",
  "sc": "na" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI is compatible with in-person voting using an optical scanner capable of reading machine-marked ballots.",
  "sc": "na" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI is compatible with voting by mail.",
  "sc": "na" }
% xreqj {
  "section": "S1.b",
  "text": "EGRI is compatible with Internet voting.",
  "sc": "na" }

\subsubsection*{Risk-Limiting Audits (RLAs)}
RLAs offer election administrators efficient methods to validate reported election tallies against physical ballot records. There are several varieties of RLAs, but the most efficient and practical are \emph{ballot-comparison audits}, in which electronic \emph{cast-vote records} (CVRs) are individually compared against physical ballots.

The challenge with ballot-comparison audits is that public release of the full set of CVRs can compromise voter privacy while an audit without public disclosure of CVRs offers no basis for public confidence in the outcome. \EG can bridge this gap by enabling public disclosure of encrypted ballots that can be matched directly to physical ballots selected for auditing and can also be proven to match the reported tallies.

Making an election E2E-verifiable, in addition to conducting an RLA,
  can offer guarantees that the physical ballot records used in
  the RLA are those produced by the voters.

% xnote Abbreviation: 'EG' ElectionGuard, possibly implies v2.1.0 Design Specification and/or Reference Implementation
% xnote Abbreviation: 'EGDS' ElectionGuard v2.1.0 Design Specification
% xnote Abbreviation: 'EGRI' ElectionGuard v2.1.0 Reference Implementation
% xnote Abbreviation: 'Ballot' is encrypted, by definition in EGDS v2.1.0.

% xreqj {
  "section": "S1.c",
  "text": "EGRI enables public disclosure of encrypted ballots that can be matched directly to physical ballots selected for RLA auditing.",
  "sc": "" }
% xreqj {
  "section": "S1.c",
  "text": "EGRI can prove (or fail to prove) that publicly disclosed EG ballots match reported tallies",
  "sc": "ace" }
% xreqj {
  "section": "S1.c",
  "text": "EGRI can prove (or fail to prove) that physical ballot records used in an RLA are those produced by the voters",
  "sc": "na" }

\subsubsection*{About this Specification}
This specification can be used by expert reviewers to evaluate the details of the \EG process and by independent parties to write \EG implementations. This document is not intended to be a fully detailed implementation specification. It does not specify serialization and data structures for the election record or mappings between the notation used here and the corresponding data types and components of a specific implementation. However, this document, together with a detailed implementation specification or a well-documented \EG implementation, can be used by independent parties to write \EG verifiers to confirm the consistency of election artifacts with announced election results.

% xreqj {
  "section": "S1.d",
  "text": "EGRI provides a \"detailed implementation specification\" and/or qualifies as a \"well-documented ElectionGuard implementation\"",
  "sc": "ace" }
% xreqj {
  "section": "S1.d",
  "text": "EGRI can be used by independent parties to write ElectionGuard verifiers to confirm the consistency of election artifacts with announced election results.",
  "sc": "na" }
% xreqj {
  "section": "S1.d",
  "text": "EGRI can be used by independent parties to write verifiers to confirm (or refute) the consistency of election artifacts with announced election results",
  "sc": "na" }

% xxxx 7/yehJAmhBwDQhjuURFyYHgLPJYYUCOG4y5iFqeT6vJa9XH/tx57sk3941Ws7DUSt9OMimhg4CO/
% xxxx kBkkw7JpOgmrGoJTwZLYhqaGbWSC4S76nVee6a0Fggfkd1V0ZfUhxuIa/xrZwOtbogbkdeY3P5VH
% xxxx RvZnQWyKelViFDkdosUkbv7mLYr7EOz4QA/hHSCZb63jZSgwB0B/YHOLcsZMVD+iwcvF/LyA7Rso
% xxxx vXAv4YRDn9ZhRzfwEWbLjCMwl5tUXRrO+twjEaatxzf7TgEgqu9EvmZufgb4pqbsJK/yacmT0+im
% xxxx yUup0bEnQQcDsjiqsAtNDtGi6f8TF5XA2KtjNFvl1XRNMV1xyswsvN1+OgtLocO4y0rWfjaSYskn
% xxxx a8dziVk65E/J9EafXvuARSj+xmNImZlbQ6e3BfsNx94VG7o4PmzfNu1G6naqeTlXA/Ge1EA6UXRv
% xxxx tC6rH3qVQZXQEtfjJx5t8ngr66va5hfuALhF3bWNWv5268LkKRSBoorKRClhzzrG7soJ0vurEbNE
% xxxx pDe2H0sl9lYyDvbrCGVEZfNKac/7/NzLUZ5CzV7SkAk8EdQVGvC8Q+Qd7uNmirh+xZ55fwxQcspN
% xxxx Ru84FgZftzi7roxZi5yF/LI0Uhsu/tOgcfe2FYryLYvq3ANRHClDUDw0uO3rVuQKvGimaZp24b4p
% xxxx t1d3etUocMn5iOpLX35gPViIsTZsO/FBCzwuSQoJV0osW4FXHCKCdGyRxeuMNfuYlEtReYwOapgf
% xxxx
% xxxx
% xxxx ---- S2.a Overview

%pagebreak
\section{Overview}\label{sec:overview}

This section gives a very brief and high-level overview of the \EG system's functionality and how it can be used during an election or in a post-election audit such as an RLA.

To use \EG in an election, a set of \emph{guardians} is enlisted to serve as trustees who manage cryptographic keys.  The members of a canvassing board can serve as guardians.\footnote{It might also be possible to use trusted hardware to perform the duties of guardians. This is explored in https://eprint.iacr.org/2024/915. It is important to note that the role of guardians is to protect confidentiality of votes. Compromised guardians---whether instantiated as humans or hardware---cannot compromise the integrity of the election tallies.}  Prior to the commencement of voting or auditing, the guardians work together to form a public encryption key that will be used to encrypt individual ballots.

After the conclusion of voting or auditing, a \emph{quorum} of guardians is necessary to produce the artifacts required to enable public verification of the tally.


Prior to, throughout, and after an election (or audit) using \EG, an \emph{election administrator} facilitates the \EG protocols and procedures and is responsible for populating and publishing the artifacts of an election in the form of the \emph{election record}.

% xreqj {
  "section": "S2.a",
  "text": "A 'Guardian' role exists with certain duties.",
  "sc": "na" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI enables a Guardian to protect confidentiality of votes.",
  "sc": "na" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI enables members of a canvassing board to serve as Guardians.",
  "sc": "na" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI enables Guardians to manage cryptographic keys.",
  "sc": "" }
% xreqj {
  "section": "S2.a",
  "text": "Compromised human Guardians cannot compromise the integrity of the election tallies.",
  "sc": "" }
% xreqj {
  "section": "S2.a",
  "text": "Compromised \"hardware Guardians\" cannot compromise the integrity of the election tallies.",
  "sc": "" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI enables Guardians to work together to form a public encryption key for homomorphically-tallied vote encryption.",
  "sc": "utsp",
  "utsp": "eg::joint_public_key::t::t1_generate_jvepk_k" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI enables Guardians to work together to form a public encryption key for non-homomorphically-tallied ballot data.",
  "sc": "utsp",
  "utsp": "eg::joint_public_key::t::t2_generate_jbdepk_k_hat" }
% xreqj {
  "section": "S2.a[x]",
  "text": "EGRI uses a Joint Vote Encryption Public Key and a Joint Ballot Data Encryption Public Key formed by the Guardians working together to encrypt individual ballots.",
  "sc": "" }
% xreqj {
  "section": "S2.a",
  "text": "EGRI allows a quorum of guardians to produce all artifacts required to enable public verification of the tally.",
  "sc": "" }
% xreqj {
  "section": "S2.a",
  "text": "No set of guardians fewer than a quorum are able to produce the artifacts required to enable public verification of the tally.",
  "sc": "ace" }
% xreqj {
  "section": "S2.a",
  "text": "% xnote S3.7 Josh 2025-02-25, 2025-03-18: Out of scope for EGRI: An 'Election Administrator' role exists",
  "sc": "na" }
% xreqj {
  "section": "S2.a",
  "text": "Note: EG defines protocols",
  "sc": "ace" }
% xreqj {
  "section": "S2.a",
  "text": "Note: EG defines procedures",
  "sc": "ace" }
% xnote S2.a Josh 2025-02-25, 2025-03-18: Out of scope for EGRI: % xreq2j S2.a EGRI enables the Election Administrator to facilitate defined EG protocols
% xnote S3.7 Josh 2025-02-25, 2025-03-18: Out of scope for EGRI: % xreq2j S2.a EGRI enables the Election Administrator to facilitate defined EG procedures

% xxxx aAA91UVGc4BXuw1qR7HGHuZXSY/0mC2N48N8sNAoU9LlNUmrHH53yTAYhKEVDBo6DDVUfXxszF2B
% xxxx ia3UX+uiOaMHj5Cq4m0ssi1IPjzUVa+1sIFZbdW/zu8EUkrzsgmw2jHDVAMzpuD0OSpME1vYeQj9
% xxxx i7esJDK4G5ZpWUy2VM0v6z3acUbHsFr+HH8USQ5+APrZgXWMFtTsDtjof9Qq+QkvCGZnTx1QvCfL
% xxxx 0WeGS41KG4a/7ar2XwRe/m6fPDWNb7oVLAvxcI84V2WMoyy6TtOj+/RED3Kg4Nh0pvQKO+05x3fb
% xxxx /yE7uYz4PVT5DY/6SsjNULsQW1bvmWFqV0bUmPE0QcxxWspiRJJyq+DB0KpShYF4+srYESqt2ooS
% xxxx F6v+jyMTxW4mqdLzxgjKOZXDLVS9ETdgOYpDgveWQBVCbRXqTsGi7Bos8bF8BikigCqNspk2c/2I
% xxxx X1zm36UNl7eObQ3/YsKg+TY+aBMwpSqpDLahQSp4JTZJH3KpdC10PCuuOkwyUiSj4A4sgCK+JAkd
% xxxx eIdrkzBIYKCl8e63Puu0nYXioJpO3jKSgNhUfynve6DeHkxoS4F6gVjgn31sceYUYDOEmIwJRAqt
% xxxx bYnkRAsWTeu3lVu4MHjycb5WfABsc+EzGjEFNvRqFsO8PDLJSgTH+xMV3JOMzB8EwWmy4R20FlQU
% xxxx +OtzHckdYiod7+uy1gsx5e2qxFEq0HFkkXgsAyzPFhndcGudxWYIaLDgq50Lf/ObJ7CSlwYn1aRx
% xxxx 4sPQ4Er/Slg36tbahyHpie0xWqSH/aUYGZUGdeC2fyE9qDK6L37GNYJVsp39wU989UQAZf72Zlqz
% xxxx
% xxxx
% xxxx ---- S2.b Key Generation

\subsubsection*{Key Generation}
Prior to the start of voting (for an E2E-verifiable election) or auditing (for an RLA), the election guardians participate in a process wherein they generate public keys to be used in the election. Each guardian generates its own public-secret key pairs. One set of guardian public keys will be combined to form a single public key with which votes are encrypted, another set will be combined to form a second public key to encrypt other ballot data. Each guardian also generates an additional communication key pair used to communicate privately with other guardians to exchange information about secret keys so that the election record can be produced after voting or auditing is complete---even if not all guardians are available at that time.

The key generation ceremony begins with each guardian publishing its public keys together with proofs of knowledge of the associated secret keys.  Once all public keys are published, each guardian uses each other guardian's public communication key to encrypt shares of its own secret keys. Finally, each guardian decrypts the shares it receives from other guardians and checks them for consistency.  If the received shares verify, the receiving guardian announces its completion. If any guardian notices any irregularities such as a failed share verification, a failed proof verification, or an inconsistent set of keys, the guardian complains and halts the protocol. If an investigation identifies a misbehaving guardian, it is removed and the protocol restarted from scratch. It is the responsibility of the guardians together with the election administrator to conclude the key generation.


% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to generate its own Vote Encryption (Public|Secret) Key pair prior to the start of voting or RLA.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to generate its own Ballot Data Encryption (Public|Secret) Key pair prior to the start of voting or RLA.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to generate its own Guardian Communication (Public|Secret) Key pair pair prior to the start of voting or RLA.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables Guardians to employ their Guardian Communication Key pairs to communicate privately with other guardians to exchange information about secret keys.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables Guardians to keep their (Vote Encryption|Ballot Data Encryption|Guardian Communication) Secret Keys and Key Shares secret.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables Guardians to perform operations using their (Vote Encryption|Ballot Data Encryption|Guardian Communication) Secret Keys and Key Shares without leaking or exposing them, to the extent practical within the constraints of hardware/os platform.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables potential integration of dedicated hardware tokens or devices with which Guardians could  to perform operations using their (Vote Encryption|Ballot Data Encryption|Guardian Communication) Secret Keys.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables production of an 'Election Record' even if not all guardians are available at that time with",
  "sc": "" }
information exchanged by Guardians using their Guardian Communication Key pairs.
% xreqj {
  "section": "S2.b",
  "text": "(=~ S2.a[x]): EGRI uses a Joint Vote Encryption Public Key and a Joint Ballot Data Encryption Public Key formed by the Guardians working together to encrypt individual ballots.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Guardians participate in a 'Key Generation Ceremony'.",
  "sc": "ace" }
% xreqj {
  "section": "S2.b",
  "text": "At the beginning of the Key Generation Ceremony, EGRI enables each guardian to publish its public keys and proofs of knowledge of the associated secret keys.",
  "sc": "ace" }
% xreqj {
  "section": "S2.b",
  "text": "At the beginning of the Key Generation Ceremony, EGRI enables each Guardian to receive the published keys and proofs of knowledge of the associated secret keys from the other Guardians.",
  "sc": "ace" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to determine that they have received the public keys and proofs of knowledge of the associated secret keys from all other Guardians, or identify those which have not yet been received.",
  "sc": "nyi" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to encrypt to another guardian's Guardian Communication Public Key an InterGuardianShare for the Vote Encryption key.",
  "sc": "ics" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to encrypt to another guardian's Guardian Communication Public Key an InterGuardianShare for the Ballot Data Encryption key.",
  "sc": "ics" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to send the encrypted shares of each of its own (two, non-Communication) secret keys to the other Guardian corresponding to the Guardian Communication Public Key to which it was encrypted.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to use its own Guardian Communication Secret Key to decrypt any shares of other guardians secret keys that it has received.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to check for consistency any shares of other guardians secret keys it has received.",
  "sc": "nyi" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to query or observe which particular shares from all other Guardians it has recieved, decrypted, checked for consistency, and verified, and which are missing, inconsistent, or failed.",
  "sc": "nyi" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to determine that it has received, decrypted, checked for consistency, and verified shares from all other Guardians.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Josh 2025-03-18: \"The code should emit a success or failure indicator that a human can use to verify that the [received key shares] have the required properties.\".",
  "sc": "nyi" }
% xnote S2.b 
% xreqj {
  "section": "S2.b",
  "text": "EGRI can emit information sufficicient to enable an \"all greens on a dashboard\"-type display for a Guardian to observe the (received, decrypted, checked for consistency, and verified) state of shares from the other Guardians.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI can emit a formatted message to enable a Guardian to \"announce its completion\" once it it has received, checked for consistency, and verified shares from all other Guardians.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Vote Encryption Public keys to form the Joint Vote Encryption Public Key.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Ballot Data Encryption Public keys to form the Joint Ballot Data Encryption Public Key.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to notice the irregularity of a failed share verification.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to notice the irregularity of a failed proof verification.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to notice the irregularity of an inconsistent set of keys.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables a Guardian to \"complain and halt the protocol\" subsequent to noticing a failed share verification, a failed proof verification, or an inconsistent set of keys. (Is this published? A communications key message?)",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI enables, supports, or facilitates the initiation of a 'Key Ceremony Irregularity Investigation' subsequent to a Guardian complaint of irregularity.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Sufficient data, documentation, tools, and/or other resources are available to enable a Key Ceremony Irregularity Investigation to distinguish between an 'Actively Misbehaving Guardian' and any other type of error.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Sufficient data, documentation, tools, and/or other resources are available to enable a Key Ceremony Irregularity Investigation to identify an Actively Misbehaving Guardian.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Sufficient data, documentation, tools, and/or other resources are available to enable a Key Ceremony Irregularity Investigation to effectively troubleshoot errors other than an Actively Misbehaving Guardian.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Sufficient data, documentation, tools, and/or other resources are available to enable the Key Ceremony Irregularity Investigation to effectively troubleshoot multiple simultaneous errors, potentially of different types.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI allows to remove a Guardian subsequent to a Key Ceremony Irregularity Investigation which has identified it as an 'Actively Misbehaving Guardian'.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "EGRI allows to restart the Key Generation Ceremony protocol from scratch subsequent to an Investigation which has identified and removed an Actively Misbehaving Guardian.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "TODO? what if its another type of error? Can you just restart whenever? Any of this published?",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "TODO? EGRI enables a Guardian to publish the ciphertext of any encrypted secret key shares that it sent.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "TODO? EGRI enables a Guardian to publish the ciphertext of any encrypted secret key shares that it received.",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "TODO? EGRI enables a Guardian to publish the plaintext corresponding to the ciphertext of any encrypted secret key shares that it sent? Only subsequent to the initiation of Key Ceremony Irregularity Investigation?",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "TODO? EGRI enables a Guardian to publish the plaintext decrypted from the ciphertext of any encrypted shares that it received? Only subsequent to the initiation of Key Ceremony Irregularity Investigation?",
  "sc": "" }
% xreqj {
  "section": "S2.b",
  "text": "Note: The Guardians and Election Administrator together have a duty to successfully complete key generation and conclude the Key Generation Ceremony.",
  "sc": "" }

% xxxx /6UOYCeaSiowbc0+Z7uBiZRiE+dWApx05QcprMnZGFexzNkMNJdXY1ax+WVAj/nxYY1MZ5PBzhDR
% xxxx ROa8PG2wVtaLN6zgbe3l1RU8NfkMD6cHmRJmCdxpHjNWBva42Y9VTMuR++3wWONc5o+izAeM9DL0
% xxxx t/XLazttDogYi1DN973vSXz1iOEyP3V869H2g3hLOPL/umgkFKEQaSn7DXc8LtOmSyrIx+znPz8l
% xxxx j5yHr/V22iQxT768hcUYxYaqWJrqjJ/zml3S9ercIj3DgTmlxjGJ7JSGdmhxAhga/cF3wznk4908
% xxxx Hp5YvINlskZU305gRJ68tUm//jZOvO3kx/So1hCBmv14ps+ooNQATzkrrpeNuxXra4WOTE+gEmjP
% xxxx nigPlQ6q7wPT2MvXO+GfuwGNUa45MQfsewHaxowjEdTF44hE3JvR/MR8WZSmSvgkvFFxmVmi5/Hc
% xxxx 9l1kLwWgJWiUhZFbljrKbRi4y1qz8fa7+7neczevFbJcfGrIEvPX27aDLV+nNXoOtUYYP+JgPG8I
% xxxx uUrT1mVLsf8jkfj3Cs0ljvRt0dXXVR7L6t5LOtKJjZIueiHOo61Gt6aXA0i1OAddS/9uT/wKT98k
% xxxx 7Z551zCbrB87hOgiDXjl8xfY52GWIYUBLy0EJ8obz7BCe0qNl96yP4yPJjK8QcM6IhZNLV+AupBQ
% xxxx AD9P+AuPoxdm3hLXSLGmeBqjD6PxymWh5t9PcLQ/Z3SmNWDERrAXQg7CASEW/PNtv1yFonlqhpiW
% xxxx
% xxxx
% xxxx ---- S2.c Ballot Encryption

\subsubsection*{Ballot Encryption}
In most uses, the election system makes a single call to the \EG API after each voter completes the process of making selections or with each ballot to be encrypted for an RLA. \EG will encrypt the selections made by the voter and return a confirmation code which the system should give to the voter.\footnote{The confirmation code is not necessary for RLA usage.}

% xreqj {
  "section": "S2.c.a[i]",
  "text": "After a voter completes the process of making selections, the election system can make a single call to the EGRI API with the voter selections to encrypt and record the EG Ballot and return a confirmation code for the voter.",
  "sc": "" }
% xreqj {
  "section": "S2.c.a",
  "text": "Other than the single call to the EGRI API described in (S2.c.a[i]), there is no other point at which an existing election system must interface with EGRI.",
  "sc": "" }

% xreqj {
  "section": "S2.c.a",
  "text": "An RLA system can make the single call to the EGRI API described in (S2.c.a[i]), but any confirmation code returned may be discarded.",
  "sc": "" }

This is the only point where an existing election system must interface with \EG. In most uses of \EG, voters will have an opportunity to challenge their encrypted ballots and view their decryptions to ensure that the encryptions are correct.\footnote{A ballot that has been decrypted should be regarded as a test ballot and should not be included in an election tally. After a ballot is challenged, the voter should have an opportunity to cast a fresh ballot.  In an E2E-verifiable election, a decrypted ballot should never be cast.  However, in an RLA, some anonymized cast ballots may ultimately be challenged and decrypted.}
In certain vote-by-mail scenarios and when \EG is used within an RLA, cast-vote records can be provided in batch without any interface between the voting equipment and \EG.

% xreqj {
  "section": "S2.c.b",
  "text": "EGRI can accept can accept voter selections in batches directly. This is to support certain vote-by-mail scenarios and RLA.",
  "sc": "" }
% xreqj {
  "section": "S2.c.b",
  "text": "EGRI records which Ballots have been decrypted ensures that they can never be \"cast\" or participate in any future Tally. Note that this only applies to homomorphically tallied fields and not, say, decrypting the Ciphertext of a non-homomorphically tallied write-in text field.",
  "sc": "" }
% xreqj {
  "section": "S2.c.b",
  "text": "A decrypted ballot should never be 'Cast'. Josh 2025-03-19: Univeral knowledge of all challenged ballots is not required, just checking whatever local store is available is sufficient.",
  "sc": "" }
% xreqj {
  "section": "S2.c.b",
  "text": "Implementation Note: After obtaining their confirmation code, voters should have an opportunity to 'challenge' their ballots in order to view the decrypted selections of their EG Ballot to verify that the encryptions were correct. The voter must be informed that the challenged ballot and decrypted selections will eventually be published as part of the public Election Record.",
  "sc": "" }
% xreqj {
  "section": "S2.c.b",
  "text": "Implementation note: In an RLA, presumably the non-EG ballots were already cast. Some of the resulting EG Ballots may be anonymized, challenged, and decrypted.",
  "sc": "" }

The encrypted ballots are published along with non-interactive zero-knowledge (NIZK) proofs of their well-formedness. The proofs assert that an encrypted ballot is well-formed, which means that it is a legitimate ballot and adheres to the limits imposed on selection options and contests. For example, they prove that a selection did not receive more votes than allowed and that no more than the allowed number of votes were received across the selection options in each contest. The encryption method used herein has a homomorphic property which allows the encrypted ballots to be combined into a single aggregate ballot which consists of encryptions of the election tallies.

% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots that contain encrypted voter selections.",
  "sc": "utsp",
  "utsp": "eg::ballot::t::ballotstyle1_contest1_votes_0_1" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots that may contain encrypted additional data fields for some or all Contests.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots that contain a Ballot Nonce, encrypted to the Joint Ballot Data Encryption Public Key.",
  "sc": "utsp",
  "utsp": "eg::ballot::t::ballotstyle1_contest1_votes_0_1" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI records the EG Ballots for later publication as part of the Election Record.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots that non-interactive zero-knowledge (NIZK) proofs of their well-formedness.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "There can exist no well-formed ballot which is not legitimate, by definition.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots with NIZK proofs proving that, for each contest option, no more than the allowed number of votes were recorded. (Option Selection Limit)",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots with NIZK proofs proving that, for each contest, no more than the total allowed number of votes were recorded. (Contest Selection Limit)",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI produces EG Ballots with Contests having additional data fields may contain NIZK proofs similar to those of voter selectable options or other properties.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI allows to combine EG Ballots into an Aggregate Ballot.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "EGRI allows to combine EG Ballots into a single Aggregate Ballot.",
  "sc": "" }
% xreqj {
  "section": "S2.c.c",
  "text": "An Aggregate Ballot formed by combining EG Ballots contains, for every option in every contest, the tally for that option encrypted to the Joint Vote Public Key.",
  "sc": "" }

% xxxx pO3EGzPLTr7ozztkHTqU38BpwrTFVWDrQeJLSOvgpIO/2XInb3Ugtl23B7LmX9ozOV74QlhosopV
% xxxx YLfWoG5ukMpawKD6G6n3vMAP7lNiNl5P7Rfy+qBJ4wf4FrfAymwubtihp382lSmLHLe614uMiTdH
% xxxx SMVDwMYJ9RLIpFpMyTdJj1TzzMXznoszoOKjKRvt0NwV1+51Lldr/hR+eeoN0s64vbxUHSxPaTAz
% xxxx 7pt4zJjOpnY37lWc5rZ0vZQ1JTOBs+lyWU69AzgxeRlKPv7DFySrw1ZYNsJ5EiAXkV82wPOUe6Lx
% xxxx i4znyOxPd5EYDZbZ41bCbbCRtS6OJ+SR77PRye7CTbYbKGX1c0T+XTkoZud3DqTa3C9cd1TavM4S
% xxxx G0e6lXu4JzAhEAu3KELr/CQE0T4/Kc71eq3pnhQMZ2ZOfh0i41T3al+VR29d8gmt5YzzxtenPYxp
% xxxx 1PHcXiEqu5suSZgc+2RLNkS2TS5sdEYyUw90VH6ql8lGqpf3EY+dWQDH9cznPCxXzcNawN0YZX4a
% xxxx IuU6eIXfEYybz75pJpZXXJvNwLn5MVe6jN4mn7ue5Q+LuGZ4BRs/pjyiIiYbGr/IyT6MbkhfxCNO
% xxxx OqyJKlNFqjbzjwMaFdC6SsyE9HJe8XNISe+FNhNXk7r2vVADrRBJG/HKkfjrdZDjxhTTUyPFCRy5
% xxxx WmEU9m5ab9ncnHIw59CwSwaXgIqrOoTnz6EgcsM7pH3ojIymo/1KC5gCJS80E1S58LsXLDiTa+8U
% xxxx
% xxxx
% xxxx ---- S2.d Verifiable Decryption

\subsubsection*{Verifiable Decryption}
In the final step, election guardians each independently use a share of the secret decryption key
to jointly decrypt the election tallies and generate associated verification data. It is not necessary for all guardians to be available to complete this step. If some guardians are missing, a quorum of guardians is sufficient to complete decryption and generate the verification data. The number of guardians and the quorum required to decrypt are parameters fixed at the time of key generation.

% xreqj {
  "section": "S2.d",
  "text": "Each guardian can compute from the previously shared secret key fragments a share of the secret decryption key",
  "sc": "" }
% xreqj {
  "section": "S2.d",
  "text": "Guardians can independently use their share of the secret decryption key to jointly decrypt the election tallies",
  "sc": "" }
% xreqj {
  "section": "S2.d",
  "text": "Guardians can independently use their share of the secret decryption key to generate associated verification data",
  "sc": "" }
% xreqj {
  "section": "S2.d",
  "text": "Only a quorum of guardians is sufficient to complete decryption",
  "sc": "" }
% xreqj {
  "section": "S2.d",
  "text": "Only a quorum of guardians is sufficient to generate the verification data",
  "sc": "" }

% xxxx gE9IyhGQYzbhCoijQV65tJptZUWdPR8DCjZWKntAO7vblsNUK6HNLL7N1QDvYPSpcW8ci23QrWtN
% xxxx OAW6lVLf89GmcFIz0DEw/2cAlsn3pbWOJfOvKLT1px8LN7tTCFjnz8fb4+mCBvCe1fv5UBENxrv5
% xxxx cQ5bsB94Qs/dZUs6MgmzIDRspsybzy6rgUYxM+zJcTUuQWnSgS3kcRvqyAbseX9XHsLVm6WAIR8Y
% xxxx oQmjhRaNXfr+GoivUEMxw/KU8IDKtVdzkHW4SgJpZprqlxvafWONSd50wuNHd9ZVCXk13oQIjPCr
% xxxx eu7V/wmZ8UQU4ZomFIxF83SB1I+6sxrBN5x5GMn/O4e7GqueCwGvfzCnsMymEanei+ZoRggWdbx5
% xxxx V3mKXffaV1I6RmVI4V0q1IRSWSMvL+ZG0tC++7hdhK31Ruj7wCWV9vUGbuDpQpnEyr3QUGLNp1wL
% xxxx lpxCLEJs4RnjB6gMkU038QUJhRd/lZJa4P5IwSa/qdTfdJqT3rXA8PuMZTXP5e8SibgKUJoa+52j
% xxxx s4MCRtvWs8Nf7QGa2xYG6jeGOiEbAfShQAR2+67OaDoPlqE28CJF0p9FDWdGosQLCYp4zUOn3G2m
% xxxx zugN16qspuvJ8q3a7xbvFRfoXuU+EfItR7HiCV++XK3LXGIMtNdhpA3KeNWt6WuvsqNsbEwuAE6l
% xxxx LDRReTSPCvWmDWTdM1DFLpz6ucB6fGo91YGveiJ3iLHDhtIjJbReL2JFRERsVOQfKGtABawasUBs
% xxxx
% xxxx
% xxxx ---- S2.e.a Independent Verification

\subsubsection*{Independent Verification}
Observers can use this open specification and/or accompanying materials to write independent \emph{election verifiers} that can confirm the well-formedness of each encrypted ballot, the correct aggre\-ga\-tion of these ballots, and the accurate decryption of election tallies.

The verification of an election consists of various verification steps that can be separated into three groupings.

% xreqj {
  "section": "S2.e.a",
  "text": "An observer can use EGRS, EGRI, and/or accompanying materials to independently  implement an election verifier that can confirm the well-formedness of every EG Ballot.",
  "sc": "" }
% xreqj {
  "section": "S2.e.a",
  "text": "An observer can use EGRS, EGRI, and/or accompanying materials to independently  implement an election verifier that can confirm the well-formedness the correct aggregation of EG Ballots.",
  "sc": "" }
% xreqj {
  "section": "S2.e.a",
  "text": "An observer can use EGRS, EGRI, and/or accompanying materials to independently  implement an election verifier that can confirm the accurate decryption of election tallies.",
  "sc": "" }

% xxxx KdRd30L7vICqBgxbzZI8hhrLbiInd03szG+BuBgCXlC4UBG6hwO6N0QFI9uSjLujHoU70NSBjJUe
% xxxx drFsnvrSb4dxBbuOLG8Q1OAXkY8YAG6RaQdbk3vlwOYnLtnndU5SvFd07zWE51xDreLLcbz+YiNt
% xxxx 4VIWsMUGSGrhQIr2IgW1/Wcic+4D+cbbEC1PvaxAfn9boljsdCSn3as2bSHFkGfvk9DsgT8g1Pq6
% xxxx NLSPxsOAUDyAzp9Gi7qq5VbNtjo4s6MrTffyRhGLIIlplLlNdwOFhGFOvohGGiID1e5M54J3FVa/
% xxxx gpFbFMSnz7TsSgZTBcxliuDXBGpE8HCI/KIEk71Lk17s2/yT6i+TCGzOmjzds8u27SPKbPO3/GAN
% xxxx J0tS7Z6nw+WoBW3dfrqMC5EQXlGyQtqyEnV5M7YxDi2Ncs9rzDd27b2dSFI7EqYfra1Csosphh45
% xxxx cEPYERRNnCRGKEwmIPYrIWJUr68YMqlG7ITbj68qeoSCa5E9SEaJAbLo7Mp9+dB+jtetrqS/IwkB
% xxxx nxHuqrhIe6HPNQxiQfTVn8/fXkEJNMx/3sD4+JV7xCqfAMG+AOLTZxVCxXKo2cAF1VRRxe3gbiTT
% xxxx 3MRovs0qaVFgvuFp6yjSDTw7899qQMgiCLRy0BLJUpjdW4rIelo95CHmrmT/ePggk79oiiHHsEhX
% xxxx ys4GBdBVlLa9VhSc7t9WHkiPDgf2uBn1Xjtj6Xx0u6cS2XqG5D8IEqXUJ+KKh6hVptf3zjf5TDtn
% xxxx
% xxxx
% xxxx ---- S2.e.b Independent Verification - Verification of Key Generation

\paragraph{Verification of Key Generation.}
The first group of verification steps pertain to the key generation process. The privacy of the votes depends on the guardians performing these verification steps, and guardians must verify the key generation before any voting operations start.

Under normal circumstances, guardians will engage in a key generation ceremony, produce the election public keys, and verify the generation without controversy; and there is no need for independent verification of this process. Still, independent verification can  help to resolve conflicts should one or more parties to the key generation ceremony complain about the process.

These steps should therefore be considered to be optional for an independent verifier. The integrity of an election record can be fully verified by independent parties without any of the key verification steps.  However, a ``premium'' verifier may wish to include these steps to verify the correctness of guardian actions during the key generation ceremony.

The key generation verification steps are highlighted in orange boxes in this document.

% xreqj {
  "section": "S2.e.b",
  "text": "A verifier can be independently implemented which performs the Guardian Key verification steps S6.2.2.verif2 and S6.2.2.verif3 .",
  "sc": "" }
% xreqj {
  "section": "S2.e.b",
  "text": "A verifier can be independently implemented that fully verifies the integrity of an Election Record without performing either of the Guardian Key verification steps S6.2.2.verif2 and S6.2.2.verif3 .",
  "sc": "" }

% xxxx IyjsNgjVnjnGxYZRcf6hE025pdJ3lwyd+fWF2Cg6p2jMEeBjSL67PFzwoZeeNbUQG9rDaVLbndoV
% xxxx +81ewpqVyZ9NjZ/Op0nNennOBrMlbBCCRmQK4fCjkvzLrN5/UlQ4OMCyWijQrX6kSvCRU9rruwvC
% xxxx be7FA72OsY73OcVYLoZAWGuhIxpCj6J7X6RrL4bYMT5CmaTwxZTnnR/mgjCaPMXI4qbsiyP96SFF
% xxxx stSAeWFmhyTJ5My3KYpGiUj2E+/QiUqKVneYmeDT2z261rUjzVDS9UPuo/UJErQ1f/t7WLIEVz1x
% xxxx yjCv6OoduyPuLrMqWudgpI7WUK05RXMVIm7Jg7Lc4QrwskhFwtAfPMNSh+6sIhjS3DLx9qmt8m8Y
% xxxx mlQkQIoxCnE8fjEopBtJ5DdRh21G+ha1Paa/OAmpQX35wqnNlX6P1n7+lXv4r6RUVHN3rWQtdUlz
% xxxx Y8vBCLFBADymeNzVT7HiXjWd7pEfdQfvwAHWxVMvrt/8IWPvyfI3LbarTBNLM5Ju5cQ2/ecQjiW8
% xxxx GPW9MFXJ3PJwKgMy67i2iY+uQ7N4y9ZPg8gHzYkQ8YsfL6qAC/PTVb2mCVkSa+SoHys9HLt4U21U
% xxxx Z3RouzD5Vok7pnia+tViZL6YcE+Kbm+eTmOVkpkUwQQ665R6KJqq88K4MoBhQMFQ0FmdXYAkh9V5
% xxxx OpGqq2nkhmSAdRayobuAbJdZ0ejUDruF6JG4i1S6T8FH7L/bwl7o49hLzi++u25SoyZyJODWE+Xd
% xxxx
% xxxx
% xxxx ---- S2.e.c Independent Verification - Verification of Ballot Correctness

\paragraph{Verification of Ballot Correctness.}
As will be described in detail below, there are instances in both the E2E-verifiability application and the RLA application where it is desirable to verifiably decrypt individual ballots.  In the former application, this allows voters to confirm that their selections have been correctly recorded within an encrypted ballot, and in the latter application, this allows encrypted electronic ballots that have been selected for audit to be compared with their associated paper ballots.

The steps required to verify the correct decryption of a ballot are grouped together to allow independent verifiers to be easily constructed whose sole purpose is to allow voters or observers to directly verify correct decryption of individual ballots.

The ballot correctness verification steps are highlighted in blue boxes.

% xreqj {
  "section": "S2.e.c",
  "text": "A verifier can be independently implemented which performs the EG Ballot correctness verification steps S6.2.7.verif13, S6.2.7.verif14, S6.2.8.verif17, S6.2.8.verif18, and S6.2.8.verif19",
  "sc": "" }

% xxxx u9rKZSiE6e22NIeGW6AMK0ae03PqxyLCqiStdcsRaEYjg0wPy50Nrp6gPgzdEaPn9F9JlY/ErEPQ
% xxxx cxGGENEQ64iqinqOaustu0bDEm1t03QK2ThkzAr1aopyopfV1fyitlQN8Bdl5aXoWV4/LWAntq7n
% xxxx vPzJz69BttD8KeU0ckEE6T5adOMMP8J3gVjzXx4AW4GLezgwZXn8fXaono5utItP1yVfcuyCDkRV
% xxxx FE+TiRwMNpv04F+B0ql4O/MxqTkt32bOcFkHglr630iCF91JS9CJKWH2Q9NOQnNlQZdODVuT+KXx
% xxxx H406VegvztTM+hMSRMJbjhLzaGh9jvi3bafeG9ysPFhznFmWjUdFhWYxCm8ds/hv+tnnr2NG1sKS
% xxxx nd9/5mkW2e8T7PgFD4wS5RI6PdIYRHZvCHfEGwQBLbPmBeoO29rqwL6k+N4RXYdOKFkOfIUU0UEy
% xxxx M6c/Pb8xLfkgDwS8IDRyuwv+tIyWifabwCp4a20VtrjJVWrWrAgcm6/9wZQghvNlO1quzc5IM8Av
% xxxx OcvrN9IBm7fz/jQ7W2o0YSgTgXJOaCWOj4CiwpPrt98h0bKfp36pObjzDgDZhWKJeTVRl5KWsg4V
% xxxx 1YsuyC+HicEYXINcvor1JofayABFcgFJrxAuHP5PR9iacOs26v9iU5bV8SA6/w9H+vRPSNz9O2oE
% xxxx KfXGzJPgyIsR6BsOLZ2B90MwYzyKnx/nE5xC0FCi03G/fw3rslYLptN9+ChOnyoqGuyFIvABvmTN
% xxxx
% xxxx
% xxxx ---- S2.e.d Independent Verification -  Verification of the Election Record

\paragraph{Verification of the Election Record.}
The remaining verification steps apply to the election as a whole.  These steps enable independent verification that every ballot in an election record is well-formed, that cast ballots have been correctly aggregated homorphically, and that these aggregated values have been correctly decrypted to produce election tallies.

It is critical that a complete verification of an election record also includes verification of the correct decryption of any individual ballots that have been decrypted as part of the process.  A complete election verifier must therefore incorporate an individual ballot verifier as described above.

The election record verification steps are highlighted in green boxes.

% xreqj {
  "section": "S2.e.d",
  "text": "A verifier can be independently implemented which performs the Election Record verification steps S6.2.1.verif1, S6.2.3.verif4, S6.2.4.verif5, S6.2.4.verif6, S6.2.4.verif7, S6.2.4.verif8, S6.2.5.verif9, S6.2.5.verif10, S6.2.5.verif11, S6.2.6.verif12",
  "sc": "" }


% xxxx b8aSJ8oMI7uMDu/K+/V6S2BacsnC02F0d+Ss5/tlTYTb5h5J+hQSbWOvCnaK46sZycN+34tBS/Ad
% xxxx ijJ9C4f+rCNhiA4xlyxx2EquCOSQ4WHAm7h8n8effAJqeP7tewxKW1poWBDbm+P1lP6cpykDTU+e
% xxxx VLp8oo6sYiUMZ3W4MSZHcsbNnm3XNfjHL3fFG6Ysra5DtV0sKcV9mUyRLEZZPp8ODL7KqXZt5r5V
% xxxx g1d2tcuBl0QHMZe6ZAzJQJE8B3uOqPXMjOgXbzbqGwHxBl3r/yMILhYOnJkN9Bx8cELZ5BLgpTWV
% xxxx Q6dhFOPW1jkM68i0ElzgEz+Hv/E22AsS85pV0MecbULLIvopiMo6rH21flXAUnBRDu7P5JQ95Hxw
% xxxx WDeMV9DmMv+GExa0PuIh6JhZ4ABgzWB6XDkC+gaQPyo4i356MeOPLp1Hr6RJf/nsiVgH+NPS0TIC
% xxxx YwC/7lI7HNvTehlavszVZgf+ZtZJKzk/8aPZJMoUcsf18pCMOCp6InmE4gcySu5UdbHkGdC0nDb0
% xxxx ec7dgFlVGS97HYS4JW4Ax2J3q/VcZTBCKVdsO2QIOLQDZh1I1ywUTlLszJV1gA/QDNHODo+YJyeA
% xxxx dEQw98N4rAJOmODgTsN1ocs9qjsapUiZTWG+mOorgmfL1XjsJrdQLnKAD7YAbdM4rgBILqrTg6r7
% xxxx EcRTKwGKL0ykLipgmjtbt3lPd4JNds0IineWk2s6nWSn64zEuhwTHRp6HsDGuBOhoJ8z5aFK/NE8
% xxxx
% xxxx ---- S2.f Using this Specification

\subsubsection*{Using this Specification}
The principal purposes of this document are to specify the functionality of the \EG toolkit and to provide details necessary for independent parties to write election verifiers that consume the artifacts produced by the toolkit.

% xnote S2.f This section generates no unique or specific requirements


\pagebreak

% xxxx ulytKSMXTLX4PqPkchShixcnayHCzD+tBYoQgu/A/bUnIJpejZIrhjxN4tFF4sqgRaKw4ousSWuZ
% xxxx PxumFdQjeT8ckWKwecxV4w3Jgl+jEHPlIG4ynPIRvE7FHGcdzLbCghdFRwcUnPwSJmUa2jK5z1KF
% xxxx IBJMvnWcbGJv+syE7v4C4BH3CJFv8cZYe1AlOHiksKP1KetmQnOzjm+IocKy1+1pxy0Te4yor19o
% xxxx /ax1+nGvObJUKple+5+JYapVOtFLmDyvj1/pfngNmdp7QGr223J7KhIxdbKCGXagNUU6c5ru5Yrz
% xxxx m9inlQQRL/0IZMsDIrkfjkWYmKJ2bfiQC5uv6kcziO2Jx0CCARfHYFyXkck0wW275RSjO7X+23ej
% xxxx REwmSnYmynVy3HDbQb41juv6R3w+888RqYMWqFkn4c7D8Tq+zkuaFoMxSzl4EUIdYcTIzBHVyfcD
% xxxx 6ZOJILlg64yLCQzAN47cGfTGud1iFL3UXZJ5PIsS/aS6lZfXAsRr97use5gfVJQ70h16SE4djuuQ
% xxxx C057ZU7wxJxapJZY9rz9Fj2ddgjA3JMtuCgPtPOzeRTx8LekeLhQvPcSw7kSSFlOiLco1E2aYyea
% xxxx YRN+hNsjRjRNGJaT2gb3K6ycDOFaDyNKX6YADGh8C0a/yRi8FNWg/2uVUxRVuNcogFPQEBJj6xQw
% xxxx +UYezqczucYlW0CEbmiwDi7DvuTJ0xh7wKwyzzo8ZNtBniIMmrmEzK1vEY+gPMtX5n5yNiQJVpgr
% xxxx
% xxxx
% xxxx ---- S3.a.a Components

\section{Components}\label{sec:EGcomponents}
This section describes the four principal components of \EG.
\begin{enumerate}
\item \emph{Parameter Requirements:} These are properties required of parameters to securely and efficiently instantiate the cryptographic components of \EG. These \emph{cryptographic parameters} are fixed ahead of every election and the same parameters can be used across multiple elections. A specific, recommended set of standard parameters is provided. In addition, there are properties required of the \emph{election parameters} that define the election contests, selectable options, and ballot styles, among other information.

% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI enables selecting Fixed Parameters in advance of an election",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI enables using the same Fixed Parameters across multiple elections",
  "sc": "na" }
% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI supplies a standard set of Fixed Parameters",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI enables defining Contests",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI enables defining selectable Contest Options",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.a.a",
  "text": "EGRI enables defining Ballot Styles",
  "sc": "utsp",
  "utsp": "" }


\item \emph{Key Generation:} Prior to each individual election, guardians must generate individual public-secret key pairs and exchange shares of secret keys to enable completion of an election even if some guardians become unavailable.  Although it is preferred to generate new keys for each election, it is permissible to use the same keys for a small number of elections so long as the set of guardians remains the same. A complete new set of keys must be generated if even a single guardian is replaced. Secret key material that is not in use anymore must be destroyed.

% xreqj {
  "section": "S3.a.a.b",
  "text": "(ref: S2.b) EGRI enables Guardians to generate individual public-secret key pairs",
  "sc": "ics" }
% xreqj {
  "section": "S3.a.a.b",
  "text": "(ref: S2.b) EGRI enables Guardians to exchange shares of secret keys",
  "sc": "ics" }
% xreqj {
  "section": "S3.a.a.b",
  "text": "EGRI enables the same set of Guardians to re-use their keys from previous elections (TODO: Don't n, k, p, q, g, etc have to remain the same?)",
  "sc": "" }
% xreqj {
  "section": "S3.a.a.b",
  "text": "EGRI requires that a complete new set of keys must be generated if even a single guardian is replaced (TODO: How?)",
  "sc": "" }
% xreqj {
  "section": "S3.a.a.b",
  "text": "EGRI enables Guardians to destroy their secret keys.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.a.a.b",
  "text": "Josh 2025-03-18: \"There is a point where the rejection of the keys can happen\"",
  "sc": "" }
% note S3.a.a.b Inherent properties of key generation ensure that: A complete new set of keys must be generated if n is changed
% note S3.a.a.b Inherent properties of key generation ensure that: A complete new set of keys must be generated if k is changed
% note S3.a.a.b Inherent properties of key generation ensure that: A complete new set of keys must be generated if any of the Fixed Parameters are changed
% note S3.a.a.b Inherent properties of key generation ensure that: A complete new set of keys must be generated if any of p, q, r, g is changed

\item \emph{Ballot Encryption:} While encrypting the contents of a ballot is a relatively simple operation, most of the work of \EG is the process of creating externally-verifiable artifacts to prove that each encrypted ballot is well-formed (i.e., its decryption is a legitimate ballot without overvotes or improper values).

% xreqj {
  "section": "S3.a.a.c",
  "text": "[No specific requirement]",
  "sc": "na" }

\item \emph{Verifiable Decryption:} At the conclusion of each election, guardians use their secret key shares to jointly produce election tallies together with verifiable artifacts that prove that the tallies are correct.
\end{enumerate}

% xreqj {
  "section": "S3.a.a.d",
  "text": "(ref: S2.c.c) Guardians can use their secret key shares to jointly produce election tallies together with verifiable artifacts that prove that the tallies are correct.",
  "sc": "" }

% xxxx 9nru65LyYDuXuVKKRns8+B0zrgrgKOz8JiBjBJZ6+gord+xI7q2BQnDWIuq90g+4rm6P7KfmAOTc
% xxxx kL2VDTiUT5qSeVBIwohzcdrcd5uVF9dsgM8bdOvgCphLTteDF0IRguWjR+k+WiIZgN3JJP/su8v8
% xxxx U6BzNLi/f9GHazY6W3sDCMz5v4ITIrBH64Aes1bdNOigGjDVTOqKzYULaXUhpqIJRyOmawKICXKz
% xxxx yvZbASFZM3VhMfzQ2k4J6EJDkmeXb2HThNvcC+o/tiSmvojnbLqYB0L0Q9rz2uh3TUXrQBECs1D+
% xxxx lv3iaLs0O3IA6Yk1dWec59zF0QT1mIfNzwqKdW7uHR8XUK61G86ErvW7XuBHbkOtp6tXqPfkAwFy
% xxxx /CwfvDJ6pEYfuWdNR8fr/f6/NkPxZchGxAr1MUnm2CMQvTI5pk6WiOhXyUSGacmfHbaolTjESOvS
% xxxx LDVxuO8w6deNWy4wmehuyuK2itvnRVAk+CiOh7M0iCHJalH87S3jnGg+Skb1kX47MLog5ykkva4+
% xxxx OC/RODqjve4DZ0hX4IoVRKLA1eGvlyfVBZTPAqNq1dYAipM5O7BDMCrWwMzOsvSrToFTfHshBG1B
% xxxx tkV6vQ1drcXDngdE4ESLJFFbaxYVKQcpxON4EgUDpyEU0FVDfII/GPrj5QkQUKkNhFeAQR5/oUpa
% xxxx HuRuZwl+z7hUCgYD8LPguuflThDp7quk152ANZB2xRHjYebIRs2OZrTmELUDK/HhXBaVRz42h+kj
% xxxx
% xxxx
% xxxx ---- S3.a.b Components - Notation

\subsubsection*{Notation}
In the remainder of this specification, the following notation will be used.
\begin{itemize}
  \item $\Z = \{\dots,-3,-2,-1,0,1,2,3,\dots\}$ is the set of integers.
  \item $\Z_n = \{0,1,2,\dots,n-1\}$ is the ring of integers modulo $n$ for some positive integer $n$.
  \item $\Z_n^*$ is the multiplicative subgroup of $\Z_n$ that consists of all invertible elements modulo $n$.  When $p$ is a prime, $\Z_p^* = \{1,2,3,\dots,p-1\}$.
  \item $\Z_p^r$ is the set of $r^{\mathrm{th}}$ powers in $\Z_p^*$. Formally, $\Z_p^r = \{y\in\Z_p^* \mbox{ for which there exists } x\in\Z_p^* \mbox{ such that } y=x^r \bmod p\}$.  When $p$ is a prime for which $p-1=qr$, then $\Z_p^r$ is an order-$q$ cyclic subgroup of $\Z_p^*$ and for each $y\in\Z_p^*$, $y\in\Z_p^r$ if and only if $y^q  \bmod p = 1$.
  \item $x\equiv_n y$ is the predicate that is true if and only if $(x \bmod n) = (y \bmod n)$.
  \item The function $\HMAC(\ ,\ )$ shall be used to denote the \HMAC-\SHA keyed Hash Message Authentication Code (as defined in NIST PUB FIPS 198-1\footnote{NIST (2008) The Keyed-Hash Message Authentication Code (HMAC). In: FIPS 198-1. \url{https://csrc.nist.gov/publications/detail/fips/198/1/final}}) instantiated with \SHA (as defined in NIST PUB FIPS 180-4\footnote{NIST (2015) Secure Hash Standard (SHS). In: FIPS 180-4. \url{https://csrc.nist.gov/publications/detail/fips/180/4/final}}). $\HMAC$ takes as input a key $k$ and a message $m$ of arbitrary length and returns a bit string $\HMAC(k,m)$ of length 256 bits.
  \item The \EG hash function $H(\ ,\ )$ is instantiated with \HMAC and thus has two inputs, both given as byte arrays. The first input to $H$ is used to bind hash values to a specific election. The second is a byte array of arbitrary length and consists of domain separation bytes and the data being hashed. $H$ outputs a digest of 256 bits, which is interpreted as a byte array of length 32. The detailed specification for $H$ is given in Section~\ref{sec:hashing}.
  \item The symbol $\oplus$ denotes bitwise XOR.
  \item The symbol $\parallel$ denotes concatenation.
  \item In general, the variable pairs $(\alpha,\beta)$, $(a,b)$, and $(A,B)$ will be used to denote encryptions.\footnote{Note that as described below, the encryption method used herein requires a pair of values to represent each individual encryption.} Specifically, $(\alpha,\beta)$ will be used to designate encryptions of votes (usually an encryption of a zero or a one), $(A,B)$ will be used to denote aggregations of encryptions---which may be encryptions of larger values, and $(a,b)$ will be used to denote encryption commitments used to prove properties of other encryptions.
\end{itemize}

% xnote S3.a.b This section generates no unique or specific requirements

% xxxx 2cP5ikU/BLdkOCz7lrL/wbaMpuWqbtpm/T5/w3yoxlds56dzFbHpiLbToduxsZ6WFbV7MhDrqBLe
% xxxx DjOqthS1Ux1iVkqgdix7+KGXCWf+PTdMjwby81LmThE6TFgbEjNThsGaY9LCYayJ43RwanPQuweJ
% xxxx +vpU44wFHq2QDuh/2MG1yAFPn93lyC7FnRZwwZWnOY6geLL+iaZHdlXop3J9lE1p+DKUNZfpGtzP
% xxxx V3Tosm5I1n/K4rtcgJ44x2QIAGFTcLP+6pF3WsfT4NL9SaMECrp676PwFBjaBsQOqAhKhLh5R2zF
% xxxx l/yEMQphT84NFRGtHBLMsNxgPCMcUTmdzOwn//JBtFFCPtZ15O6Ao2i0+C6Zlog3ckSWsQxzbIqH
% xxxx odRvppgtzWb+fz2VeqXf2uWlTbN94RJcxLjanzm1mmp8FcRkMzSrPvpiziSQ1OQ0IDaUzMAY2Eok
% xxxx nA3NxknEVYzv/JKFkkMOCk9kaq20eyOk9/jkJ2nQR0oXOWkH+8Y5NpdQr7vtsXaoPjgIBP5He5ej
% xxxx Sz5LlMfVfq9W7ZigIoKmCj/MNajG95NVWHC8RwgkEjcnhXyj/JxgaRGdwlZ4dSX3aKJ8Bdpn32Fd
% xxxx KlJY9xnLISk4+DM6umKdbnSoVUSYlWezxfUWaveMYV4SZKLbzn2T5AulUFz30r2xrn969p0D5ZJo
% xxxx NnuVtUD/tYrdTloUYVBMLB2KlaAGPD5x8fUOIultkUePDnhfMR2cIq8CmdalPyyUKY0EhxOijyHW
% xxxx
% xxxx
% xxxx ---- S3.a.c Components - Encryption of Votes

\subsubsection*{Encryption of Votes}
Encryption of votes in \EG is performed using a public key encryption method suggested by Devillez, Pereira, and Peters,\footnote{Devillez H., Pereira, O., Peters, T. (2022) \emph{How to Verifiably Encrypt Many Bits for an Election?} in ESORICS 2022 Lecture Notes in Computer Science, vol 13555.  Springer, Berlin, Heidelberg. \url{https://link.springer.com/chapter/10.1007/978-3-031-17146-8_32}} which is a variant exponential form of the ElGamal cryptosystem,\footnote{ElGamal T. (1985) \emph{A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms}. In: Blakley G.R., Chaum D. (eds) Advances in Cryptology. CRYPTO 1984. Lecture Notes in Computer Science, vol 196. Springer, Berlin, Heidelberg. \url{https://link.springer.com/content/pdf/10.1007/3-540-39568-7_2.pdf}} which is, in turn, a static form of the widely-used Diffie-Hellman(-Merkle) key exchange.\footnote{Diffie W., Hellman, M. (1976) \emph{New Directions in Cryptography} IEEE Transactions on Information Theory, vol 22}  This encryption method is called \emph{DPP vote encryption} or simply \emph{vote encryption} in this document and rests on precisely the same security basis as Diffie-Hellman(-Merkle) key exchange---which is used to protect the confidentiality of the vast majority of Internet traffic.

% xreqj {
  "section": "S3.a.c.a",
  "text": "Encryption of votes in ElectionGuard is performed using the DPP vote encryption method of Devillez, Pereira, and Peters (2022)",
  "sc": "" }

Primes $p$ and $q$ are publicly fixed such that $qr=p-1$.  A generator $g$ of the order $q$ subgroup $\Z_p^r$ is also fixed.  (Any $g=x^r \bmod p$ for which $x\in\Z_p^*$ suffices so long as $g\neq 1$.)

% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI ensures that P is fixed before the (ref: S.2.b) Key Generation Ceremony. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI ensures that Q is fixed before the (ref: S.2.b) Key Generation Ceremony. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI ensures that G is fixed before the (ref: S.2.b) Key Generation Ceremony. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI verifies that P is prime before any processing. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI verifies that Q is prime before any processing. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI verifies that Q is is not a divisor of r=(p-1)/q before any processing. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.a.c.b",
  "text": "EGRI verifies that G is a generator $g$ of the order $q$ subgroup $\\Z_p^r$ before any processing. Note that this may be a simple comparison with the standard parameter value.",
  "sc": "utsp",
  "utsp": "" }

A public-secret key pair can be chosen by selecting a random $s\in\Z_q$ as a secret key and publishing $K=g^s \bmod p$ as the corresponding public key.\footnote{As will be seen below, the actual public key used to encrypt votes will be a combination of separately generated public keys.  So, no entity will ever be in possession of a secret key that can be used to decrypt votes.}

% xreqj {
  "section": "S3.a.c.c",
  "text": "EGRI enables a Guardian to (ref: S.2.b) generate its own Vote or Ballot Data Encryption Secret Key by selecting a random $s\\in\\Z_q$.",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.c",
  "text": "EGRI enables a Guardian to (ref: S.2.b) derive its Vote or Ballot Data Encryption Public Key as $K=g^s \\bmod p$.",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.c",
  "text": "EGRI enables a Guardian to (ref: S.2.b) publish its Vote or Ballot Data Encryption Public Key.",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.c",
  "text": "No entity is ever in possession of a secret key that can be used to decrypt votes",
  "sc": "" }

A message $m\in\Z_q$ is then encrypted by selecting a random nonce $\xi\in\Z_q$ and forming the pair $(\alpha, \beta) = (g^\xi \bmod p, K^m\cdot K^\xi \bmod p) = (g^\xi \bmod p, K^{m+\xi} \bmod p)$. An encryption $(\alpha, \beta)$ can be decrypted by the holder of the secret $s$ as $\beta/\alpha^s\bmod p = K^m \bmod p$ because

% xxxx ---- eq. 1

\begin{equation}
\frac{\beta}{\alpha^s} \equiv_p \frac{K^{m+\xi}}{(g^\xi)^s} \equiv_p \frac{K^m\cdot K^\xi}{(g^\xi)^s} \equiv_p \frac{K^m\cdot (g^s)^\xi}{(g^\xi)^s} \equiv_p \frac{K^m\cdot g^{\xi s}}{g^{\xi s}} \equiv_p K^m.
\end{equation}

% xreqj {
  "section": "S3.a.c.d",
  "text": "Values are encrypted to a Vote or Ballot Data Encryption Public Key by selecting a random nonce $\\xi\\in\\Z_q$ and forming the pair $(\\alpha, \\beta) = (g^\\xi \\bmod p, K^m\\cdot K^\\xi \\bmod p) = (g^\\xi \\bmod p, K^{m+\\xi} \\bmod p)$ .",
  "sc": "" }

The value of $m$ can be computed from $K^m \bmod p$ as long as the message $m$ is limited to a small, known set of options.\footnote{\label{foot:BSGS}The simplest way to compute $m$ from $K^m \bmod p$ is an exhaustive search through possible values of $m$.  Alternatively, a table pairing each possible value of $K^m \bmod p$ with $m$ can be pre-computed.  A final option which can accommodate a larger space of possible values for $m$ is to use Shanks's baby-step giant-step method as described in the 1971 paper \emph{Class Number, a Theory of Factorization and Genera}, Proceedings of Symposium in Pure Mathematics, Vol. 20, American Mathematical Society, Providence, 1971, pp. 415-440.}

The value of $K^m$ and therefore $m$ can also be computed from the encryption nonce $\xi$, namely via $\beta/K^\xi \equiv_p K^m$. The encryption nonce must therefore be securely protected. While the secret key $s$ allows decryption of any ciphertext encrypted to the public key $K$, the encryption nonce only allows decryption of the specific ciphertext it was used to generate. Release of an encryption nonce can, when appropriate, serve as a fast and convenient method of verifiable decryption.

Usually, only two possible votes are encrypted in this way by \EG. An encryption of one is used to indicate that an option is selected, and an encryption of zero is used to indicate that an option is not selected. For some voting methods such as cumulative voting, Borda count, and a variety of cardinal voting methods like score voting and STAR-voting, it can be necessary to encrypt other small, positive integers.

% xreqj {
  "section": "S3.a.c.e",
  "text": "Ciphertexts encrypted to a Vote or Ballot Data Encryption Public Key can be decrypted using the corresponding Secret Key $s$ as $\\beta/\\alpha^s\\bmod p = K^m \\bmod p$ using exhaustive search, a pre-computed table, or Shanks's baby-step giant-step method.",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.e",
  "text": "The value of $K^m$ can be computed from the encryption nonce $\\xi$",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.e",
  "text": "The value of $m$ can be computed from the encryption nonce $\\xi$",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.e",
  "text": "An encryption of one is used to indicate that an option is selected",
  "sc": "" }
% xreqj {
  "section": "S3.a.c.e",
  "text": "An encryption of zero is used to indicate that an option is not selected",
  "sc": "" }

% xxxx lgxQ97jTvVpo9KROS5cZ6BZmckiDIHa86QHdpfNZg887DZ1kZSGaGBVLNj9inGk9/JrGIHJIh021
% xxxx k0dRB9HTZHC6Vyn6Wstx0m8ACWCn5W2BAzFbXATWqgyvXatoXP/4HBnA6p/truaHe/g9QWiTLPl5
% xxxx imbL/XO3y9nFIU+bF33iwziK3gldPx9Wbr4YODUxGgWCdCI39TbC8JfMLe+PdmiBivCkudtYPo2+
% xxxx BnJCYe+/gJ4c0BMHkJnhnnoqsS/ZRbaelKHio+wTAJtp6cMNZseKmx/vI4oA14ja1y9zM8PTpXKG
% xxxx Ll8tDxKQldPtfd+cYcsuZuRfUiKtAWRCcM67yQn2CduDSe625C2YA8DokwCm4Rjm+eMTSJj8fL5y
% xxxx nO3Ldj7Q0Jo72Yf220iX3/l9X8FjumAFFjGCp11gOCzLdxRM/IM8yVRCkDlEF7d8FFQCfYgr02aZ
% xxxx flxfEM+rabaOmxrpdqnHaLgCA09thm2tdHQW0A/+zdxgsXmFBtLWXjXODP8y8vaewOSbcPXEJrSW
% xxxx okcn/rlpBEKFxK308GdhEdKq8nHEDvniP+YIGvE0RxBZrIZ50uHyQZyScsfYWA33BdV3JGxY0w28
% xxxx G8yaCJUHx3w1/MWE2gEdfajQxNqeUKLCvloy/IjVaID6GcW/r3nmpyx6hOWj5PqsjSqWEynM4zfp
% xxxx z8rHg0tA5Y5uEdAov4crSgi+tbOqodc1/nWgflQNek0OVf4jHQVkwRB1XDYoYKtN+z4XigWhqR1m
% xxxx
% xxxx
% xxxx ---- S3.a.d Components - Homomorphic Properties

\subsubsection*{Homomorphic Properties}
A fundamental quality of the DPP vote encryption is its additively homomorphic property. If two messages $m_1$ and $m_2$ are respectively encrypted as $(A_1,B_1 ) = (g^{\xi_1} \bmod p , K^{m_1+\xi_1} \bmod p)$ and $(A_2, B_2) = (g^{\xi_2}\bmod p, K^{m_2+\xi_2} \bmod p)$, then the component-wise product

% xxxx ---- eq. 2

\begin{equation}
  (A,B) = ( A_1 A_2 \bmod p, B_1 B_2 \bmod p) = (g^{\xi_1+\xi_2} \bmod p, K^{(m_1+m_2) + (\xi_1+\xi_2)} \bmod p)
\end{equation}
is an encryption of the sum $m_1+m_2$ using the nonce $\xi_1 + \xi_2$.\footnote{There is an implicit assumption here that $(m_1+m_2) < q$, which is easily satisfied when $m_1$ and $m_2$ are both small. If $(\xi_1+\xi_2)\geq q$, $(\xi_1+\xi_2) \bmod q$ may be substituted without changing the equation since $g^q\equiv_p 1$.}

This additively homomorphic property is used in two important ways in \EG.  First, all of the encryptions of a single option across ballots can be multiplied to form an encryption of the sum of the individual values. Since the individual values are one (or some other integer for certain voting methods) on ballots that select that option and zero otherwise, the sum is the tally of votes for that option and the product of the individual encryptions is an encryption of the tally.

The other use is to sum all of the selections made in a single contest on a single ballot. In the simplest case, after demonstrating that each option is an encryption of either zero or one, the product of the encryptions indicates the number of options that are encryptions of one, and this can be used to show that no more ones than permitted are among the encrypted options---i.e. that no more options were selected than permitted. When larger integers are allowed, i.e.\ an option can receive multiple votes or weighted votes, the product of the ciphertexts then encrypts the total number of votes or the sum of weights and is used in the same way to ensure only the permitted number of votes or permitted sum of weights were used.

However, as will be described below, it is possible for a holder of a nonce $\xi$ to prove to a third party that a pair $(\alpha, \beta)$ is an encryption of $m$ without revealing the nonce $\xi$ and without access to the secret $s$.

% xreqj {
  "section": "S3.a.d",
  "text": "All the encryptions of a single option across ballots can be multiplied to form an encryption of the sum of the individual values",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "An encryption of some integer other than `0` or `1` is used for certain voting methods",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "The product of the encryptions of a single contest option across ballots is an encryption of the tally (S2.c.c)",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "Every option can be demonstrated to be an encryption of either `0` or `1` (for typical voting methods)",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "Every option can be demonstrated to be an encryption of some integer other than `0` or `1` (for certain voting methods)",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "The product of the encrypted options of a single ballot can be used to show that no more options were selected than permitted",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "When an option can receive multiple or weighted votes, the product of the encrypted options of a single ballot can be used to show that only the permitted number of votes or permitted sum of weights were used",
  "sc": "" }
% xreqj {
  "section": "S3.a.d",
  "text": "A holder of a nonce $\\xi$ can prove to a third party that a pair $(\\alpha, \\beta)$ is an encryption of $m$ without access to the secret $s$ or revealing the nonce $\\xi$",
  "sc": "" }

% xxxx mkCeCT5oailkoE2uJIBe9rulPEGtxLlWnwEPAlFcOX88v07wuHr5hHjT/UE78GXNsYjby6CRrr6c
% xxxx IvZ4oYiEADuvjLCVChiRBixGLuBFFeJqBwHzj8oHLGeRsBjqR697Z7UErKoUGf89wDJBsoySt3El
% xxxx EwM50cDudz/3/AozXfwHTlV18V40x4/JkWc2RwRd6Nx6NSAWsKoiTaHBIMKhEk1hanNbZ/ZXPVJc
% xxxx my73w5ksPr7x9RHj7rPCNaHfoJZfiMGpXqDI+ylUypTd5WOoRtcUSGtVX9OXeqOwHB/+JgcXdkQy
% xxxx zNIru1j7nFTWvQ+uMvGTqB2YC8vD3ooAqgKUhKhO2w+4DDP7WDAgsLAz3JAjYgJ7Xa2eDvddsqmw
% xxxx RslS5l/7HD7V7zrpVZX3QjlLS6JTKBV4hOWyH+Q06VhMUptPmjDRLQCKgmwZWBN3T8cAcRXxKah+
% xxxx +58+XLrsWKLx/hgelbTWvY24M+SgZap3EutsDThqGY8bEXNY2AvQQPAaSdQjmzZwjYJ50eI7DgMR
% xxxx kDWItPt4O7Uw1z6W6w/r5YM47v1SeH0s7MIpOJ5cGZAXM1FFcD8DKnC5TVaTdaRbvIXDdDsqrIQ1
% xxxx fETUMzHqHd7IkBpvNxwo5xujKWeC/tQUHHfvOLmOU2PZEbR8eNBii5Jmsmb9rwIF5RCR4msyS93w
% xxxx S/3PoH6DyG8UY02KCcOhWYEID9hI6NSQIm+rP44dCNS/lhlVx5GhebEHKsrNI6XFu3iCnKbMwW7n
% xxxx
% xxxx
% xxxx ---- S3.a.e Components - Non-Interactive Zero-Knowledge (NIZK) Proofs

\subsubsection*{Non-Interactive Zero-Knowledge (NIZK) Proofs}
\EG provides numerous proofs about encryption keys, encrypted ballots, and election tallies using the following four techniques.
\begin{enumerate}
\item A Schnorr proof\footnote{Schnorr C.P. (1990) Efficient Identification and Signatures for Smart Cards. In: Brassard G. (eds) Advances in Cryptology — CRYPTO' 89 Proceedings. CRYPTO 1989. Lecture Notes in Computer Science, vol 435. Springer, New York, NY. \url{https://link.springer.com/content/pdf/10.1007\%2F0-387-34805-0_22.pdf}} allows the holder of a secret key $s$ to interactively prove possession of $s$ without revealing $s$.
\item A Chaum-Pedersen proof\footnote{Chaum D., Pedersen T.P. (1993) \emph{Wallet Databases with Observers}. In: Brickell E.F. (eds) Advances in Cryptology — CRYPTO' 92. CRYPTO 1992. Lecture Notes in Computer Science, vol 740. Springer, Berlin, Heidelberg. \url{https://link.springer.com/content/pdf/10.1007\%2F3-540-48071-4_7.pdf}} allows an encryption to be interactively proven to decrypt to a particular value without revealing the nonce used for encryption or the secret decryption key $s$. (This proof can be constructed with access to either the nonce used for encryption or the secret decryption key.)
\item The Cramer-Damgård-Schoenmakers technique\footnote{Cramer R., Damgård I., Schoenmakers B. (1994) \emph{Proofs of Partial Knowledge and Simplified Design of Witness Hiding Protocols}. In: Desmedt Y.G. (eds) Advances in Cryptology — CRYPTO' 94. CRYPTO 1994. Lecture Notes in Computer Science, vol 839. Springer, Berlin, Heidelberg. \url{https://link.springer.com/content/pdf/10.1007\%2F3-540-48658-5_19.pdf}} enables a disjunction to be interactively proven without revealing which disjunct is true.
\item The Fiat-Shamir heuristic\footnote{Fiat A., Shamir A. (1987) \emph{How To Prove Yourself: Practical Solutions to Identification and Signature Problems}. In: Odlyzko A.M. (eds) Advances in Cryptology — CRYPTO' 86. CRYPTO 1986. Lecture Notes in Computer Science, vol 263. Springer, Berlin, Heidelberg. \url{https://link.springer.com/content/pdf/10.1007\%2F3-540-47721-7_12.pdf}} allows interactive proofs to be converted into non-interactive proofs.
\end{enumerate}
Using a combination of the above techniques, it is possible for \EG to demonstrate that keys are properly chosen, that ballots are well-formed, and that decryptions match claimed values.\footnote{For all proof variants, \EG uses a compact representation that omits the commitments. Proofs consist of the challenge and response values only. When verifying proofs, the verification equations can be used to recompute the commitments and check their correctness via the challenge hash computation.}

% xreqj {
  "section": "S3.a.e",
  "text": "EGRI enables the use of NIZK proofs to demonstrate that keys are properly chosen.",
  "sc": "" }
% xreqj {
  "section": "S3.a.e",
  "text": "EGRI enables the use of NIZK proofs to demonstrate that ballots are well-formed.",
  "sc": "" }
% xreqj {
  "section": "S3.a.e",
  "text": "EGRI enables the use of NIZK proofs to demonstrate that decryptions match claimed values.",
  "sc": "" }


% xxxx o45qlhFPw/uikME51TBqE5XEVO+s6BKGMr8pAaO/N+3DjIBCysSvsP+Uiv5Byvc9gboD6U9xN+6m
% xxxx n41Vz+rVtUV7Ut9vfoL9uKFiAVX157DPf18nYhNPT+CNDLFRh5w3xjJ/l8tmjpAnsE6eqEKRTuT1
% xxxx wlK/Nl4uuo6Izu87EbCp5fNC/98xkku8hU1qkSIIr7eWbupvqyoJOdisPHGUHz2Qe5FHrw1WArrT
% xxxx FtnhrPrJhAObs8AWQyqQKizCcnTO0t6pC6QfZnoeUJzmbHmrUIiM9J0YY5ym4X8IArbfYYJpQl4D
% xxxx RB9LCOXHhnxV735puriYX84WpwMME0/nXh8zgICzWY4wxAU6L1i4/4ibSuvX50dina+yDE8NiqSG
% xxxx ZZJH7KtCH82fOBviw3FUA1Og/0L4Jm+k+75ncKAdgHRYbNdHRKyKQuMkvYD8OQ6ONC5LoTE7zv6z
% xxxx 5cXy9fOnkJ7ej/H6owKg0ykxjVUulYPLKBcnklMaqYM981YkEm9Y7Oynm1S8vzbnpl6RW25lT6xG
% xxxx xxaBE6SE2Celq4nxrykSh+5555Ti3KfLb2MQkTB/Ga2ZD08FjVzqhJ7Q4KmV164a3vvcWnQ76PbS
% xxxx jDmq9kGnRvXrRtNyD69nSRGhIoRuqBB4OHxPQk9G2uDqVpOl13ktDyYdOgiO8crH++TWFgaj1FMz
% xxxx juxh5ZrioUVlGV0RhImVTWYCLuV7C3YO4gVd1Xz3u2YJFTeEBQ6i4mRi4gc//ZpfjwkbR+vUR6uh
% xxxx
% xxxx
% xxxx ---- S3.a.f Components - Threshold Encryption

\subsubsection*{Threshold Encryption}
Threshold encryption is used for encryption of ballots and other data.\footnote{Shoup, V., Gennaro, R. (2002) \emph{Securing Threshold Cryptosystems against Chosen Ciphertext Attack}. In: J.\ Cryptology, vol 15. \url{https://link.springer.com/content/pdf/10.1007/s00145-001-0020-9.pdf}} This form of encryption makes it very easy to combine individual guardian public keys into a single public key.  The threshold encryption mechanism used in \EG  also offers a homomorphic property that allows individual encrypted votes to be combined to form encrypted tallies.

% xreqj {
  "section": "S3.a.f.a",
  "text": "EGRI enables the use of threshold encryption for encryption of ballots and other data.",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.a",
  "text": "(ref S2.b) Combining individual Guardian (Vote|Ballot Data) Public Keys into a single Joint (Vote|Ballot Data) Public Key.",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.a",
  "text": "Threshold encryption offers a homomorphic property that allows individual encrypted votes to be combined to form encrypted tallies.",
  "sc": "" }

The guardians of an election will each generate three public-secret key pairs. One of the public keys for each guardian will then be combined (as described in the following section) into a single vote encryption public key which is used to encrypt all selections made by voters in the election. The public keys of the second key pairs will be combined in the same way to form a single encryption key for other ballot data. The third key pairs will be used by guardians to privately communicate with each other.

% xreqj {
  "section": "S3.a.f.b",
  "text": "Ref S2.b: \"EGRI enables a Guardian to generate its own public-secret (Vote|Ballot Data) Encryption Key pair...\"",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.b",
  "text": "Ref S2.b: \"At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian (Vote|Ballot Data) Encryption Public keys to form the Joint (Vote|Ballot Data) Encryption Public Key.\"",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.b",
  "text": "(=~ S2.a[x]): EGRI uses a Joint Vote Encryption Public Key and a Joint Ballot Data Encryption Public Key formed by the Guardians working together to encrypt individual ballots.",
  "sc": "" }

At the conclusion of the election, each guardian will compute a verifiable partial decryption of each tally. These partial decryptions will then be combined to form full verifiable decryptions of the election tallies.

% xreqj {
  "section": "S3.a.f.c",
  "text": "EGRI enables a Guardian to compute a verifiable partial decryption of the tally of every Contest Option Field and additional Contest Data Field.",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.c",
  "text": "EGRI enables a quorum of `k` distinct Guardian (Vote|Ballot Data) Encryption Secret Keys to form full verifiable decryptions of the election tallies by combining the verifiable partial decryptions of the tallies of every Contest Option Field and additional Contest Data Field.",
  "sc": "" }

To accommodate the possibility that one or more of the guardians will not be available at the conclusion of the election to form their partial decryptions, the guardians will cryptographically share\footnote{Shamir A. (1979) \emph{How to Share a Secret}. Communications of the ACM, vol 22. \url{https://dl.acm.org/doi/10.1145/359168.359176}} their secret keys amongst each other during key generation in a manner to be detailed in Section~\ref{sec:keygen}. Each guardian can then compute a share of the secret decryption key, which it uses to form the partial decryptions. A pre-determined threshold quorum value $k$ out of the $n$ guardians will be necessary to produce a full decryption.

% xreqj {
  "section": "S3.a.f.d",
  "text": "(Ref: S2.b) Key Ceremony",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.d",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a Guardian to compute a verifiable partial decryption of the tally of every Contest Option Field and additional Contest Data Field.\"",
  "sc": "" }
% xreqj {
  "section": "S3.a.f.d",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a quorum of `k` distinct Guardian (Vote|Ballot Data) Encryption Secret Keys to form full verifiable decryptions of the election tallies by combining the verifiable partial decryptions of the tallies of every Contest Option Field and additional Contest Data Field.\"",
  "sc": "" }

% xxxx R0XoETclIu2SjP77nlxSynx91ocdXGTtaxDBlC/AQ971ICBt17EfyduiNTZLIVNd7otPbBPioV1t
% xxxx CGKD/esix3hSc2jMFdvU/av5ZY06CNshykna+ionniX9tqYBkvG3rf5KQ/ZRj4f/2FAkLDtWJLZ2
% xxxx wStFlv3sh9plwwHU1TmWXIn8v7vUqGRadapt2onBSk/g0DUkGW7WOXK1jobrjc8pNJ/sXADULSfH
% xxxx l1siVE0/W/TYDl9KtpzUoNJ+TbNIMdf6x4AgIhop9ArZoqg1vvBtX8iE3K/4yGhi6OqXdiJRW0U1
% xxxx DLoJjV/VJQWDU3MFSWq0kyELL9kuTDrZ0DsXPPWyxXQsmK8i2CgqKF5KvcJTqS0Ji1yrwOjEdo6+
% xxxx u5FIxqyzigzZ/xfhaiOFeJL/wAGp/5k1pox42Td+4EBhY1qeLjSWGrZ2C7ZHD59szBdLBhlzPv43
% xxxx qVLXEXKw15H1DDfv8qSYf/ECXnvHHe1evpmr5q+5XZef+1NSs6ySdfE1DML32D2qyCp4U1p/NtTl
% xxxx C9tm5JSx1j0sMIqHAEJMUdt8ftg/R3V/fgxAVm2YzzBL2TQwJ/ZwUSdla9cDKv2YlT0OaXDF9Dmz
% xxxx q2s30UdnjLBVCL/zANLLSbsDIt70Ita9Q24UO+xOMAFIXrnk4UiPp8zkvDK7MRPvchHHTAT3LmeO
% xxxx x62crnSvXYVsyNHqfmKyfy4X1iL1xMC888jZySJC8nVeSWD116qHI9h0vY+FO1dBL1bAZ4i5FyOP
% xxxx
% xxxx
% xxxx ---- S3.a.g Components - Encryption of Other Data

\subsubsection*{Encryption of Other Data}
\EG provides means to encrypt data other than votes that do not need to be homo\-morphi\-cally aggregated. Such data may include write-in information that needs to be attached to an encrypted selection and is encrypted to the public key used for other ballot data, or other auxiliary data attached to an encrypted ballot, either encrypted to this public key or to an administrative public key. The non-vote data do not need to be homomorphically encrypted and can use a more standard form of public-key encryption removing the data size restrictions imposed by the vote encryption. \EG encrypts such data with signed hashed ElGamal encryption, which employs a key derivation function (\KDF) to generate a key stream that is then XORed with the data.\footnote{Zheng Y., Seberry J. (1993) \emph{Immunizing public key cryptosystems against chosen ciphertext attacks}. In: IEEE Journal on Selected Areas in Communications, vol 11. \url{https://ieeexplore.ieee.org/document/223871}} To implement the \KDF, encryption makes use of the hash-based message authentication code \HMAC. In \EG, \HMAC is instantiated as \HMAC-\SHA with the hash function \SHA. Encryption also produces a Schnorr proof of knowledge of the random nonce used for the ElGamal encryption.

Guardians also need confidential communication channels between each other, for example to securely communicate the cryptographic shares of a guardian's secret key.
This is the purpose of the third key pair generated by each guardian. Each guardian shares the public portion of its communication key with the other guardians.

% xreqj {
  "section": "S3.a.g",
  "text": "EGRI provides a non-homomorphic encryption method known as \"Hashed ElGamal\" for encrypting data other than votes",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI provides a signature method known as \"Signed Hashed ElGamal\" for encrypting data other than votes",
  "sc": "" }

% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables a user to generate a Hashed ElGamal (Public|Secret) Key pair for Hashed ElGamal encryption",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables a user to encrypt data to a Hashed ElGamal Public Key",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "Any data encrypted to a Hashed ElGamal Public Key cannot be decrypted without the Hashed ElGamal Secret Key",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables using a Hashed ElGamal Secret Key to decrypt data encrypted to the corresponding Hashed ElGamal Public Key",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "Hashed ElGamal encryption does not have the data size restrictions imposed by the vote encryption",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "Hashed ElGamal encryption uses a KDF based on HMAC-SHA-2-256 to generate a key stream XORed with the data",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables a user to generate a Signing Hashed ElGamal (Public|Secret) Key pair for Signing data encrypted with Hashed ElGamal",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables using a Signing Hashed ElGamal Secret Key to sign data that has been encrypted with Hashed ElGamal",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI enables using a Signing Hashed ElGamal Public Key to verify or refute a signature made with Signed Hashed ElGamal",
  "sc": "" }
% xnote S3.a.g 'Sign(ed|ing) Hashed ElGamal' means 'Signed ElGamal'
% xnote S3.a.g Michael 2025-02-25, "Signed ElGamal" refers to the third ciphertext component which is a Schnorr proof of knowledge of the encryption randomness. See: { Schnorr, C.P., Jakobsson, M. (2000). Security of Signed ElGamal Encryption. In: Okamoto, T. (eds) Advances in Cryptology — ASIACRYPT 2000. ASIACRYPT 2000. Lecture Notes in Computer Science, vol 1976. Springer, Berlin, Heidelberg. https://doi.org/10.1007/3-540-44448-3_7 } https://markus-jakobsson.com/papers/jakobsson-asiacrypt00.pdf
% xreqj {
  "section": "S3.a.g",
  "text": "(Ref: S2.b) \"EGRI enables a Guardian to encrypt to another guardian's Guardian Communication Public Key a share of each of its  own (two, non-Communication) secret keys.\"",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt other (non-homomorphically-tallied) Ballot data to the Joint Ballot Data Encryption Public Key",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt voter selection contest write-in Ballot data to the Joint Ballot Data Encryption Public Key",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt other auxiliary data attached to an encrypted Ballot to the Joint Ballot Data Encryption Public Key",
  "sc": "" }
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI, not even signing the Election Record
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI: xreq S3.a.g There is an 'Administrative Public Key'.
% xnote S3.a.g Josh 2025-03-18: The Administrative Public Key is not the same as any key an Election Administrator might use to sign the Election Record
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt voter selection contest write-in Ballot data to the Administrative Public Key.",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt other auxiliary data attached to an encrypted Ballot to the Administrative Public Key.",
  "sc": "" }
% xreqj {
  "section": "S3.a.g",
  "text": "EGRI allows to encrypt other (non-homomorphically-tallied) Ballot data to the Administrative Public Key.",
  "sc": "" }
% xtodo S3.a.g TODO: Do we need separate Administrative (Public|Secret) Key pairs for encryption and signing operations?
% xtodo S3.a.g TODO: How is it configured which specific other data is to be encrypted with which of the Joint Ballot Data Encryption Public Key and/or Administrative Public Key?
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI: S3.a.g TODO: How is the Administrative Public Key generated?
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI: % xtodo S3.a.g TODO: How is the Administrative Public Key distributed?
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI: % xtodo S3.a.g TODO: How is the Administrative Public Key authenticated?
% xnote S3.a.g Josh 2025-03-18: All Administrator Key operations are out of scope for EGRI: % xtodo S3.a.g TODO: Who controls the Administrative Secret Key?

% xxxx uXuEvKBrCpdhCjbYMlKC12vtESr4RWeK9MWFwm7BJ5wLYIjeKifA1kF/+MAMotOC0g+yvcjgD0Kq
% xxxx HDH018nXWhxf9X8GRxk/2DON1vpoh7/3vjuJhkfPGnut6uj5JgjEqKXkmO3UN4kBjaSXtzFNNBQp
% xxxx wSqlpV4y3kIt4Q2BV7oQUCwczktszuLQsc7oO+FYGb+g8NzECCYehLmcPZdQoddwGNLn5GalwQcq
% xxxx 6GWl3pJFH7dqKoDAPZB4ikHaVP+xp59ADkUuJdSFH1wyjCfKjI8tXVrNNszBJd9yitVX+bQy8w1G
% xxxx OQzB04xbK8fvNsIAAMVq4HcaL/znqae+15Uzr043xxKFM7/SoGFQJWFARDnsEJRsRJawp9yqhzlo
% xxxx NGrKxQPKbJRbi/inSgAXHsZVipws85UzQHcebEWv13vunoK9cDYlgFACUZfePswcnh9wu4ZNpcBa
% xxxx soKFlFJWBAz1OrXGExJxeJlr16b0o8RwgMMOJIguXitgMf7sHPH3HaFbMPDgc6tsqIdiwEOC0F1i
% xxxx ietO+KjH4Hj4MTSz2sFYK9ScpNv7EjfTubQcoaVCSV8aUuYN9CFyTfO/EhDKv+ABfFi8ws66IXW6
% xxxx jNqiXjBoe1H0g6FVsbSp/FAbv++7ftrFDP66sKlPKhS6+FzfRrQO6pYKEnXMhFTIQDeZI3pko1hD
% xxxx Vb//Jc5Upt1UZnG2zGq3aatAOjjORTo44VNgPz5kkOcNlnmT/uXHI7lxyZwooThr9ZAwNUORjVe4
% xxxx
% xxxx
% xxxx ---- S3.1 Parameter Requirements

\subsection{Parameter Requirements}\label{sec:parameterreqs}
\EG uses integers to instantiate the encryption rather than elliptic curves in order to make construction of election verifiers as simple as possible without requiring special tools and dependencies.\footnote{Elliptic curves are commonly used in cryptographic applications because they are regarded as achieving the same security for lower cost. But they add complexity that ElectionGuard seeks to avoid.} The encryption scheme used to encrypt votes is defined by a prime $p$ and a prime $q$ which divides $(p-1)$. We use $r = (p-1)/q$ to denote the cofactor of $q$, and a generator $g$ of the order $q$ subgroup $\Z_p^r$ is fixed. We also require $r/2$ to be prime. The specific values for a 4096-bit prime $p$ and a 256-bit prime $q$ which divides $(p-1)$ and a generator $g$ that define all standard baseline parameters are given below.

% xreqj {
  "section": "S3.1",
  "text": "EGRI uses integer-based encryption",
  "sc": "" }
% xreqj {
  "section": "S3.1",
  "text": "EGRI does not use elliptic curves",
  "sc": "" }
% xreqj {
  "section": "S3.1",
  "text": "The encryption scheme used to encrypt votes is defined by primes p and q.",
  "sc": "" }
% xreqj {
  "section": "S3.1",
  "text": "ref:S3.a.c.b \"EGRI verifies that (P|Q|G) is prime before any processing...\"",
  "sc": "" }

% xxxx uH6JIxZVnM9Qv6n6BZoWy7a4f3GGTEEf+y/Cy8fNkuT6BQ3kDQR4K8F3St2VNT6kKfuXxohuCnsh
% xxxx Xi8R/tGp//xJZgIbHVhyD8WENo4kCATjuCA8byma7jkkF2q2cM/KpuPoJDBIVWTH1tOY83M+6zDf
% xxxx 3g0/ICsSScMDr5AIO4F70IDHxbGGto5t8bRVQS3oAZ9MiUnAMj7dqP4GGIf2GWJAaVR+k/7xpPnS
% xxxx HVtlHY4M8cJMDliZr/lwfJeEhok8yFtrtkFEGux55ZG5db7WJI0GMhizs3iif4CDCtx9itiFY0zv
% xxxx 28I4dT7hvWYSOQKh7HTdONPVB821cOOoUxQfWg1TX2Ukg28Smkjh67edIWWnIx28PDymqvJhzgEv
% xxxx 7iB2yyScRWtPhikC4WHy5WxmQTpspYwg9mLxw2GWP1XjHMUJikbVrV2XxJvEGoigwdrUU3kv9onN
% xxxx M6sekcuiawSR/XHUPibRK6VCVhpm9hFaVUCRS+NzWqYXOp/p2rKHPwi1nL7HK9cRZktYSuBDfSr0
% xxxx 7Fqvn/EY6XdNJtLZ7k942Ef3h3mz7G5Ex2NZTbHEf6w2HB9HzJg/By++FNWnr3lTVv0C6hH0jTLE
% xxxx TQn2TDeVusiGKaLlkzoW09nBfmRSK0UwMjeUZC7abD8nPCIh/3+gFtPwaEcVwLOPq5A8PeS4q7O0
% xxxx XMe+SBJE8xrRa9EZDkKnXRGJNuc4ZUZPSuFWnv3YiYELBnEHCGU71gle41ltRUpMICv7Gm8yHHN/
% xxxx
% xxxx
% xxxx ---- S3.1.1 Standard Baseline Cryptographic Parameters

\subsubsection{Standard Baseline Cryptographic Parameters}\label{sec:parameters}
Standard parameters for \EG begin with the largest 256-bit prime $q = 2^{256}-189$. The (big endian) hexadecimal representation of $q$ is as follows.

% xxxx ---- eq. 3

\begin{equation}
q = \mathtt{0xFFFFFFFF \ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFF43}
\end{equation}
The modulus $p$ is then set to be a 4096-bit prime with the following properties.
\begin{enumerate}
	\item The first 256 bits of $p$ are all ones.
	\item The last 256 bits of $p$ are all ones.
	\item $p-1$ is a multiple of $q$.
	\item $(p-1)/2q$ is also prime.
\end{enumerate}
The middle 3584 bits of $p$ are chosen by starting with the first 3584 bits of the constant $\mathrm{ln}(2)$ (the natural logarithm of $2$).\footnote{See \url{https://oeis.org/A068426} for the integer sequence consisting of the bits of $\mathrm{ln}(2)$.} After pre-pending and appending 256 ones, $p$ is determined by finding the smallest prime larger than this value that satisfies the above properties.

This works out to $p = 2^{4096}-2^{3840}+2^{256} (\lfloor2^{3584} \mathrm{ln}(2)\rfloor + \delta) + (2^{256} - 1)$ where the value of $\delta$ is given by
{\small
$$\delta=287975203778583638958138611533602521491887169409704874643524560756486080635197037903.\footnote{Discovering this value $\delta$ required enumerating roughly 2.49 million values satisfying the first three of the above properties to find the first one for which both $p$ and $(p-1)/2q$ are prime.}
$$
}
The hexadecimal representation of $p$ is as follows.
{\allowdisplaybreaks
\begin{align*}
  p \ = \ \mathtt{0x}
  & \mathtt{FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF}\\
  & \mathtt{B17217F7\ D1CF79AB\ C9E3B398\ 03F2F6AF\ 40F34326\ 7298B62D\ 8A0D175B\ 8BAAFA2B}\\
  & \mathtt{E7B87620\ 6DEBAC98\ 559552FB\ 4AFA1B10\ ED2EAE35\ C1382144\ 27573B29\ 1169B825}\\
  & \mathtt{3E96CA16\ 224AE8C5\ 1ACBDA11\ 317C387E\ B9EA9BC3\ B136603B\ 256FA0EC\ 7657F74B}\\
  & \mathtt{72CE87B1\ 9D6548CA\ F5DFA6BD\ 38303248\ 655FA187\ 2F20E3A2\ DA2D97C5\ 0F3FD5C6}\\
  & \mathtt{07F4CA11\ FB5BFB90\ 610D30F8\ 8FE551A2\ EE569D6D\ FC1EFA15\ 7D2E23DE\ 1400B396}\\
  & \mathtt{17460775\ DB8990E5\ C943E732\ B479CD33\ CCCC4E65\ 9393514C\ 4C1A1E0B\ D1D6095D}\\
  & \mathtt{25669B33\ 3564A337\ 6A9C7F8A\ 5E148E82\ 074DB601\ 5CFE7AA3\ 0C480A54\ 17350D2C}\\
  & \mathtt{955D5179\ B1E17B9D\ AE313CDB\ 6C606CB1\ 078F735D\ 1B2DB31B\ 5F50B518\ 5064C18B}\\
  & \mathtt{4D162DB3\ B365853D\ 7598A195\ 1AE273EE\ 5570B6C6\ 8F969834\ 96D4E6D3\ 30AF889B}\\
  & \mathtt{44A02554\ 731CDC8E\ A17293D1\ 228A4EF9\ 8D6F5177\ FBCF0755\ 268A5C1F\ 9538B982}\\
  & \mathtt{61AFFD44\ 6B1CA3CF\ 5E9222B8\ 8C66D3C5\ 422183ED\ C9942109\ 0BBB16FA\ F3D949F2}\\
  & \mathtt{36E02B20\ CEE886B9\ 05C128D5\ 3D0BD2F9\ 62136319\ 6AF50302\ 0060E499\ 08391A0C}\\
  & \mathtt{57339BA2\ BEBA7D05\ 2AC5B61C\ C4E9207C\ EF2F0CE2\ D7373958\ D7622658\ 90445744}\\
  & \mathtt{FB5F2DA4\ B7510058\ 92D35689\ 0DEFE9CA\ D9B9D4B7\ 13E06162\ A2D8FDD0\ DF2FD608}\\
  & \mathtt{FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF}
\end{align*}
\pagebreak
The hexadecimal representation of the cofactor $r = (p-1)/q$ is as follows.
\begin{align*}
  r \ = \ \mathtt{0x01}\
  & \mathtt{00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 000000BC}\\
  & \mathtt{B17217F7\ D1CF79AB\ C9E3B398\ 03F2F6AF\ 40F34326\ 7298B62D\ 8A0D175B\ 8BAB857A}\\
  & \mathtt{E8F42816\ 5418806C\ 62B0EA36\ 355A3A73\ E0C74198\ 5BF6A0E3\ 130179BF\ 2F0B43E3}\\
  & \mathtt{3AD86292\ 3861B8C9\ F768C416\ 9519600B\ AD06093F\ 964B27E0\ 2D868312\ 31A9160D}\\
  & \mathtt{E48F4DA5\ 3D8AB5E6\ 9E386B69\ 4BEC1AE7\ 22D47579\ 249D5424\ 767C5C33\ B9151E07}\\
  & \mathtt{C5C11D10\ 6AC446D3\ 30B47DB5\ 9D352E47\ A53157DE\ 04461900\ F6FE360D\ B897DF53}\\
  & \mathtt{16D87C94\ AE71DAD0\ BE84B647\ C4BCF818\ C23A2D4E\ BB53C702\ A5C8062D\ 19F5E9B5}\\
  & \mathtt{033A94F7\ FF732F54\ 12971286\ 9D97B8C9\ 6C412921\ A9D86797\ 70F499A0\ 41C297CF}\\
  & \mathtt{F79D4C91\ 49EB6CAF\ 67B9EA3D\ C563D965\ F3AAD137\ 7FF22DE9\ C3E62068\ DD0ED615}\\
  & \mathtt{1C37B4F7\ 4634C2BD\ 09DA912F\ D599F433\ 3A8D2CC0\ 05627DCA\ 37BAD43E\ 64A39631}\\
  & \mathtt{19C0BFE3\ 4810A21E\ E7CFC421\ D53398CB\ C7A95B3B\ F585E5A0\ 4B790E2F\ E1FE9BC2}\\
  & \mathtt{64FDA810\ 9F6454A0\ 82F5EFB2\ F37EA237\ AA29DF32\ 0D6EA860\ C41A9054\ CCD24876}\\
  & \mathtt{C6253F66\ 7BFB0139\ B5531FF3\ 01899612\ 02FD2B0D\ 55A75272\ C7FD7334\ 3F7899BC}\\
  & \mathtt{A0B36A4C\ 470A64A0\ 09244C84\ E77CEBC9\ 2417D5BB\ 13BF1816\ 7D8033EB\ 6C4DD787}\\
  & \mathtt{9FD4A7F5\ 29FD4A7F\ 529FD4A7\ F529FD4A\ 7F529FD4\ A7F529FD\ 4A7F529F\ D4A7F52A}
\end{align*}
Finally, the generator $g$ is chosen to be $g = 2^r \bmod p$ and has the following hexadecimal representation.
\begin{align*}
  g \ = \ \mathtt{0x}
  & \mathtt{36036FED\ 214F3B50\ DC566D3A\ 312FE413\ 1FEE1C2B\ CE6D02EA\ 39B477AC\ 05F7F885}\\
  & \mathtt{F38CFE77\ A7E45ACF\ 4029114C\ 4D7A9BFE\ 058BF2F9\ 95D2479D\ 3DDA618F\ FD910D3C}\\
  & \mathtt{4236AB2C\ FDD783A5\ 016F7465\ CF59BBF4\ 5D24A22F\ 130F2D04\ FE93B2D5\ 8BB9C1D1}\\
  & \mathtt{D27FC9A1\ 7D2AF49A\ 779F3FFB\ DCA22900\ C14202EE\ 6C996160\ 34BE35CB\ CDD3E7BB}\\
  & \mathtt{7996ADFE\ 534B63CC\ A41E21FF\ 5DC778EB\ B1B86C53\ BFBE9998\ 7D7AEA07\ 56237FB4}\\
  & \mathtt{0922139F\ 90A62F2A\ A8D9AD34\ DFF799E3\ 3C857A64\ 68D001AC\ F3B681DB\ 87DC4242}\\
  & \mathtt{755E2AC5\ A5027DB8\ 1984F033\ C4D17837\ 1F273DBB\ 4FCEA1E6\ 28C23E52\ 759BC776}\\
  & \mathtt{5728035C\ EA26B44C\ 49A65666\ 889820A4\ 5C33DD37\ EA4A1D00\ CB62305C\ D541BE1E}\\
  & \mathtt{8A92685A\ 07012B1A\ 20A746C3\ 591A2DB3\ 815000D2\ AACCFE43\ DC49E828\ C1ED7387}\\
  & \mathtt{466AFD8E\ 4BF19355\ 93B2A442\ EEC271C5\ 0AD39F73\ 3797A1EA\ 11802A25\ 57916534}\\
  & \mathtt{662A6B7E\ 9A9E449A\ 24C8CFF8\ 09E79A4D\ 806EB681\ 119330E6\ C57985E3\ 9B200B48}\\
  & \mathtt{93639FDF\ DEA49F76\ AD1ACD99\ 7EBA1365\ 7541E79E\ C57437E5\ 04EDA9DD\ 01106151}\\
  & \mathtt{6C643FB3\ 0D6D58AF\ CCD28B73\ FEDA29EC\ 12B01A5E\ B86399A5\ 93A9D5F4\ 50DE39CB}\\
  & \mathtt{92962C5E\ C6925348\ DB54D128\ FD99C14B\ 457F883E\ C20112A7\ 5A6A0581\ D3D80A3B}\\
  & \mathtt{4EF09EC8\ 6F9552FF\ DA1653F1\ 33AA2534\ 983A6F31\ B0EE4697\ 935A6B1E\ A2F75B85}\\
  & \mathtt{E7EBA151\ BA486094\ D68722B0\ 54633FEC\ 51CA3F29\ B31E77E3\ 17B178B6\ B9D8AE0F}
\end{align*}
}

Alternative parameter sets are possible and may be allowed in future versions of \EG.\footnotemark

\footnotetext{If alternative parameters are allowed, election verifiers must confirm that $p$, $q$, $r$, and $g$ are such that both $p$ and $q$ are prime (this may be done probabilistically using the Miller-Rabin algorithm), that $p-1 = qr$ is satisfied, that $1<g<p$, that $g^q \bmod p = 1$, and that generation of the parameters is consistent with the cited standard.}

% xreqj {
  "section": "S3.1.1.a",
  "text": "The value of p matches the specific value given in EG DS v2.1.0 S3.1.1",
  "sc": "" }
% xreqj {
  "section": "S3.1.1.a",
  "text": "The value of q matches the specific value given in EG DS v2.1.0 S3.1.1",
  "sc": "" }
% xreqj {
  "section": "S3.1.1.a",
  "text": "The value of r matches the specific value given in EG DS v2.1.0 S3.1.1",
  "sc": "" }
% xreqj {
  "section": "S3.1.1.a",
  "text": "The value of g matches the specific value given in EG DS v2.1.0 S3.1.1",
  "sc": "" }

% xxxx AmTzsPuHbR5MsdQ73ukxJwXUlHqobjrJEsID+TuMW7NdEoPFEm/PScmXON8wP6jSVAhT4gqBcEEq
% xxxx bzn7xcR/tzhX+zI4dyTP7K149LPtHTDRQ8dwDY0qRNYBr2nn7O2GYSZ9t2iEG+z6D/ARxf1FFI5V
% xxxx i0kwGHDipy8FSheMBPNGwskMUzPBuxSFMwb/kSrn5Vhs4SQR+rms0s6dswnCo4VmkVnuF8w9yRFo
% xxxx J/9FZBKWk0nOLSv2ivjdKisK+fh+wX8yTj0vVm7Z+rysT+YZCjV13lLL6cKgSn5BIGDhbiSDyt3E
% xxxx hUM7Sd8fQH+GBLO1NgzN1kY0JRNZHKl5sbP4e5rm5YYLhT/lz+jBxnNkY3IZ1PmZV23GR568Ybyr
% xxxx 1eGdsXwwk+aE/5/qenAujRf/gIe1gptpP/5ixjOCR5BYN8Yj1GE7KHIZsmm4LLxpbsTlf+zHvhLc
% xxxx sUMw2GF4tXAHw63FdqxIh+hDhxT2VwqXKMjFhHXR8yW8+WLghTj9fbvBcEzTdz2WdAjhaYfKtzcP
% xxxx UyeBitNyfOtdq6r6X4TotQ1bVPb8rQWFBDANhvPGnTSjOoDkv5wLFu1S1WUqTZhzOE2QJworGFyH
% xxxx ez97DRaflETwALBDwWlDmg1ulo24B4snf/p2M829DbQwK83YjV51wyyHhh9eJuoa3IoCWwigt3r0
% xxxx PX7wSyqk073c2fmvwB6X7XTMBOua73WL4x4kOzFzkYCuqcOjXG7M9hzEWYAhm/6kFO4HmrNKjpvy
% xxxx prKOXiLus6Ao9+pvbT2k7+ZmRCximrYuORVsuWnV8p+3KKDD9rldnwBAnc1+nkj1PdJVmLw1mS5d
% xxxx
% xxxx
% xxxx ---- S3.1.1.b.n3_1 Standard Baseline Cryptographic Parameters - Note 3.1

\EGnote{As an example for alternative parameters, the Appendix provides a set of reduced parameters that offer better performance at a lower security level. It additionally provides various sets of very small and insecure parameters for testing purposes only. A good source for parameter generation is appendix A of FIPS 186-4.\footnotemark Allowing alternate non-standard parameters would force election verifiers to recognize and check that parameters are correctly generated. Since these checks are very different from other checks that are required of a verifier, allowing such parameters would add substantial complexity to election verifiers. For this reason, this version of \EG fixes the parameters as above.}
\footnotetext{NIST (2013) Digital Signature Standard (DSS). In: FIPS 186-4. \url{https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf}}

% xreqj {
  "section": "S3.1.1.b.n3_1",
  "text": "Nonstandard parameters are outside the scope of these requirements and thus not permitted.",
  "sc": "" }
% xreqj {
  "section": "S3.1.1.b.n3_1",
  "text": "EGDS must reject any data bearing non-standard parameters.",
  "sc": "" }

% xxxx LONzj0QLo0qqhqNmpIdpjcPF0oTY4+CIVYQT3CvLIoxMAABwxntfk9CNuzNsphVYn+N53a09XzdC
% xxxx nflnXWFHEXlqj+7Pkbs9hLTjdFGwvXWJRONu8ZCy9Sf6tJsKZCXAYE2KRvvnjYQ4CQz7dovKtH5j
% xxxx D+rAtVlRvrfygAxl7NU9pS1iJb93K79j0hbFo5Fu/e35xhxGvyfJgzJldmsOKmJO2PFW754gsB3k
% xxxx lJyBvol2e+sLdiF1G6d+wODjRylcu7F1HiSa6GZQJvzAxJKXfXb1aNfEThXqr0B/VURv+sLLMWx2
% xxxx n6kHvzCPZSG4oH/+mee2oyKprDjTv0RflxKlwStfGeyJTz5M+Bcspdns45R2ZGCmxlGYS8wa7Suh
% xxxx Pmdk1NMlhjuV2W9OPF0y0YgqLqCQStWy4JWDUqnyzrbsJgrLXNMFPdbyiTBUxEvV7NVe6DYw92JM
% xxxx 5d3yk6kt7gl8WAOKtnvFdEUGipioWJb3CPSUxcUxd2rIRqTCnlAiUqf+AFtGXDDmM2QtXuyfSuiB
% xxxx 3Cjpjd+mS8bW9xiQl8EGGLhzSqj+sitPfFbqvqJecEW0wkdcO3MBTnrylvWfssGnK0eIOckCD7gd
% xxxx thn4ecPLvB444A0+He16N65dlhWNNjD9pVEwxAnl5S71YKdnZlel/zjGd+IDuoJ2K5qEaLxfMVoB
% xxxx McGwiEECvyswnkxL8r2S/u+ZJIul6T9hkZ8ZQ5U43CqSza4BtHbasho0G8g9sC43Y6kblKl7EwG4
% xxxx
% xxxx
% xxxx ---- S3.1.2 Parameter Base Hash

\subsubsection{Parameter Base Hash}\label{sec:parameterhash}
The prime modulus $p$, the subgroup order $q$, and the subgroup generator $g$ are hashed together with the number $n$ of guardians that participate in the election and the quorum value $k$ using the \EG hash function $H$ (as specified in detail in Section~\ref{sec:hashing}) to form the parameter base hash

% xxxx ---- eq. 4

\begin{equation}\label{eq:parameterhash}
\HH_P = H(\mathtt{ver}; \mathtt{0x00}, p, q, g, n, k).
\end{equation}
The symbol $\mathtt{ver}$ denotes the version byte array that encodes the used version of this specification. The array has length 32 and contains the UTF-8 encoding of the string $\Str{v2.1.0}$ followed by \texttt{0x00}-bytes, i.e.\ $\mathtt{ver} = \mathtt{0x76322E312E30} \parallel \bytes(0,26)$.\footnote{The notation $\bytes(0,26)$ denotes the concatenation of 26 \texttt{0x00} bytes, see Section~\ref{sec:hashing} for details.} The \texttt{0x00}-byte at the beginning of the second argument of $H$ is a domain separation byte (written in hexadecimal notation), see Section~\ref{sec:hashinputdata}.
This hash value binds together the basic cryptographic election parameters and is an input to all subsequent hash computations, either directly or indirectly, which binds all hash outputs to the baseline parameters and the version of the specification used for the election.

% xreqj {
  "section": "S3.1.2",
  "text": "Varying Parameter n is the number of Guardians",
  "sc": "" }
% xreqj {
  "section": "S3.1.2",
  "text": "Varying Parameter k is the number of Guardians required to form a quorum for decryption.",
  "sc": "" }
% xreqj {
  "section": "S3.1.2",
  "text": "EGRI computes H_P from Fixed Parameters p, q, and g, and Varying Parameters n and k as specified in EG DS v2.1.0 eq. 4",
  "sc": "" }

%\pagebreak

% xxxx KJUNAvMe3AAJPW/ggmI/kCTxFh2sldKEy1pz8ODw9hk2+enwAkHNvUS7VYWQ/AIc8stF/mRzfcIu
% xxxx Tx3TxV4kAcOdZbk7ozoNYU8S/k0ZsmKM6NDwof+ZOgDiKnDANj1d4p9/726O+EG+FBamnwckd+se
% xxxx i4Q4LKbXGHomyMsXtcjLmy/ftMwlLa61/3wjEnX/F/2UqJ1lzNOq2DXi1M+8JuVjD2+vzrxR0F5z
% xxxx 3sIbd8PocmK9eetqRQr3s8ii5WW6iQVhVzF1xUqYua+ay+JT0ibFuIo+g+22Z0qQVdn/DkHvAK2g
% xxxx X87NXUOK2MCJgLR0/FePB64ief+yLGh2mYOTe93faNoIKs8jJiO3jEXEKIgBrcD+zo9538cH6Vby
% xxxx lIpZpgFjtnIp8Vsf83UCj9Zxwa1ninoJplibJjH8CBsz0defFrEZ9Dlo635VVmhEAGIubFNyW5Mw
% xxxx 2ol+rewsS5pIR0HmA7DqkJHVp8aXTqJtzbOnKONrrcuJ/4SQPfiGGNJ4nO2m/9QHE9WKYyTrV+Az
% xxxx p7FV3w+tD0IyCzYTi48rNjuyzp59m9si+pGrEpm5PNkC4CcUOC7vTP6h8QTZhfbQF/Bs+V0h1AQA
% xxxx LytysfPjq0mqP7NAMGQK+sbVvvXY9ky7nMipv+5bNpS4lHVeJyhz3G3i81hjaPdBPl6dmSOcdDuy
% xxxx ejiLovDD8RfwC0s9WldnK1lvnWXpmBbULXXt4BFiM+EgfZZ7s28ZCl26o2X88WYj2z90mxdvywj8
% xxxx
% xxxx
% xxxx ---- S3.1.3.a Election Parameters and the Election Manifest

\subsubsection{Election Parameters and the Election Manifest}\label{sec:manifest}
Another parameter of an election is a public election manifest. The ElectionGuard manifest is a single file that describes the modalities of the election and must specify a wide range of data about it. The manifest file must contain data that makes it unique for each election. Most importantly, the manifest lists, among other information, all the contests in an election, the candidates (selectable options) for each contest together with associations between each option and its representation on a virtual ballot, and the contest selection limit—the number of options that a voter may select in that contest. It is assumed that each contest in the manifest has a unique label and that within each contest, each option also has a unique label. For instance, if Alice, Bob, and Carol are running for governor, and David and Ellen are running for senator, the election manifest file could enable the vector $\langle 0,1,0;0,1\rangle$ to be recognized as a ballot with votes for Bob as governor and Ellen as senator. This section defines how the manifest must uniquely specify the election parameters.

% xreqj {
  "section": "S3.1.3.a",
  "text": "EGRI accepts an Election Manifest",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest is a single file",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest describes the modalities of the election and specifies a wide range of data about it",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest contains data that makes it unique for each election",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "EGRI rejects any Election Manifest that does not contain data that makes it unique for each election",
  "sc": "nfd",
  "status_note": "Ref: S3.1.3.a: \"The manifest file must contain data that makes it unique for each election.\" QUESTION: How could this possibly be implemented?"
}
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest lists all contests in an election",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest for each Contest, specifies the Selectable Options (e.g., candiates)",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest for each Contest, specifies a label unique across all contests in the election",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "EGRI rejects any Election Manifest containing duplicate labels for Contests",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t4" }

% xreqj {
  "section": "S3.1.3.a",
  "text": "The Election Manifest for each ContestOption in each Contest, specifies a label unique across all Selectable Options in that contest",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.a",
  "text": "EGRI rejects any Election Manifest containing duplicate labels for ContestOptions in any Contest",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t5" }
% xnote Josh 2025-03-18: We can just drop 'virtual' in the term "virtual ballot" this just means 'Ballot'

% xxxx /nQ2E+HQFuF/2VgAGUOMvnuItWxZ8LztLaqkiDrQBvbd+WniRc3yTPuWb0819uNQXjlUdMIBE8VX
% xxxx m0AHoMJN6g9yjPQmXzRSYevGYtPV4uz3j1Wwx16zMyyrZbU2UptrT1msuB0XvUk01SwppkMMgG40
% xxxx XGhBX5Cx/BCOiEJog8bq/mWpUMAZJHB7DmBQ877bqOpznVx9hTAolfad3ycR1N4u4Cix1WSr5TjY
% xxxx CYJ0V2faSXGssNmSJ0hM+WtJvgA0gb095I63inmb/GrgLAr5I4q5/GZ52yEGBvuqTzR8f2wZVQ8i
% xxxx T6N55xVfezruwMcD/L7ZbKt/cSV/UqwKSO+CT3AZ9ZmAkQvnVGAwA9s9UYsPyPa3q7KxgpiSYNpK
% xxxx QFX8Md/7xfhBaCym5+qTWhoPYD7kuMmUp9pIN0Ff0n7QZTmFUc3NhvvdxK9yaRlH4SfvNp7HE3Ed
% xxxx a3/KJj+S1sc08o6rFsB3oclqs768Z5uU8nEGGnhem9skaKPpdzLTDBkIECKw7nP/mYgqvAVOG1XY
% xxxx hZ6o2tUhs3skNHwtsqvrBDV2rbXKQFyqefCCaPc2v++drC01RhEcLsG4Atw5TfpH2WN4HGQ/rmC0
% xxxx +l9Ef45uDOMbWgt2tYOU0k1czLTp1ykqmOfoluRhnIY8wD3EOqK4vTLkkj0JgDCTck15DByMP3vt
% xxxx UaIZoCIGnef0gzHgRAMWuB52zrCnuaqMkCK+a8Z7zjulZzNV1CqA7Qm92s+YrHnU4mKjlsK0LsEl
% xxxx
% xxxx
% xxxx ---- S3.1.3.b Election Parameters and the Election Manifest - Labels

\paragraph{Labels.}
The election objects relevant for \EG such as contests, selectable options, and ballot styles are identified by unique labels. A \emph{label} is a string, it should be a short, concise name

% xpg -------------------------------------- page 17 --------------------------------------

or identifier and should therefore not contain any long-form descriptions or line break characters, tabs, and similar special characters. Likewise, a label should not have leading or trailing whitespace characters.

The \EG manifest must contain a label that contains a unique and descriptive identifier for the election.

% xnote S3.1.3.b Ref: S3.1.3.a "The Election Manifest for each contest, specifies a label unique across all contests in the election"
% xnote S3.1.3.b Ref: S3.1.3.a "The Election Manifest for each Selectable Option in each contest, specifies a label unique across all Selectable Options in that contest"

% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI accepts ElectionManifest labels composed of printable characters and (internal, non-contiguous) 0x20 space characters",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels that contain line break characters",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels that have leading or trailing whitespace",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels that contain contiguous sequences of whitespace other than a single 0x20 space",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels that contain special characters (Unicode Category Cc, Cf, Zs, Zl, Zp, or Cs)",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels having no printable characters",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t6" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ElectionManifest labels that decode to a Unicode malformed surrogate pair (Unicode Category Cs). See [JSON RFC Errata 7603](https://www.rfc-editor.org/errata/eid7603)",
  "sc": "ics",
  "status_note": "difficult to test because the Rust std lib rejects malformed UTF-8"
}
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI accepts Contest labels composed of printable characters and (internal, non-contiguous) 0x20 space characters",
  "sc": "utsp",
  "utsp": "eg::contest::t::t1" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels that contain line break characters",
  "sc": "utsp",
  "utsp": "eg::contest::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels that have leading or trailing whitespace",
  "sc": "utsp",
  "utsp": "eg::contest::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels that contain contiguous sequences of whitespace other than a single 0x20 space",
  "sc": "utsp",
  "utsp": "eg::contest::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels that contain special characters (Unicode Category Cc, Cf, Zs, Zl, Zp, or Cs)",
  "sc": "utsp",
  "utsp": "eg::contest::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels having no printable characters",
  "sc": "utsp",
  "utsp": "eg::contest::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects Contest labels that decode to a Unicode malformed surrogate pair (Unicode Category Cs). See [JSON RFC Errata 7603](https://www.rfc-editor.org/errata/eid7603)",
  "sc": "ics" }

% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI accepts ContestOption labels composed of printable characters and (internal, non-contiguous) 0x20 space characters",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t1" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels that contain line break characters",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels that have leading or trailing whitespace",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels that contain contiguous sequences of whitespace other than a single 0x20 space",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels that contain special characters (Unicode Category Cc, Cf, Zs, Zl, Zp, or Cs)",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels having no printable characters",
  "sc": "utsp",
  "utsp": "eg::contest_option::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects ContestOption labels that decode to a Unicode malformed surrogate pair (Unicode Category Cs). See [JSON RFC Errata 7603](https://www.rfc-editor.org/errata/eid7603)",
  "sc": "ics" }

% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI accepts BallotStyle labels composed of printable characters and (internal, non-contiguous) 0x20 space characters",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t1" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels that contain line break characters",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels that have leading or trailing whitespace",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels that contain contiguous sequences of whitespace other than a single 0x20 space",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels that contain special characters (Unicode Category Cc, Cf, Zs, Zl, Zp, or Cs)",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels having no printable characters",
  "sc": "utsp",
  "utsp": "eg::ballot_style::t::t2" }
% xreqj {
  "section": "S3.1.3.b",
  "text": "EGRI rejects BallotStyle labels that decode to a Unicode malformed surrogate pair (Unicode Category Cs). See [JSON RFC Errata 7603](https://www.rfc-editor.org/errata/eid7603)",
  "sc": "ics" }

% xxxx 22TjGMSOx9USpcOyN1nuOTarldmTCNIMTOjNOl+Tf5lBUe1RMLc6GNtpkvze169lxRlDz5/Y54Wf
% xxxx fNafCcomEy0KjPqfUcR7oDOqT7bfAZs3Zn3ZrTAAz0Uz15lGP++w4+TUo4qzEmE9QTJkyKZ6xBmn
% xxxx EpF+QWWYRIyhzW4Vy+uhRwTpnmU5nAkDZgGRCzvD4xZIjsedXG9VhVLlrsOJoJ13nxroS4MfDKFT
% xxxx rpRjRfb0H+++LQxqyBpvtqvPXmtXgl8itQFRUJYbfvTppqVNKObFoq0sHfaDPBrq0NmbuuJGObub
% xxxx uk0t5MR3NJhhzEp0ovQ2H+5dMg6FMrJ5BvwIOeGgVELx6eIUk9b+OolnGG18FZZv1/MAmS3OydvJ
% xxxx YNAYvitZWCetKxXq9hws1BfAAzJEa4Yo0rRW9ZiIngI8rumPKKjnZq4x5IHeoUXYXQkWez39lf4+
% xxxx lyVWrVozbRAX3iBfbNBrqRH1NoMjjNCJDOVOM8b8+dqU6DI8fBeNwLI9nXGOMl1JhAAMDO2zcdK3
% xxxx t/tt5BcRyGb6+0Lz1sOCzlp4ZB7848yU7JoKE6pOIO+9tSkhau4jMs/Yb5/Dm+f3pHxTXO/U73LW
% xxxx OayVbg5SI9W8FlvF9klQeLpwCf9IdoC6TkXrf9lcJDKIJSZWiGGsRnfUIjarRpI7RPxDodddb9Un
% xxxx r/BPRkNTGOH66ja+qB4DyOgqWDlcJ7Z9L8xz/Pz4zUbGuDO/nq0iv1EFuyMdTbQry7nfM/+gmlL5
% xxxx
% xxxx
% xxxx ---- S3.1.3.c Election Parameters and the Election Manifest - Indices

\paragraph{Indices.} Instead of using the labels directly, \EG handles contests, selectable options, ballot styles, etc.\ in terms of their position in a unique ordered list. They can therefore be uniquely identified by an index value. An \emph{index} is a $1$-based ordinal in the range\footnote{The upper bound of $2^{31}-1$ is in consideration of languages and runtimes that do not have full support for unsigned integers.} $1 \leq i < 2^{31}$.

% xreqj {
  "section": "S3.1.3.c",
  "text": "Index values are integers in the range 1 <= i < 2^31",
  "sc": "utsp",
  "utsp": "util::index::t::test_range,util::index::t::misc" }

% xxxx 6cjpETaQ3WR4HUylRu7CrP8uINpvpoP/SrWd3Oz7GwzacfM5pVYh7sBdww9QJ6EGAtIFCwemi0IZ
% xxxx OQluWr0/BX3nZTX5VJO7j3ThH8vntPULBk5H4hhSsMqPwD2kJHyGd0M96ME+LJfgwEZJ/tshJ/Xs
% xxxx vt3nRH9BKszgfH+aK2ZzNMvjnHr0Cg3w6tDaQJXlVzum/E1Q6A63db0dhHVkzxwH4wQYQaulr/7C
% xxxx T8Z47uaSX0/aC9LcSjGo69xk3W4kTGKfEx1H8a21mYTnAbm5ANZUkqgLYUNbJdajPLNYEfeCHHKy
% xxxx qfydQKOWVepJNgDgaVyozzdFH8y46CRgnVb4qGqcZgHL67Qvo8PeCAfXgNhCuPrmiLswO3Y4hnR0
% xxxx ZW3g/For0rl/88VgqvcrgSy3qbTwdxhfA8czJc2IEgcIJbtw99mhOuFlb0ym8+RzLC4+OZQuwIyP
% xxxx B6ReOM0ilTL05y3w6O7xIRlDAst0B4k026PylFaAauVK7jaD97Ml9M+1nWSrUFj51ag+3Gq1imnP
% xxxx 7UNzlCEGMQEvYZYACZ1H93qmQSJc3sUbwSZPSPlW3RFeYHUXVoi2EaPAsV+7MdBP/tvMxKhchbCk
% xxxx sgYIbxH1/uMxICQSLBBWVnmOw6qRuGiX6ySnHarJgN6WG9gA8z3aPFQV8qY4+amUtDVdTwl+zAxD
% xxxx mYvC9xU9WyIo59k9z3TnX0DwObJcM+BJDO8Klar5ORWbRS5sW0pyTzkxPyodG46/S6h5ZX109ByI
% xxxx
% xxxx
% xxxx ---- S3.1.3.d Election Parameters and the Election Manifest - Contests and the contest index

\paragraph{Contests and the contest index.}
The election manifest must contain a single ordered list of all the contests that can appear on any ballot generated for the election. Each contest must have a contest label $\lambda_\Ccal$ that is unique within the election. The position of a given contest $\Ccal$ in this list is the \emph{contest index} $\indc(\lambda_\Ccal)$. The contest list provides a bijective mapping between the unique contest labels and the corresponding contest index values. Note that the first contest in the list has contest index $1$.

% xreqj {
  "section": "S3.1.3.d",
  "text": "Every Contest in the Election Manifest is uniquely identified by a Contest Index value assigned starting at 1 and continuing in the order defined in the Election Manifest.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }

% xxxx H63ch8R/mb3oMwSw3MJYlGmPd6XQ7YOW62WjcC0QA2AaJZy03A4RstQXDPGg8tJepGtboFadV8EF
% xxxx hHqv0vDRhvQj/MixdNTjrKTlQpE+iQZz6BSVzwQTvQa/TaLEqfJPykcOj3jqO40yk9IXZmgitkBd
% xxxx vqXLDZ/7KguODmQwzkOv5FwGGsB+e7SMwbDQNO+BMW0TP24RKQuuL/HrHMPYf8Too/n60/2x2+1i
% xxxx /y/+RiUZsMVFlLOlHTEYPNC+xFHvwL/25JNDWnL2nsgGfcHvngrp0gHK8p3SbojF2wl9APUeYaMF
% xxxx 5NpUujziCFkpzDizIYnof2yzXbtubj0p7bghx+XLSovr+XFYUOxEpJXr/Svy0nUazFLHSDkHIEh2
% xxxx IHF/wMp2xPmxUn7ERRj61skZNw7Zkg6dVc0HGIM6ZGUy4YbI9vtTqUKlpNwRdpoqUHAaXL/MqWmc
% xxxx eDKkNQG1kXlMOOvlf/chs5eEQrItyeEfedyDRoKjwo0izNryqi3uCddFl8qPcJp+rKTxTXMsi20q
% xxxx gQgVGZlGHTRb2YOjeDl/hj/lbZ87qoY5YPOegMxsvMKGt5/pZm6f7xqEI6ETmM5wsmeN8/0QAbI+
% xxxx KdOJyU1q+yoSwmfS7OGH+NOjYT3rG+/WM1ss+E2J/LEcT1SdtfA9Onfju8EBRzzhzO4LXZz/nnGh
% xxxx p5mWUBRS21JbE/ekP0ybbvHVI532G/y71bHNgA416KADYVYqiFNJdMsOUGtVOxvOKFlvYMZeNxzM
% xxxx
% xxxx
% xxxx ---- S3.1.3.e Election Parameters and the Election Manifest - Selectable options and the option index

\paragraph{Selectable options and the option index.}
For each contest in the contest list, the election manifest must also contain a single ordered list of all the selectable options in this contest. Each selectable option $\Ocal$ must have an option label $\lambda_\Ocal$ that is unique within the contest. The position of a given selectable option $\Ocal$ in this list is the \emph{option index} $\indo(\lambda_\Ocal)$. This option list provides a bijective mapping between the unique selectable option labels and the corresponding option index values. The first selectable option in the list has option index $1$.

% xreqj {
  "section": "S3.1.3.e",
  "text": "Every Selectable Option in every Contest is identified uniquely (within the Contest) by an Option Index value assigned starting at 1 (anew for each Contest) and continuing in the order defined in the in the Election Manifest.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.e",
  "text": "If additional data fields are present for a Contest, they are assigned Indices continuing after the Selectable Options.",
  "sc": "ics" }

% xxxx jkYTrY/aXhByHrjAz1KIw7GSKPS7Y+taXpYxlCPauOG0urKv95xFd73lYmsIqaxBOOcG01fLV5uC
% xxxx 9eLVZLA2A7hiql/2SDMuHctbcXbDdJJMFfKFOfNpOakysjjY/8xucusKhRL9KRgWinCoJTEJyK3C
% xxxx Blb2a6c56/7hZeZCElQ0QOUqxpotOq3WteM9h1m0MJvVjR7Jez7LgoGvAeepN0bYIGazAG8F98/i
% xxxx CIiqpukEMjWRuDx8lGc052RxxrlqJ2435V+VemnzCLldJUtKEE6kpTESxln2VNGLMd431+WzVL7K
% xxxx k3MWuKdHgOCiLP6io/42Zlton+Jhvw8xVQmbvLYYt9sxcirwH8rVuPnfTty5vAz84dWgE+UkGBAx
% xxxx XocoQ/KrxEGAaRQYqElJQ8JHiBM7xm40TUlzQMar7x1dshoZqGlIokfGedOrrAMv6M4mS9b1Jqa8
% xxxx hJ03eQpnZHVGde6lnuuTe4vDYmvsnkPjXVD4QmjfDdcf3xRu9GwFmnzUqM2Ctx9ydA3kvc0ZiXjC
% xxxx OAqRFHwROj0kznABPBdaFiY98m16grMf5XQSZrDmvS+giImrZX2SboSqIv3Qz8yquyAdgx4xe4XH
% xxxx r8P0grrzUh4NeaiWzxIIkI/V47qx40od8B1u0wkn4cakZY/2E2wGflRhgbdg4H3g4vUrrectO2z0
% xxxx rbDKSTBVrG007divZT+geFYpcvvImWF0zvv+u+XkQJbdJyDrz1gTRPS2SUlK/Dt/2laK02fNOCMq
% xxxx
% xxxx
% xxxx ---- S3.1.3.f Election Parameters and the Election Manifest - Ballot styles and the ballot style index

\paragraph{Ballot styles and the ballot style index.}
A \emph{ballot style} is a single list of contest indices that defines which contests appear on a ballot generated according to this ballot style. If a contest index is contained in this list, the corresponding contest is present, otherwise it is not. The list is not ordered and only specifies whether a contest is present or not on a ballot of this ballot style. Each ballot style $\Scal$ must have a ballot style label $\lambda_\Scal$ that is unique within the election. The election manifest must contain a single, ordered list of all ballot styles that are possible in the election. The position of a given ballot style $\Scal$ in this list is the \emph{ballot style index} $\inds(\lambda_\Scal)$. The ballot style list provides a bijective mapping between the unique ballot styles and the corresponding ballot style index values. Again, the first ballot style in the list has ballot style index $1$.

% xreqj {
  "section": "S3.1.3.f",
  "text": "The Election Manifest defines a single ordered list of all Ballot Styles in the election.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "Every Ballot Style in the Election Manifest is uniquely identified by a Ballot Style Index value assigned starting at 1 and continuing in the order defined in the Election Manifest.",
  "sc": "utsp",
  "utsp": "eg::ballot::t::ballotstyle5_contest5_votes_0_0_0_1_0_0"
}
% xreqj {
  "section": "S3.1.3.f",
  "text": "The first Ballot Style within the election manifest has index value 1.",
  "sc": "utsp",
  "utsp": "eg::ballot::t::ballotstyle1_contest1_votes_1_1" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "Every Ballot Style defines a label unique across all Ballot Styles in the manifest",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "Every Ballot Style defines a single list of Contest Indices.",
  "sc": "utsp",
  "utsp": "eg::ballot::t::ballotstyle6_contest6_votes_0_1" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "Order of occurence is not significant within a Ballot Style Contest Index list.",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "EGRI rejects any Election Manifest having a Ballot Style with a Contest Index list containing a Contest Index that does not refer to a contest in the Election Manifest.",
  "sc": "uts",
  "uts": "ballot_style::t::t3" }
% xreqj {
  "section": "S3.1.3.f",
  "text": "EGRI rejects any Election Manifest listing the same Contest Index more than once within the same Ballot Style. (It is common for a Contest Index to be listed in multiple Ballot Styles.)",
  "sc": "sci" }

% xxxx Po5fwejl8PQ6qO1VU810VOslRW1tfnySteFpGLQhuXQIh867iGifK2s9fAPPM9azMr5p7hmkzYRk
% xxxx hByNFKAcCSb/m0QYa7SRMh2GurXvHeYK3vhvzmLQrLAcvKhUsueHf1ieUj9IfY2UhejCGTQjmUVN
% xxxx z6J5X185ul4nIo80HYmCnXuZqK4SjLQdGKen1D3VYsFSPgXCADNQGZlseJrZJKiFPifddAZhsFrY
% xxxx k9Q9mxoCY4M/IeeKnb8cCmHIXZBtaXodK85yhPZevCsPM3JxO78/dvK5ckj7j6kCtTQtMQnj3Z1k
% xxxx yhqpr9SchXxvorpQWD/J6fpFt/w3UcaisqTbOIhgCFyLxp5LMdfCbCkuN1OT6rIF4XYg1vr9SbiN
% xxxx KPXZ9pBjq6VRPSe5XzJaOpSMBW69NIOgfhiPF9AgbO+Iq2MbMGBcEgTffnznIqFx3N83jIaDkVUa
% xxxx mVgn1uGEDkqAFfKllfw+P0lmG86bSI3tGzLzHnDMrmZOFjv6hAbxsd2a6+YSb0C4ewLEqokuf/2z
% xxxx nZbf+38581QIWt/ORFwG4EjA+Ruw2bke+yJKOSyqVGv4OSvQjzYc6Wx1qCML3TA0BCgLx0gL4BF5
% xxxx t9IAKU045NM0V3Zjqy6gcSHFuULbwMM4cEhXUmyiWW2XsG7FSKn5PIKfYmYrtZlsY0GFwI9MJGuv
% xxxx 6m+lk7MeudsLtMvTMzEvLef5+X2j1Cn//GY/MI3E3SauM6JdOLfaEyBmHYYvG2dIdmaPYUOtgB68
% xxxx
% xxxx
% xxxx ---- S3.1.3.g Election Parameters and the Election Manifest - Selections, option selection limits, and contest selection limits

\paragraph{Selections, option selection limits, and contest selection limits.}
A \emph{selection} is the as\-sign\-ment of a value to an option by the voter. This could be the value $1$, meaning that the voter selected this option, or the value $0$, meaning that the voter did not select this option. To allow other voting methods, \EG allows a selection to be the assignment of a value in a range $\{0,1,\dots,R\}$, where $R$ is the \emph{option selection limit}, a positive integer that defines the maximal value allowed to be assigned to this option by the voter. For each contest, the election manifest must specify the option selection limit for the options in this contest, and must also specify a \emph{contest selection limit} $L$, which is the maximal total value for the sum of all selections made in that contest. In most elections, all of the option selection limits will be 1.  Contest selection limits are usually 1 as well, although larger contest selection limits are not uncommon (e.g. ``Choose up to 3").

% xreqj {
  "section": "S3.1.3.g",
  "text": "The Election Manifest, for each Contest, may specify a nonnegative integer Contest Selection Limit.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "For any Contest for which a Contest Selection Limit is not specfied, an effective value of 1 is used as the default.",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "The effective Contest Selection Limit limits the maximum total value (i.e., number of votes or voter selections) that can be assigned over all Selectable Options in that contest.",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "EGRI may warn if any effective Contest Selection Limit is zero",
  "sc": "nyi" }

% xreqj {
  "section": "S3.1.3.g",
  "text": "The Election Manifest, for each Selectable Option in each Contest, may specify a nonnegative integer Option Selection Limit.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "For any Selectable Option for which a Option Selection Limit is not specfied, an effective value of 1 is used as the default.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "EGRI may warn if any effective Option Selection Limit is zero",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "The effective Option Selection Limit limits the maximum value (i.e., number of votes) that can be assigned to that particular Selectable Option.",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "The effective Selection Limit limits the maximum value that can be assigned to that Selectable Option",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "If an effective (specified or defaulted) Option Selection Limit exceeds the effective (specified or defaulted) Contest Selection Limit, EGRI applies the smaller value. EGRI may emit a diagnostic message in this case.",
  "sc": "ics" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "If the sum of all effective (specified or defaulted) Option Selection Limits for a Contest exceeds that Contest's effective (specified or defaulted) Contest Selection Limit, EGRI applies the smaller value. This is an ordinary case for which EGRI should not emit a specific diagnostic message.",
  "sc": "ics" }

% xxxx R6OygEb/liCJ4kcSTBaDhzaDNVC28FX8+xiWztzuXzbJf9hTK5dZIwrIr/mKQB1/hwo62dfSr84h
% xxxx i7vFJFCEinXhxEa56W+iriIIQNw1L5DjJB+gaW1AUpt5pA+lbPnAuGWoe7CcsMYuV6RcPIKljpI9
% xxxx FBKmoNBPsg7zB7CZuAtFX9LbbMJvKRDsZcZyrLr3vSGvv5oBOx32EjkiuwHl0AvBVVqxOUFJPUsj
% xxxx 8bwUk1H62pme03nnupeDdgOltiYXCmaL+eNck2nuwXLLOSICzwLAxGEKpdqNbaAADGt5US9NIQ9f
% xxxx 8bN0V5jGJn3QCqKZQBsZGY0Wn1Ad345IhdAcg2SWGPQ8ayiG/pAo31/bVSEIHo/sWjInxYqBeQmG
% xxxx 9xTu5B3wVHrzGLkCeCPGWJye+auPiJkZjnbBtC5rcYz89WlWDAUs/90v4DMDelnEhogzwVn5O+j9
% xxxx PiFNmcML7jhZK+7T76Giqd5gRkLcI0p74gb0D2fsGdInT6VjYocSixjc2FEJPg9r+fcnelJiBjjy
% xxxx aKN0xg2QwSENHkYLWwahYcEiM79ZHBD0sd3ST2G5XyYa4DPDMt/Y6M+k0BuTkSgRLQTcC1yQ2irT
% xxxx 9ZvBhdJxaQC2nULRfwq5/tlxwqhtEtM8C/BZhRrYwJnBblKE0NqCw1YQNTvC/Z9ygKdk2kqWva2U
% xxxx lgGkCyC6QZa7+11TSyEkZN82RL/cg1HaGqueaGTUCnrS28ZwH/C9eJix5zfR7XB+4QJbGBjBbAmX
% xxxx
% xxxx
% xxxx ---- S3.1.3.h Election Parameters and the Election Manifest - Accompanying data fields

\paragraph{Accompanying data fields.}
The election manifest offers optional data fields for accompanying data that can be attached to any of the above and to the manifest in general at the top level. They can be used to provide additional information on contests, selectable options, and ballot styles that go beyond the short unique labels described above. In addition, there can be data fields that describe general information about the election, jurisdiction, election device manufacturers, software versions, the date and location, etc.\ that help to interpret the accompanying data.


There are many other things that a manifest may specify.  Some examples are listed here.

% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest offers optional data fields for accompanying data.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest allows Accompanying Data Fields to be applied at the top level.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest allows Accompanying Data Fields to be applied to Contests. Note: These are different from Additional Contest Data Fields which may be recorded after the Selectable Option Fields on a Ballot.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest allows Accompanying Data Fields to be applied to Selectable Options.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest allows Accompanying Data Fields to be applied to Ballot Styles.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may go beyond short labels.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may be non-unique.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about the election.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about the jurisdiction.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about the election device manufacturers.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about software versions.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about the election date.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "Election Manifest Accompanying Data Fields may describe general information about the election location.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S3.1.3.h",
  "text": "EGRI allows an Election Manifest to specify many other things, including things not listed here.",
  "sc": "nfd",
  "status_note": "" }

% xxxx bFrsNjesN3OjMwuiULUlWxtpqilql/mb78oG5/cCNuNSMDU2yDXtbCNUaW1FuhuwDMgDl5Tl3sKD
% xxxx 78kqI3nBTLf7VT5Ji8PTS4NbxCT8NtOVeGBpQLCKy+355M8t41UKVa33vzNKeq9KrT3pI2N+pu8o
% xxxx b9lIU77IQr6T4Exl9Ecn25M499vwoeH5lVatC+mCsAjU3IGbJYnq8b5FaNeO5+vYyOl8Li3LdiwG
% xxxx 4Xu8xDDkCThWSoApAE04gpsh/OJxwFTHGqRM4QS0/ZZ40AZVCThCPX4xxi1miyn0D2TiS4uaBCvR
% xxxx PljMy2m3TBO4n6ZxQS9LXcFM0pbZzrm02Ru+i3tSLF1FoGThQCZVU1tD2A0Z6kr+uiVCuvcU1Yiy
% xxxx MYVuFlFrwBWZeNCAb2ud4/i1ysMXGnt+/GenE0rXQGWR9uAWhlhiDs1NgqilFlN4wL0oMmOP4H8X
% xxxx pOGzRaSSWPpdUgO9BoBPKr1RfpphdrzwOR8P2J1K8qAO7kabrO3yruqzHLY+Mgctt9M1kcOi6qdO
% xxxx rVRyZJUa5neCtHdyyhy9mTiVkoZJinLExZfqa2e35nKoyfEzB0bnBOKcvY51m9dBLpcg7m0bG2wR
% xxxx xS1SHhRyRgfGYGGbI/y7V1E1v1XPa0ZuHfZ4Dg5THLpZ8J66GJthPpXFgbSReD+odlyiHdrRoI99
% xxxx Tg4aHNrQRl+jKvfMvsJXz7dtbe8h3XJCty3OY5FOQ3JQuGFWW2oIJSD3OC3fH9f/Y5L29a5ZD+wX
% xxxx
% xxxx
% xxxx ---- S3.1.3.i Election Parameters and the Election Manifest - Undervotes

\paragraph{Undervotes.}
An undervote occurs in a contest if the number of selected options (or more generally, the total sum of selections assigned by the voter) is strictly less than the contest selection limit, the number (or total sum) of allowed selections a voter can make in that contest.

% xnote S3.1.3.i This section generates no unique or specific requirements

% xxxx j1Lo0N8+6E04YL5QsYD0M5MIJ1XRAw8Xw/gxW5vTrTXMD3DDrk/2SkTIlbfoVKEKYKnwJiex5TfI
% xxxx hSyX1AvhRg4VZf+n+zwhp9qO0mrZRXuwPqFxIxYmiXwNHD4mfY7TgLycMAnu/gtZUIylBo+cc8i7
% xxxx v26JS+V6eRrs9qP1xo98APphAojtDgyv8MbyWWzzoQ+HMSJxERjtNwpqPKOaWzfhUmdIfuwNHrWB
% xxxx d8RCNx4Q1PNVt/GkBudAvY2PdwbAbzwFrAbW4iwfC7moktAdgpq3tdK6P44/wJYSdkxixODDQEQw
% xxxx 48al+IsB3UXb2ob0SxKz7A33x95sIsr0Y7FhwndYmyHYQhtyXBGl/mgLch2zC5Isx396EQvLLf0W
% xxxx kT+CuYRNm9dxcjZd0ZHOaEvMkTyJxGDLyD741QDD2L/ZROEtA+N688pdRcZCx0Eb8yIgFDaAHstR
% xxxx Q8mU+JxWV1wp9FvFYLKDdpw279NLWvlZ5BrQzuohmweE63lLInCpy4DocFaWyd76mFM6tEGp3dL5
% xxxx 05gHlxoAShjXKzQkmi9IqNB9CICckR9yn4fKgnzBvW/7d2bNSTo3DoHDxhGZ8TICmjWi+OTx6TmE
% xxxx gE8l5jM8JVa5pm57geQqxgtXe2pMP8tRjjVkTX666yffcgF/nDalp6nxRKwrA5gC5A1jHhQBsGsm
% xxxx wRNy9kw1W5HVq5MgTss0zW2687aCAVe45xkLyVYc3hwJfCFtgQv18gipJG0xeQz+sUD+YCFIRRbx
% xxxx
% xxxx
% xxxx ---- S3.1.3.j Election Parameters and the Election Manifest - Counting undervoted contests

\paragraph{Counting undervoted contests.}
A manifest may specify whether the fact that a contest was undervoted should be recorded for public verification.  If this is specified, the indicated contest should have an supplemental field that functions very much like a selectable option field.

This field is an undervote indicator field and is added to all ballots that contain this contest if the occurrence of an undervote is to be verifiably recorded. The field only indicates that an undervote has occurred on the specific ballot in this contest. A tally of this field will contain the total number of ballots that showed an undervote in this contest.
The field does not record by how many votes the contest was undervoted, i.e., by how much the total number of selections by the voter is less than the contest selection limit. This number can be recorded in an undervote difference count field.

% xreqj {
  "section": "S3.1.3.j",
  "text": "'Undervoted Contest Condition' is a per-contest state in which the sum of the voter selections is strictly less than the contest selection limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.j",
  "text": "Election Manifest allows to specify whether to record Undervoted Contest Conditions (unless the Contest specifies otherwise).",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.1.3.j",
  "text": "Election Manifest allows to specify, for each Contest, whether to record the Undervoted Contest Condition for that Contest.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.1.3.j",
  "text": "If a Contest is specified to record Undervoted Contest Conditions, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields and any other additional Contest Data Fields described earlier in this specification (None currently). The value of this additional Contest Data Field is `1` to record the Undervoted Contest Condition and `0` otherwise.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.j",
  "text": "If a Contest is specified to record Undervoted Contest Conditions, any value assigned to the additional Contest Data Field does not count against the voter's Contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.j",
  "text": "If a Contest is specified to record Undervoted Contest Conditions, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is either `0` or `1`.",
  "sc": "nyi" }
% xnote Josh 2025-03-18: Josh: Yes, there should be a range proof for `0` or `1`.


% xxxx tMDBt0rJQ69oi3e0zw4xdKi8NOuqotBQy9LW03BKs3Llg9A4PV+gUwpNghtFEKGeUAH8TVwJdtMV
% xxxx YGiS82cR1ptvVWVjoAzP7cyVfd4Xcm92a35E68RP2B2c0FaF8sdvJmiJv7rDnd1k1gjjZ0x+68K1
% xxxx QPkfKa0280Pc/SpW/fA9V7KgVeXvgVDThSfJQN6osS5wv5kBAsKBX4/dyqJ8bw7+zmZQJydLbWdO
% xxxx BilKj7pIgB9ZJsGlBMF+wsFS7K5uV5kws0igDS+U5dwHwqrYPZcCRnPsfzGrNLoNEyJPnFfDO241
% xxxx ZtR5qzFQAWvE+oxYRSfeDGFsITjh3s4yJx+qUapjyjskQxIvglkrv1+9Z8to3cGcPRvP6P1rpU20
% xxxx ZBY4Jz6q4GW8W5zdbeyXAQWgO6TOOIjy2TFzJCjIE0b0NyiquM0ZvaACjJsHoAQwqGiqa0QlnELP
% xxxx umNWEMX3s4Cpq/+vIe3v3czRB0SyIez5w2b8YBb/vI9I3dRpWi+lvZ5rw/ng1/DjzeajOECHsFYn
% xxxx Bb9qPItJ9pPv7laqmxKc3BVjEeuHOZ33EPMam4uGLZdAgKnc4PEmlFqoUSzPZMW/lKbvlm7NdTsO
% xxxx UrXTiFe/GAsa8BbI6jOhTGej3dJGkWUtrxIp8vdhc54Yj6J8zdcqe6u1DTfH9KXtwhGAoHbk/zHJ
% xxxx 0bcvDBsXNK5mMLZZXZsjblBHA8rKYdhNMXeKLnT6iOM9Kao39yxf46mI5evUzwZFFqkzVFQewlQM
% xxxx
% xxxx
% xxxx ---- S3.1.3.k Election Parameters and the Election Manifest - Undervote difference count

\paragraph{Undervote difference count.}
A manifest may specify whether the total number of undervotes, i.e., the difference between the number of selections the voter made and the contest selection limit (or in other words, the contest net undervote count) for each contest should be recorded for public verification. If this is specified, the indicated contest should have a supplemental field that functions very much like an option field but whose value is a count of the difference between the selection limit and the number of selections made by the voter on that ballot for that contest.

% xreqj {
  "section": "S3.1.3.k",
  "text": "Election Manifest allows to specify whether to record the Undervote Difference Count for that Contest.",
  "sc": "utsp" }
% xreqj {
  "section": "S3.1.3.k",
  "text": "Election Manifest allows to specify, for each Contest, whether to record the Undervote Difference Count for that Contest.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S3.1.3.k",
  "text": "If a Contest is specified to record Undervote Difference Count, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields and any other additional Contest Data Fields described earlier in this specification. The value of this additional Contest Data Field is the (saturating) difference (i.e., nonnegative) between the effective Contest Selection Limit and the the sum of the voter selections for that Contest. This value will not exceed the effective Contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.k",
  "text": "If a Contest is specified to record Undervote Difference Count, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is `0` through the effective Contest Selection Limit, inclusive.",
  "sc": "nyi" }

% xxxx OpTPaKzwU3MjOQVMpjToVrHLEqy/SPGTDVVWhW57lmhuHgNdam+DUezKTti4hNUW5MvjOvLvU61v
% xxxx CRvnnPlhBk5IsXVVU0B1FYoEa9g6WX6jc9T3O5IQQeD24Sd1pS7LDxlZMJ/i/S8iwuZAvsJzNFup
% xxxx 8H1qzZmJkHSnCzOqHahE4UaGNCs0iQT65fwjsabGyply4rWX40LhFd74S7J8iW9RPUz3gpI5KkH9
% xxxx mY3FBAYXmleaGdvf/5BUiXJT9LLWXy/vfDmWFhr8HqWTAeoQp45gZm0gEdnCr2XmR8SsFq4M0P8j
% xxxx nbQkN9NeyCjnttNlnye7n+D1qRDu6H0ruA6KklprsN7FuBH2A5NCNqFNwHDOUK5QQnQQPtxYB44q
% xxxx +YF4rSpbNB1Wgpb8lK5D1G4ad0iYp2qvEF6bVUmO2oXpC3edc9jz+FZbQOq+03odYxznrsMrD1Sk
% xxxx +6z5Tj8mNxLrhcvPe7JtYX3HGyQVgUY/+6/iqM7ibFOsj35CY034FqFZF1APsAujdGxmlgjw2luO
% xxxx abSicrSmtIDsUJdu2hyVNkwN8ebkPoAUP4Ml9KY7EcTN5Meq769aY3bG46MUzOPHPEqYcULBOtW5
% xxxx O3GuruLn5rm6eOyR1G5lnZ7M98vMph+yFrdNHNO1lB4Z5WZrIzK834zpSLiUtqs6rcsRIK3R7FBC
% xxxx iAY8pm1tjTNvmIMwuvwD8/jHNMDJ/em84e4sauk79wTX36BAY/YJVOG2tIIu5g7rb26NC8tTthrT
% xxxx
% xxxx
% xxxx ---- S3.1.3.l Election Parameters and the Election Manifest - Overvotes

\paragraph{Overvotes.}
An overvote occurs in a contest if the voter selected more options than allowed, i.e., more than the contest selection limit for that contest specifies.
A manifest may specify whether an overvoted contest should be recorded for public verification.  If this is specified, the indicated contest should have a supplemental field whose value is set to one if the contest was overvoted on the ballot and to zero otherwise.

For some voting methods, it is possible that a voter marks an overvote for a single selection option, which means that the vote exceeds the option selection limit, while at the same time the contest selection limit is not exceeded. This case should be treated analogously to a contest overvote as described above.

% xreqj {
  "section": "S3.1.3.l",
  "text": "An 'Overvoted Contest Condition' is considered to have occurred for a specific Contest on a specific Ballot when the the sum of the selections is strictly greater than the contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "Election Manifest allows to specify, for each Contest, whether to record the Overvoted Contest Condition for that contest.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If not specified, EGRI does not record the Overvoted Contest Condition.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If a Contest is specified to record Overvoted Contest Conditions, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields and any other additional Contest Data Fields described earlier in this specification. The value of this additional Contest Data Field is `1` to record the Overvoted Contest Condition and `0` otherwise.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If a Contest is specified to record Overvoted Contest Conditions, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is either `0` or `1`.",
  "sc": "nyi" }

% xreqj {
  "section": "S3.1.3.l",
  "text": "'Overvoted Option Condition' is a per-contest-option state in which the selection count is strictly greater than the option selection limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "Election Manifest allows to specify, for each Contest Option, whether to record the Overvoted Option Condition for that Option.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If not specified, EGRI does not record the Overvoted Option Condition.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If a Contest Option is specified to record Overvoted Option Conditions, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields, any other Contest Data Fields recording Overvoted Option Condition for lower-index Options, and any other additional Contest Data Fields described earlier in this specification. The value of this additional Contest Data Field is `1` to record the Overvoted Option Condition and `0` otherwise.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.l",
  "text": "If a Contest is specified to record Overvoted Option Conditions, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is either `0` or `1`.",
  "sc": "nyi" }

% xxxx xtZ0PIFvFO6qoNFftohgffu4UcuyPU/tKyhMpVEkdfqlFRlSaySQyWdKv+ykr7iJ/yntHn4s3Jxd
% xxxx yWkwqMquJm49pbPuSQMtAhf42bWukCA5eBCwdV9AEqRIxVzogbBNsI0FwWVpBopF9SLw6xY2lcqj
% xxxx AiFmRU7I7mk47oD2oFvOAH5128IYsSCUJp8W7rMdK4mLpQWqry4ui6QWflNzdquwilVXAsEUq6Sj
% xxxx TZXhnsZzTMJdnWL62zAppaMIS35KF3Ggo3AlMVqG9/kdKesE1EOSKyj0SAnEZUb2f9Ghq//XQs0k
% xxxx 9lWif//rLB0+vTHpI5873qtd72QwUWJV3dY+4Bv+jwdYVlv207roWKiros0dIdujwtd3NBN7qaCC
% xxxx MiK9/SLQ/zd8TiZfjy3mIoDu06xzEegIkTHKkWEHEAey+hfASAY8FvAQpcLpAZ7QZfUWSe+7kmvO
% xxxx JqFkmIiHi8zasGWNFVbMCxR9FNAR/lpb3zAaVB/+sqCA/j1aiJjYhB3nAoF92urx7JZKnt4HmBUh
% xxxx 1UpRar/TE68VsG4ZjhUCRqOS/BdzNVfeO0gASBUtMEdLKNtlF2VebbJ4E4R8jrQ4NzcC57N7G5NS
% xxxx w0U0AFD/mTE3b6iVS2+l+/QIIt522zTKm8c2ssg31zyQkJfOo71vLzGaI2259bOu+IwQAljNiMwe
% xxxx KReBcciWUmRWOT9vn1RaJJN6vXkxhCmPGHH6NSPBhOG/vLZXyNNWdjC428VMI5XIASIYdVxc5dYV
% xxxx
% xxxx
% xxxx ---- S3.1.3.m Election Parameters and the Election Manifest - Null votes

\paragraph{Null votes.} A null vote occurs in a contest if a voter does not select any option. As such, it is a special form of undervote. A manifest may specify whether the fact that a voter made a null vote in a contest should be counted.

If this is specified, the indicated contest should have a supplemental field that functions like the undervote and overvote indicator fields and indicates whether a null vote occurred.

% xreqj {
  "section": "S3.1.3.m",
  "text": "'Null Voted Contest Condition' is a per-contest state in which the sum of the voter selections is strictly less than the contest selection limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.m",
  "text": "Election Manifest allows to specify, for each Contest, whether to record the Null Voted Contest Condition for that Contest.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.m",
  "text": "If not specified, EGRI does not record the Null Voted Contest Condition.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.m",
  "text": "If a Contest is specified to record Null Voted Contest Conditions, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields and any other additional Contest Data Fields described earlier in this specification. The value of this additional Contest Data Field is `1` to record the Null Voted Contest Condition and `0` otherwise.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.m",
  "text": "If a Contest is specified to record Null Voted Contest Conditions, any value assigned to the additional Contest Data Field does not count against the voter's Contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.m",
  "text": "If a Contest is specified to record Null Voted Contest Conditions, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is either `0` or `1`.",
  "sc": "nyi" }

% xxxx klB4aoHWzvfU5a/fgTsjMr1+bunlCDvsq1Eo7qY19jKBMlhFHfQTjMwXBz6lt3s8S/HDqdqDFlLL
% xxxx 0HM2PHEnu0QvosfD2SZ6mL3F7OsuwcxnKt0n0nGtw8PUDys+A+ujhR0QjvPT+t/GV5LKJYstXAoY
% xxxx RJmxR3aNwtaAV6jVSbYZe47OVvpH2hYM8CAfxNLnl48dDjxl+ouV3fFJmGmMM0luFGP1+Ag1YHGb
% xxxx WfRlYfuI53ySD+IlIi7mwMVlz+fYXZ2lcYjwwS8pEVLiijNC50z97s/aOCKrzeuJzOfKTiYrxk3z
% xxxx VWFiBabpyIMQnmhWi5ckUZ+dzAGQHuT+W7uKXV1wDlT4ZrVI6+Ka+6I9qaAXVt2c4sl/u5RDa0pT
% xxxx hZ7oditGFGH4O6XIJ8DXF+WpupwPddM+oRif2UteoGh+8OpicbkOy81sYHDnlCG60ILhEl4T6exR
% xxxx /8D2mdJcXmzJGbb7bflvsquk2tByZ3/0xLFqyvxxTL1hjC5FJU8nPJiGCbp/N2MWcdTzYCrPt/zC
% xxxx gyfXZrXYbvXZcYfDFPX++/vXzv5GzEC7rS+/lMeV9WT463eJVk3h15l55g4MfC0qOZ6LWQQfInnV
% xxxx dAVfMWCYmO+XzaIzl/krvVhuXnscAdI8FUPzoaQgwEArAAUeNRXMwhHNH2IRTL+aemjWlHOG6quR
% xxxx g2D2eVLwsV7wOL17VS2Xl44knpzyx3G6pYexC7TSO2JOaKujlhOOoT382IgTZVET71xsH/gOpoxK
% xxxx
% xxxx
% xxxx ---- S3.1.3.n Election Parameters and the Election Manifest - Write-ins total

\paragraph{Write-ins total.}
A manifest may specify whether the total number of write-ins selected in each contest is recorded for public verification.  If this is specified, the indicated contest should have a single supplemental field that functions very much like an option field but whose value need not be limited to zero or one.

Any supplemental verifiable field functioning like an option field such as undervote or overvote indicator fields, undervote or overvote count fields, null vote fields, write-in fields, or write-in total count fields must be specified in the manifest per contest. In this specification, they are not discussed separately, but instead are treated like and listed with the option selection fields. Whenever this document lists option selection fields or their encryptions, it is assumed that these include all verifiable fields in that contest such as those defined above. Which of those fields are counted while ensuring adherence to the contest selection limit must also be specified in the manifest.

% xreqj {
  "section": "S3.1.3.n",
  "text": "Election Manifest allows to specify, for each Contest, whether to record the Total Number Of Write-ins selected for that Contest.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "If not specified, EGRI does not record the Total Number Of Write-ins.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "If a Contest is specified to record Total Number Of Write-ins, an additional Contest Data Field is recorded, on every Ballot having that Contest in its Ballot Style, after the Contest Option Fields and any other additional Contest Data Fields described earlier in this specification. The value of this additional Contest Data Field is the (nonnegative integer) total number of write-ins the voter selected for that Contest. This value must not exceed the effective Contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "If a Contest is specified to record Total Number Of Write-ins, any value assigned to the additional Contest Data Field does not count against the voter's Contest Selection Limit.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "If a Contest is specified to record Total Number Of Write-ins, an additional Range Proof is recorded that the encrypted value of the additional Contest Data Field is `0` through the effective Contest Selection Limit, inclusive.",
  "sc": "nyi" }

% xreqj {
  "section": "S3.1.3.n",
  "text": "EGRI may emit a diagnostic message if any contest specifies a number of write-in fields greater than the contest selection limit",
  "sc": "nyi" }

% xreqj {
  "section": "S3.1.3.n",
  "text": "Election Manifest allows to specify, for each Contest, the number of write-in fields available to the voter.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "If a Contest is specified to supply a nonzero number of write-in fields, the Contest has that number of additional 'write-in N' voter-selectable Contest Options.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "Any such write-in fields are to be labeled by the system as \"write-in N\", where 'N' is the 1-based index value of the write-in field. (This will be greater than the Contest Option Field Index value by the number of non-write-in voter-Selectable Options.)",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.g",
  "text": "The Election Manifest, for each additional 'write-in N' voter-selectable Contest Option, may specify a nonnegative integer Option Selection Limit with the same defaults and other semantics as non-write-in Contest Options. (ref: S3.1.3.g)",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "\"Written-in\" means that the election system has recorded some voter-supplied, non-empty, non-blank data associated with a contest and write-in field index value",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "Every write-in field that *was not* written-in MUST be assigned a value of `0`.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "Every write-in field that *was* written-in MUST be assigned a value of `1` or greater, and subject to the same rules for Effective Option Selection Limit as other voter-Selectable Options.",
  "sc": "nyi" }
% xnot2je Josh 2025-03-18: Any additional 'write-in N' voter-selectable fields SHOULD be written-in in index order, but EGRI is not required to enforce this or produce a validatable proof of it.
% xreqj {
  "section": "S3.1.3.n",
  "text": "The value of a write-in field counts against the effective Contest Selection Limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.1.3.n",
  "text": "For every Write-in field, an additional Range Proof is recorded that the encrypted value is either `0` or `1`.",
  "sc": "nyi" }

% xreqj {
  "section": "S3.1.3.n",
  "text": "Josh 2025-03-18: A write-in field can not have an effective Option Selection Limit greater than `1`.",
  "sc": "nyi" }

% xtodo S3.1.3n If the effective Contest Selection Limit is > 1, could someone evade the Option Selection Limit by both selecting and writing-in the same candidate? Similarly if multiple write-in fields are allowed, couldn't they write-in the same choice multiple times?

% xnote S3.1.3n Josh, Michael 2025-03-18: Out of scope for EGRI: Range proofs of the various combinations of fields (selectable options, undervoted, net undervote, overvoted, net overvote, write-in N, count written-in) may be combined under specific conditions


% xxxx jAXC/xAzKL29sdzBS+iFiQL/j0Xxlh+xTqh2P2kZa7sl9l7IbgGjpKMyornfqXSxnc/YGeUrE+go
% xxxx 6+BQssRtY9d9uAknjfsn0Ay4KflT2bjrU6GHCaxGJGBpAcaNa/+3O3JINbXQNJG7DOfbnPocRm6E
% xxxx D9n+5zcc+z3FIQwJxAEPeNtpfdzGElo2bf6/dMEwIUF7Lx+dAAH2AL9PXYZeTdRVfDIYU7r7ClHX
% xxxx YqUeWioHMevJL1cOWJWeGQB6E/tcjSWDlh5UIryPaPIy1zv+YPHhyDDECPWFSHxQqM/N778QFPmW
% xxxx wautsgPXiWHTh1YT+GdZSpKk+skgtdCT6jJcpsZ1wtuTbKmU/h8Y7RysSM4hDcr2XzWHcPxLJbjF
% xxxx M5w6M8J1Xj4zRhdfzaG6xzhYTyzEUiMjBvDYxGRHZV5nVErh4EthMDftnreENsu4qZZBKQ5oToDE
% xxxx /s6zmx7S1/Ll/w/j8ADwZ0MkBJuGir6krd0WF61lwWeVNT4pdyoXZXGzdbZb6MImqPuR2HUXuO5Z
% xxxx j9MY6pu5qdO8oxJO23OrKknjlldaIZWWrB7uDR1nahTQudpdnmGgM3kUVF20nan/D0oLKCTgrBFO
% xxxx 6YMtoVJPUU9oKZr0GcPsFpswvAF/+drXZBYjwES04Cnlgc5Qz+DRRlsXhcInMkU5jZwBUdOuROp3
% xxxx 8NCTseNICbUI1tW9w9CXufPQVTcCxkbDHzznn2tOXUUxNs98bNH9+AnUAqyX1um6ilbBpA3USVu3
% xxxx
% xxxx
% xxxx ---- S3.1.3.o Election Parameters and the Election Manifest - The data in the election manifest

The data in the election manifest is written to a file \texttt{manifest} in a canonical representation that may be implementation specific.

% xreqj {
  "section": "S3.1.3.o",
  "text": "A canonical byte representation is defined for the Election Manifest.",
  "sc": "utsp",
  "utsp": "eg::election_manifest::t::t1" }
% xreqj {
  "section": "S3.1.3.o",
  "text": "EGRI allows to write the Election Manifest canonical representation to a file.",
  "sc": "ics" }

% xxxx gKZvofj/Vi7ATDKgDudat3UuKp8kyhvPJLIbDn02WYdKhhsuO3NlTGWV2s5HNHnpKjVBSOt3HyWm
% xxxx l+zIdVvW06MSprznGQ/RXd9F2FATEMzem59aQ73RcZuGyCtu8zjQc1CiWBYLSdOB9MMIi2x8QTRS
% xxxx omi72gkPX1ax7JYqbevqvKcFNn4lw6GYIn0AOvwZKLPO5jKdY/B245eTntDjRN90/UjO/3IGOAr0
% xxxx xTrgwhxkiUioFtAxsdX+Q39bqRr7tHEK0OMN3qkcVxevAXzOzLLC9V5dOd2CRN0NO4su0e8HBX7z
% xxxx DKjHEJR//MKC6GemdJEZKJAwfLyXslD0QUJXxei1gKhJ5V/0bhNyXFliWENOy8unCRx9agg5BZmx
% xxxx Wzb9iVuojbMZe47s8r8cIfFHEnUKH7sqXCD8a7yymaN0wU+HCOSTSz6YjTO+89UGsIlcfxxHva+y
% xxxx 477S0xO7uw5Tk06MLl4zjLFJKQqKhS4fsXR8R9ab+C/K+jns+HI/q5c4rypZMGCtwVzahqz+v5wo
% xxxx ie10O9qWDSWxqd3lovbCGoYud2X6ppu88ZfK4IX/1JBpwq0KPn296ksQ1/IcVQ1dxt1r5pDyfaQA
% xxxx 2IEgD87Hcp+bjXqOeXyT1185BqcsHSABAeh0YSkcDP9OaCRtUNFbDonz2P6/16SYTiTXgnRdoQt1
% xxxx rjslhcRpLkjgVgNGyrFBCIUSKDeWF2efmBfIiGLMTdjYjIJxtd5l36MxCR+Um72tYGkz/geMQhOt
% xxxx
% xxxx
% xxxx ---- S3.1.4.a Election Base Hash

\subsubsection{Election Base Hash}\label{sec:basehash}
The election manifest file \texttt{manifest} is hashed\footnote{The file that constitutes the election manifest is input to $H$ as an entire file. Again the $\mathtt{0x01}$ byte at the beginning of the second argument is a domain separation byte (in hex). In what follows, all uses of the function $H$ include such domain separation bytes.} using the \EG hash function with the parameter hash $\HH_P$ to produce the \emph{election base hash} $\HH_B$ as

% xxxx ---- eq. 5

\begin{equation}\label{eq:basehash}
  \HH_B = H(\HH_P; \mathtt{0x01}, \mathtt{manifest}).
\end{equation}
Incorporating the byte array $\HH_B$ into subsequent hash computations binds those hashes to the election parameters, the number of guardians, the threshold quorum value, and to a specific election by including the manifest.

% xreqj {
  "section": "S3.1.4.a",
  "text": "EGRI computes H_B from H_P and the Election Manifest canonical representation as specified in EG DS v2.1.0 eq. 5.",
  "sc": "utsp",
  "utsp": "eg::hashes::t::t1" }

% xxxx ytpqytzp0yCLDexlOb9mXrYfkH3GNM+ZJzpFOGpUnb4sJNA2g5I1U1sGsXKOmbII2RClUUZ3KlH4
% xxxx zhbfcRHKdY45deI5ZksAojeyqVjS+2paaZARtoKZ291fDKXtgqA1RQZhYQKLJkp5+KjHg5mWvHr0
% xxxx jPa+sQ0MUfWqqWCuKqNS2Kcll4wASyRDu1qr4ciPh7+3eYF520NmqnY38nCzyUhEb1zSFrAuHli2
% xxxx j4rbEAOBK7US28oyTRILju1TwKoGOrDbYpesySX3G6XMlOL6522/23+3FL+uR45gyVdmP2ky0GSP
% xxxx bW4CEQUKagS13uSR1bocvAM0+wP+epUES2yb+GAP2phBKDpatciwbzcrNRk5H9JkdJ5SohRyM4li
% xxxx q9RTsIqnQjs6eb7x3k1yXvUTmHmrQFHCiF1qo0b4onjoH0PCSknzyOKunF3yfJmsGyEzBfAhzt09
% xxxx KfVefhpD2IZBBhWVyEu1H3WMfmeEtu6sGViDPs7MYcS/4pN3xwH1g8Raq21KTno4S/ElQWAyBLhI
% xxxx xc7+Y8j9E5wXSHLg7VXPxykO1DSHmC4H4mNiNcF5IxCWqgJwHcN7Eo7AE/bWCPO7SS4jAEAqgo6O
% xxxx nht2UTWMA1S32helQwHc90HvZ4RuRS7oiKvtTn598LNdYeiLIzu+y2n/+OfrXOV+lGEFib6HPbKk
% xxxx PiCAMLOJrtUb//SgpF4UkcZtSsFqY6InegOTQZZYrCk7JS3Xfo6AWIGw3IWhqIrZUy4v0lsnmcye
% xxxx OeedwKjVKRJhSKMjX+8GMThWsc1u32PmPeWWO1u2NVKA82WZSDeCqp7q/rkiL2oBfh3hwvYo3r1Y
% xxxx
% xxxx
% xxxx ---- S3.1.4.b.verif1 Election Base Hash - Verification 1 (Parameter validation)

\EGverif{\veriftitleParameterValidation}{\label{verif:parameters}
\veriftextParameterValidation}

% xreqj {
  "section": "S3.1.4.b.verif1",
  "text": "TODO: Verification 1",
  "sc": "" }

% xxxx mzi4NjmgXBhlYD3FAIS9XAmbK5TspxlF3MFn7gWh3AV1Lcj3fF4dge3mCWL7yj5th6nv3uMm+U+a
% xxxx NIJm8vNPOykRx096vDrq1aekD6winOcD/BNyLL4AlIfsF5Th3oSdpMOyWYSNYPw6wRMQZFf3yB25
% xxxx 2RcKgezEBb8oQzE0Esp2/lM7+/OaBB6/RoeKzazZzJ4rLNx0hXQbL19m1ML+xPRWNyjeJCNVg+hQ
% xxxx GNI+zAS8dsRJPguQDXSBd98QC8Hl4eHRvKQHWWZGvWrVdV0ozBwf8lqIN4+ex4ckPFleUprGexfr
% xxxx P6e2fNOCHiU0x8ZotJBcFZWi/IMG7AHWP52CEveHMD2wSE9H4bD6ns/5X6pmo8wxHEWzHsoU0j92
% xxxx gxnOARdlDrhvtJTjgoDBhNYyFuwn/WM5FWIYVpr9ON/dvMnErvxgfzZPDLre/ytV4FoYNhiiOSwa
% xxxx F/fynbP40ztsCF6oA+czS8DT2DSWKv+Xv/Z7AQqYM80vszvKO4FzMYDlEE24O06/2aYXO8BWUVCs
% xxxx 1O47sI30W8JF7kaQoRz30Tm2WBIbRCGxI01MISWCJmOKb7RyTTF2Au4vz9hfwSC6uFOEAtlMbdei
% xxxx 7U1ljAkbZvtEvZd58tJd52X3DzpyMvgHnExIgYsQPEdql3/JvSTYF9qvom3zdEyNG2LUkFpq/Pkm
% xxxx EGD53FLUdmLZzY2f4P5VKreobzXTDU+SWMFuQ6MdZm5RarZchoSmOxBGiuLCnp6AlxbvjpH6IvDB
% xxxx
% xxxx
% xxxx ---- S3.2.a Key Generation

\subsection{Key Generation}\label{sec:keygen}
Before an election, the number of guardians $n$ is fixed together with a quorum value $k$ that describes the number of guardians necessary to decrypt tallies and produce election verification data. The values $n$ and $k$ are integers subject to the constraint that $1\leq k \leq n$.  Canvassing board members can often serve the role of election guardians, and typical values for $n$ and $k$ could be 5 and 3---indicating that 3 of 5 guardians must cooperate to produce the artifacts that enable election verification. The reason for not setting the quorum value $k$ too low is that it will also be possible for $k$ guardians to jointly decrypt individual ballots.

% xreqj {
  "section": "S3.2.a",
  "text": "EGRI allows to specify the number of Guardians `n` prior to a Key Ceremony.",
  "sc": "uts",
  "uts": "eg::guardian_share::test::test_key_sharing" }
% xreqj {
  "section": "S3.2.a",
  "text": "EGRI allows to specify the quorum value `k` prior to a Key Ceremony.",
  "sc": "uts",
  "uts": "eg::guardian_share::test::test_key_sharing" }
% xreqj {
  "section": "S3.2.a",
  "text": "EGRI rejects values of `n` less than `1`.",
  "sc": "utsp",
  "utsp": "util::index::t::test_range,util::index::t::misc" }
% xreqj {
  "section": "S3.2.a",
  "text": "EGRI rejects values of `n` greater than `2^31 - 1`.",
  "sc": "utsp",
  "utsp": "util::index::t::test_range,util::index::t::misc" }
% xreqj {
  "section": "S3.2.a",
  "text": "EGRI rejects values of `k` less than `1`.",
  "sc": "utsp",
  "utsp": "util::index::t::test_range,util::index::t::misc" }
% xreqj {
  "section": "S3.2.a",
  "text": "EGRI rejects values of `k` greater than `n`.",
  "sc": "ics" }

% xxxx 2yFJ63DFu1bz3o6KLsKmboP0dV2g/+OHZi0Be4F5lsJ15Ooy8PLOkfn7xoQAdqgf/laUVq36XWjs
% xxxx 37lZVu0KAKZKg+n4Nzhvm4PQ6OUdye0cAM4XeNsTb0+8z2PnIxlJ1hT0BuR3IDBIlp3EOp4i+VUT
% xxxx aMXNml3viM5RsVOBA4dnUcPBm0q4X/wKyWmtX8dGKNu2MOyqrTs4i9xkPKbb2WVqggNWkIGcuF1F
% xxxx j21GZqD6c1wMedATQLLW6ikpl7p3MUYXvc7XpSv4rNoEokSXofCpsmFHSWrhIdslTm/7rUpI9T7Y
% xxxx 1Ufr0XhKr407YbJwSQALR4nNNyQIL+7wXmPORj/fcev4YKrjKF/UT2sIdQHwaVMtEWDLrlPhWFHu
% xxxx kr5q/fr/qbZ2bumbjNMZUfdLN0nvcdceOr+3UVAg9f6c5wlTrgE+k8vXVXBYyCwaWCgtZTIjFZyB
% xxxx IUlNuM79mngruq5L7GXbPOfliCS/jraZhsxKIIdNwd7D4EGvKeLF95dZxHCr/XUQT/svXYVhCOCL
% xxxx 4nVplBhbjbPz1hjCeJjv+Dy4JkM8miOOyT0lOPwrlm8NDLQYHhrUH4VWO15fk+h/zHyeLaThpsy1
% xxxx OUXEm6phQ6uCeclY5BvLCR4OV1fLx/+ZAi11EAkv7d5wNzS3j/YfAmUw/skEpM1vvL9R5fUZfyuS
% xxxx 6dAqC7KtLkrDjtKp/zu24KtyP0IxjEjz8lvGu3O6xEAGvh4MREaLOY4bYN2ECUOnYAgJo4h+2bv+
% xxxx IwyrIwwjUf5iabvLq0EhGskMVeOqJTQN7+2JkEOIbfOBGAJ1zRs+EsaB707nhmc1qeJPI2Y5S4AF
% xxxx
% xxxx
% xxxx ---- S3.2.b.n3_2 Key Generation - Note 3.2

\EGnote{Decryption of individual ballots does not directly compromise voter privacy since links between encrypted ballots and the voters who cast them are not retained by the system.  However, voters receive confirmation codes that can be associated with individual encrypted ballots, so any group that has the ability to decrypt individual ballots can also coerce voters by demanding to see their confirmation codes. Voters who decide to disclose or publish their confirmation codes in a non-anonymous way may also have their privacy impacted by unauthorized decryptions.
}

% xnote S3.2.b.n3_2 This section generates no unique or specific requirements

% xxxx rUj//crK9DWV6JPZqYXVNciQY4TNgOiTj3WPus+lzd6P1H/i/2b/6kFFnOkM90xI93TIQdGueQ2S
% xxxx 4uyHxwN3yi1z5GsGua7H39eYMu8b1+36B9aA6n/rPETdASvvH/IK2WKNnHtOTqgA8d1/9FOn0pSL
% xxxx PlSyBc2exeqM0PmTwXMl1tzB2XxJ9oGRqrragn3ydEY/N9V/W3dvewjBljqbKDPvm73RCxfV7+vK
% xxxx q8pPDhhbM2/OPeBzYskKPObOtGOvdVEWO/5p+oH7RNau5If/nynuWlnb9fcnBfJxZvIOsSxFzn/e
% xxxx hPyGVqTIj0DxNib5lYb4njmEmuxKO94ALx2+iHjY69uK8O1qkSZafiiGF+Krm80oZbQUXYZIXfI7
% xxxx SpFUK/JCp79ujRW+Xil/u1V7+sHISfijuPkH4VY0Uz6BFYD+2ajJb5NEen638LPnL3nug3mIBz7j
% xxxx ig0K351bXkpTxPyYDryVoIqrNrPoTowfRIhuQalABhgHjQRxw9jRNfxWU2iY8RCQP7D98RqwZToT
% xxxx hKT/D7ZLWe0osyvsFqT3gMlsewN1/xSImzB11lKMom8P8LQpK//Gc8/Cmf56SbGcQSzitRez6m9i
% xxxx d+jlNlYgSAh1l3l3NvJIoWuMElWCy0qcQ+vYC5Yb6wEdhE61GsH4biRDG3cUOnavzy6i9D0Ue1a7
% xxxx 1HcCsECLZddOK7OgI2OXBwszgbjJHelciHeLRD/p7bg+922p6yu7TwOf+4jzDesOmMZ7dqrxdO9J
% xxxx
% xxxx
% xxxx ---- S3.2.c Key Generation - (after Note 3.2)

Threshold encryption is used for encryption of ballots. This form of encryption makes it very easy to combine individual guardian public keys into a single public key for encrypting votes and ballots. The encryption used herein also offers a homomorphic property that allows individual encrypted votes to be combined to form encrypted tallies.

The guardians of an election will each generate a public-secret key pair. The public keys will then be combined (as described in the following section) into a single vote encryption public key which is used to encrypt all selections made by voters in the election.

At the conclusion of the election, each guardian will compute a verifiable partial decryption of each tally. These partial decryptions will then be combined to form full verifiable decryptions of the election tallies.

To accommodate the possibility that one or more of the guardians will not be available at the conclusion of the election to form their partial decryptions, the guardians will cryptographically share\footnote{Shamir A. (1979) \emph{How to Share a Secret}. Communications of the ACM, vol 22.} their secret keys amongst each other during key generation in a manner to be detailed in the next section. Each guardian will then compute a share of the secret decryption key, which it uses to form the partial decryptions.
A pre-determined quorum value $k$ out of the $n$ guardians will be necessary to produce a full decryption. It is worth noting that fewer than $k$ partial decryptions reveal nothing about the tally.

If the same set of $n$ guardians supports multiple elections using the same threshold value $k$, the generated keys and key shares may be reused across a small number of elections, although it is preferred to generate new keys for each election.

% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.b) Guardians can generate individual public-secret key pairs",
  "sc": "utep",
  "utep": "eg::guardian_public_key::test::test_key_generation" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.b) Guardians can exchange shares of secret keys",
  "sc": "ute",
  "ute": "eg::guardian_share::test::test_key_sharing" }
% xtodo S3.2.c (Ref: S3.a.a.b) "EGRI enables the same set of Guardians to re-use their keys from previous elections (TODO: Don't n, k, p, q, g, etc have to remain the same?)"
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S3.a.a.b) \"EGRI requires that a complete new set of keys must be generated if even a single guardian is replaced\"",
  "sc": "na" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects any election data unless 1 <= k <= n < 2^31",
  "sc": "ics" }
% xreqj {
  "section": "S3.2.c",
  "text": "Each Guardian is associated with a human readable identifier referred to as the 'Guardian Name'.",
  "sc": "utep",
  "utep": "eg::guardian::t::t1,eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI accepts Guardian labels composed of printable characters and (internal, non-contiguous) 0x20 space characters.",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t1" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels that contain line break characters.",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels that have leading or trailing whitespace.",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels that contain contiguous sequences of whitespace other than a single 0x20 space.",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels that contain special characters (Unicode Category Cc, Cf, Zs, Zl, Zp, or Cs).",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels having no printable characters",
  "sc": "utsp",
  "utsp": "eg::guardian::t::t2" }
% xreqj {
  "section": "S3.2.c",
  "text": "EGRI rejects Guardian labels that decode to a Unicode malformed surrogate pair (Unicode Category Cs). See [JSON RFC Errata 7603](https://www.rfc-editor.org/errata/eid7603)",
  "sc": "ics",
  "status_note": "difficult to test because the Rust std lib rejects malformed UTF-8"
}
% xreqj {
  "section": "S3.2.c",
  "text": "Ballots are encrypted using threshold encryption",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.b) \"At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Vote Encryption Public keys to form the Joint Vote Encryption Public Key.\"",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.b) \"At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Ballot Data Encryption Public keys to form the Joint Ballot Data Encryption Public Key.\"",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.b) Every guardian can Shamir-share their secret keys during key generation",
  "sc": "uts",
  "uts": "eg::guardian_share::test::test_key_sharing" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S2.c.c) Voter Selections can be encrypted to the Joint (Vote|Ballot Data) Encryption Public Keys.",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a Guardian to compute a verifiable partial decryption of the tally of every Contest Option Field and additional Contest Data Field.\"",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a quorum of `k` distinct Guardian (Vote|Ballot Data) Encryption Secret Keys to form full verifiable decryptions of the election tallies by combining the verifiable partial decryptions of the tallies of every Contest Option Field and additional Contest Data Field.\"",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.c",
  "text": "(Ref: S3.a.f.d) \"Fewer than `k` distinct Guardian (Vote|Ballot Data) Encryption Secret Keys can not produce a full decryption of any tally\"",
  "sc": "na" }

% xxxx wJb9nQ31X6mjDiDNu8XL8eKws+z9tgxsi+tbULPi2/yXyJAl09Iokvhz3caWNqea/e8Qa9z4unxN
% xxxx y7ehXzojjluCbyYOBg9zkNVMWU2hqoImfiECEu+Qz9RqcPM7fofdwndZT3DsAuGYYcVkekAG8T+N
% xxxx rM6z6QnvdomdbYSELUmeVmkPOm24DJdtF5fUqD9qxRDxDq0G3NRpWGdgmhout1ZNMyuzxai76mGV
% xxxx OwHnrRTfdXn+AZyp8LqXCYJriPk4LHV82U2PzH7nCjjWKdonte3dNkNrFFuFWRwcA1Vb7yWMH9ru
% xxxx nR+6KLsAG55ZAMrKupLa3ZBEjE6lW0iFkAFoV3eMesA4Qgu5+VBKWR0GmMblU8wV3d5jfthf13W8
% xxxx cXO5fezezXY3SXnjEBxyxCnUZkCBpogYZboWJM3RTkveS22XldxF/ZTn5DPwlAv2zV6OtSO6+rCa
% xxxx c8QNK3FTpyqa3mzZCYyMivBeqrkz4SE6Lapq8EuurHDUprngPUrjyvZcnHBzMErxR5woE4cLLdiZ
% xxxx r50vSl7egrAy4hVU8iKTRpb9308RcgVCeBSV1NxnIhbGWUmxBB+Mr8QHMWV9s0/5SE1yj0/UGt33
% xxxx jK30iptl2okcqt1dSBXJxNti3RTnDnYxKRwlXgZ5rCiutZTJuIfphHX8MQtvQecAjiATNpe3vTIo
% xxxx yVHnE6yK/9wpwhFWvbjSF4vnhlAWaGJs4Unp8xX8EptX6V/l8s8DIlhVhtlbNXxlGJ/o2TNBMHH2
% xxxx
% xxxx
% xxxx ---- S3.2.1 Overview of Key Generation

\subsubsection{Overview of Key Generation}
The $n$ guardians of an election are denoted by $G_1,G_2,\dots,G_n$.  Each guardian $G_i$ generates an independent public-secret key pair by generating a random integer secret $s_i\in\Z_q$ and forming the public key $K_i = g^{s_i} \bmod p$. Each of these public keys will be published in the election record together with a non-interactive zero-knowledge Schnorr proof of knowledge of the associated secret key.

The joint vote encryption public key will be
\begin{equation*}
  K = \left(\prod_{i=1}^n K_i\right) \bmod p.
\end{equation*}
To enable robustness and allow for the possibility of missing guardians at the conclusion of an election, the \EG key generation includes a sharing of secret keys between guardians to enable decryption by any $k$ guardians.  This sharing is verifiable, so that receiving guardians can confirm that the shares they receive are correct; and the process allows for decryption without explicitly reconstructing secret keys of missing guardians.

Each guardian $G_i$ generates $k-1$ random polynomial coefficients $a_{i,j}$ such that $0<j<k$ and $a_{i,j} \in \Z_q$ and forms the polynomial
\begin{equation*}
  P_i(x) = \sum_{j=0}^{k-1} a_{i,j} x^j
\end{equation*}
by setting $a_{i,0}$ equal to its secret value $s_i$.  Guardian $G_i$ then publishes commitments $K_{i,j} = g^{a_{i,j}} \bmod p$ to each of its polynomial coefficients. As with the primary secret keys, each guardian should provide a Schnorr proof of knowledge of the secret coefficient value $a_{i,j}$ associated with each published commitment $K_{i,j}$. Since polynomial coefficients will be generated and managed in precisely the same fashion as secret keys, they will be treated together in a single step below.

Adding up all guardian polynomials $P_i(x)$ modulo $q$ results in a polynomial that is a secret-sharing polynomial for the election secret key. This polynomial is denoted by $P(x)$ and computed as

% xxxx ---- eq. 6

\begin{equation}
  P(x) = \left(\sum_{i=1}^n P_i(x)\right) \bmod q = \sum_{j=0}^{k-1}\big((a_{1,j} + a_{2,j} + \dots + a_{n,j})\bmod q\big)\ x^j.
\end{equation}
The share of guardian $G_i$'s secret key that is sent to guardian $G_\ell$ is $P_i(\ell) \bmod q$. Guardian $G_i$'s share of the election secret key is the polynomial $P(x)$ evaluated at $i$, i.e., the sum $z_i = P(i) = (P_1(i) + \dots + P_n(i)) \bmod q$ of all shares $P_j(i)$ that $G_i$ receives from the other guardians $G_j$, $1\leq j \leq n$, including its own $P_i(i)$.

At the
  end of the key generation process, each guardian must verify that
  the information that is being added to the election records is
  consistent with its own view of the key generation protocol
  execution. This verification step plays no role in the verifiability
  of the election but offers privacy protection against key
  substitution attacks by a malicious election administrator or
  network operator.
At the conclusion of the election, individual encrypted ballots will
be homomorphically combined into a single encrypted aggregate ballot---consisting of an encryption of the tally for each option offered to
voters. Each guardian will use its share of the secret decryption key
to generate a partial decryption of each encrypted tally value, and
these partial decryptions will be combined into full decryptions.
Any set of $k$ partial decryptions suffices to compute a full decryption.

Decryption steps must only
  happen after verification that the ciphertexts that are decrypted
  are valid and independent of each other.

The above key generation process is run a second time to generate a second public key
\[\hat{K} = \left(\prod_{i=1}^n \hat{K}_i\right) \bmod p\]
as the product of a second set of guardian public keys $\hat{K}_i$. This second key generation can be done sequentially, or, concurrently with the first by duplicating each operation. The key $\hat{K}$ is used to encrypt additional data when homomorphic ciphertexts are not required, and is used in an encryption mode that supports efficient decryption of any data.

Because a guardian only uses its secret shares $z_i$ and $\hat{z}_i$ of the joint secret keys for decryption, the actual guardian secret keys $s_i$ and $\hat{s_i}$ are not needed any more and may be discarded once all shares have been successfully generated.

% xreqj {
  "section": "S3.2.1",
  "text": "(Ref: S2.b) Guardians can exchange shares of secret keys",
  "sc": "uts",
  "uts": "eg::guardian_share::test::test_key_sharing" }
% xreqj {
  "section": "S3.2.1",
  "text": "Receiving Guardians can confirm that the key shares they receive are correct",
  "sc": "uts",
  "uts": "eg::guardian_share::test::test_key_sharing" }
% xreqj {
  "section": "S3.2.1",
  "text": "Every Guardian can generate an independent public-secret key pair by generating a random integer secret s_i in Z_q",
  "sc": "utsp",
  "utsp": "eg::guardian_public_key::test::test_key_generation" }
% xreqj {
  "section": "S3.2.1",
  "text": "Every Guardian can form their Guardian public key as K_i = g^{s_i} mod p",
  "sc": "utsp",
  "utsp": "eg::guardian_public_key::test::test_key_generation" }
% xreqj {
  "section": "S3.2.1",
  "text": "The Election Record contains every Guardian's public key",
  "sc": "nyi" }
% xreqj {
  "section": "S3.2.1",
  "text": "The Election Record contains, for every Guardian public key, a non-interactive zero-knowledge Schnorr proof of knowledge of the associated secret key",
  "sc": "ics" }
% xreqj {
  "section": "S3.2.1",
  "text": "The Joint Vote Encryption Public Key `K` is computed as \\prod_{i=1}^n K_i mod p",
  "sc": "utsp",
  "utsp": "eg::joint_public_key::t::jvepk_k_scaling" }
% xreqj {
  "section": "S3.2.1",
  "text": "Every guardian G_i can generate k - 1 random polynomial coefficients a_{i,j} such that 0 < j < k and 0 <= a_{i,j} < q",
  "sc": "utsp",
  "utsp": "eg::guardian_public_key::test::test_key_generation" }
% xreqj {
  "section": "S3.2.1",
  "text": "Every guardian G_i can generate and publish commitments K_{i,j} = g^{a_{i,j}} mod p to each of its polynomial coefficients",
  "sc": "utsp",
  "utsp": "eg::guardian_public_key::test::test_key_generation" }
% xreqj {
  "section": "S3.2.1",
  "text": "Guardian polynomial coefficients are generated and managed in precisely the same fashion as secret keys",
  "sc": "na" }
% xreqj {
  "section": "S3.2.1",
  "text": "Individual Ballots can be homomorphically combined into a single Aggregate Ballot",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.1",
  "text": "The single Aggregate Ballot consists of an encryption of the tally for each contest (e.g. selection option) field",
  "sc": "ute",
  "ute": "eg::tally_ballots::t::test_tally_ballots" }
% xreqj {
  "section": "S3.2.1",
  "text": "Any set of k guardians' private keys is sufficient to complete decryption of the tally for each contest (e.g. selection option) field",
  "sc": "ics" }
% xreqj {
  "section": "S3.2.1",
  "text": "EGRI enables any set of `k` distinct Guardian Vote Encryption Secret Keys to complete the decryption of the tally for each Contest Option and additional Contest Data Fields. (Ref: S3.a.f.c)",
  "sc": "ute",
  "ute": "" }
% xreqj {
  "section": "S3.2.1",
  "text": "No set of fewer than `k` distinct Guardian Vote Encryption Secret Keys is sufficient to complete the the decryption of the tally for any Contest Option or additional Contest Data Field.",
  "sc": "na" }


% xxxx JCevBYd2RrjUpip4KgkWKHDQ7UVHSK5Mbty5d7WTbGE0CL1VEn8TR7fh50nd92KJrQoVJWDkanjF
% xxxx yJizFJDKnW0W0fhYuDeCj05LOQNk1OsyXLSLUSXKT6NzGFgnN8ngmCdq3VgqY9lgjde/kMmOJB43
% xxxx ksgI6mE/fHXZaQclEi4Zc1JNkkIskQKa1BTFgGzW6calxTT2ItH6nPQmQhdWZ/OE8HG4L8LZbY4g
% xxxx uXyGM3fsPlHfmLbRJOCfbdDp6ZrlfserOK5vc+0nFcJc0oyHmKLlCPFFi076mp2xK5aRse+uKQj2
% xxxx fs4yu4eea6686Sn0eq/TfzyCfdlYboVH4Raqz5LFevY7GUA7+e7h/4C+B9nAVf9ENiBB2OnHG2u7
% xxxx YHpXl3GL5UzEE8W0wg+RgE9XoPabAzfG6vQnndVxz8b2q1YQa5syvNAcD3Xbnp70wx8eLEsI+ejh
% xxxx vZ6ObF7K99xQ52zWdhAn5ZB+sYOIPKkaqAQ9rIGQKes86AxLrFolmZwEqGJ6IA1X//zTzpY/k5x+
% xxxx R4GncEKN166l/CPrdNj22inFFJAddCNPxGsY5A5Y+tYEDlAyc5SF4LEkczc5zZbTYtvIuZCiEJHt
% xxxx xxbr99Xwh4bot6YWfZBpyq5fsgL9Z4bj/unqACSHvtq6ZbhuYiLEIIBj8r+4bn1qMmqGmRbB6aAy
% xxxx wmFZsDlct35LrfYZcsM7Wa8BG7fuy/UQhIQbY795hx9OAqROn63pHgFLK6oitr3aQGxV8kGliziW
% xxxx
% xxxx
% xxxx ---- S3.2.2 Details of Key Generation

\subsubsection{Details of Key Generation}\label{sec:keygendetails}

% xxxx f3EavbJ3OcuUnL4d1fV2Vg/hb+e2T1an41m8ETW3t7a3eJRZK0CQ1VY0pvoZ7aU/i7ctPkwN8s3w
% xxxx dnvE39ZX/8S8rugKJfc4+OoFJGqblCWuIswRJsZkSwrF7uKdfxWVHU1aFnylrKCDJqKDkwaTaoV0
% xxxx Y26KLJvEji9QcKz72sVlgibBzp7oM+Afde0u3TDJqT5jLA1KTf53ZG/n0wTqV3AHZcwduyf5WuQm
% xxxx 2Kwr7BLvp+v1Mc9bDNtPGEA5sc30EQHCP4/8WPMwsN1f4+G/GFyUq5lJJcI2+P2X7E+WZYOthxQx
% xxxx 7saIIwrLyeME+KFUBGkG8dMuOoDoGrdu5yZqyVYu4h/wrGdUnmjly0Ie66m1XpgSr6Tn+jvlLpq/
% xxxx VvZZvopIdGh0xvBRETi0L1w7kTrThZxooQEYEqObSTxyPyN25GW2tHXmTEm5uYKWSex1FbJqz1z0
% xxxx V9IfQwAkL+rvZjbXoASx88QJP3WggoGs85mC0RoyCirLpDOBHFIFqpX+QNahgXuFk7sQdh1o3Kwp
% xxxx FB118TZDlVCr2IQG0ihSeG9vfNa6JlBrbW1bSH/Wqwz8NWIU+Kfnjv3daofiKKCKSafkRXc8aBMf
% xxxx 314RKdE0z5tqfV8AaJj7Bsgu7ctUzmyrTkTIrOiEr/yufc2kRqWIv//yu0f9mzYlkOeP+JlVrQjM
% xxxx MECDJS+i5VSydyUTDLjBKkuNUK38S6uOrSPK0kFWSilbD1TCuaIOAVCqftUZLzCKUsyqlNAk460y
% xxxx
% xxxx
% xxxx ---- S3.2.2.a Details of Key Generation - Guardian coefficients and key pair for vote encryption

\paragraph{Guardian coefficients and key pair for vote encryption.}
Guardians first need to generate a vote encryption public key and corresponding secret key shares.
Each guardian $G_i$ in an election with a decryption threshold of $k$ generates $k$ secret polynomial coefficients $a_{i,j}$, for $0 \leq j < k$, by sampling them uniformly, at random in $\Z_q$ and forms the polynomial

% xxxx ---- eq. 7 pg. 22

\begin{equation}
  P_i(x) = \sum_{j=0}^{k-1} a_{i,j} x^j.
\end{equation}
Guardian $G_i$ then publishes commitments

% xxxx ---- eq. 8 pg. 22

\begin{equation}
  K_{i,j} = g^{a_{i,j}} \bmod p
\end{equation}
for each of its polynomial coefficients $a_{i,j}$, for $0 \le j <k$. The constant term $a_{i,0}$ of this polynomial will serve as the secret key for guardian $G_i$, and for convenience we denote $s_i = a_{i,0}$, and its commitment $K_{i,0}$ will serve as the public key for guardian $G_i$ and will also be denoted as $K_i = K_{i,0}$.\footnote{Note that the detailed description here generates the secret guardian key $s_i$ as one of the polynomial coefficients and does not treat it separately as indicated in the overview description.}

% xtodo S3.2.2.a eq8 pg22 refers to "the secret key for guardian $G_i$" "the public key for guardian $G_i$" Are these keys ever really used as such in v2.1.0 ?

% xreqj {
  "section": "S3.2.2.a",
  "text": "(Ref: S2.b) Key Ceremony",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.a",
  "text": "(Ref: S2.b) \"EGRI enables a Guardian to generate its own Vote Encryption (Public|Secret) Key pair prior to the start of voting or RLA.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.a",
  "text": "EGRI enables a Guardian `i` to generate and store `k` secret polynomial coefficients (indexed as `0 <= j < k`) by sampling a CSRNG uniformly as `0 < a_{i,j} < q` for their Guardian Vote Encryption Key pair.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.a",
  "text": "EGRI enables a Guardian `i` to generate, store, and publish a Schnorr proof of knowledge for each of its k secret polynomial coefficients (indexed as `0 <= j < k`) for their Guardian Vote Encryption Key pair.",
  "sc": "" }

% xxxx uETiWAk1R7h6RdHNsM186De2zR9TSt3RwUS4vWKcupXCED00+6lHFyj0oQsAwLFIRJZ0DzOonWWA
% xxxx rt5VRNJyjWTO/+9FRG51liKbA2s3SlhskRJhpZpi0KHG1nhCDYceptYBZRK+dqBI0OvuNWkxf/LO
% xxxx u87jN6a+/8/rJPm2KKUJ8IvuUxbzNSXnXapZMFgqoz8yVfSuv/9tUF9hmZU+agSUUFufjd0kbH/j
% xxxx QFAthNbLngrJz3a6EvsencSIvEqoiimhCxnjqc7EJk1rHTu4qNNpO38vNO1TE3ioX8qIbEkD6FXq
% xxxx i5ZClA7bmmzO3EA0Gsjopm7XQIMRn9wbzC5Zr0xHaTbeLKjTZz7ByjPP3irubYs9f/sLXb2C6sp2
% xxxx AMNHy5DBUMaAEQ1y9rToEIszNHfmkRgTmxiYLhaLc0LwuiA0ibImG3xEJV6yco9GJHF3xQLzKdZ5
% xxxx yPtVmEN4FInnCQJGCy81/cB7kEtFYWX+cgBFH13fxbarYEK4LToSx34ThSunf1DtYaAfk1TsY1LL
% xxxx Tvu2xWFIQ/HpnLCPEmToPLFSt0Uh56iYn57NmxQTw/7yNG6nA+Pubem0Ux6HZWoD5x5iEl2grGLD
% xxxx yOZyAR/5cvW/Cxcllv/ckswLOEJuRxnbZop9IkvMuVruCNZtWllAwnl28qVTF7pTybYHXrzk9Pdo
% xxxx E5NO/XfqgCPMZ0Tgd9e60J+hwZB8PJ8v0gAqqkBaP7TZ5hZcciqz7mHvCRdxZk1bUkSJFUsEfrjV
% xxxx
% xxxx
% xxxx ---- S3.2.2.b Details of Key Generation - Guardian coefficients and key pair for encrypting other ballot data

\paragraph{Guardian coefficients and key pair for encrypting other ballot data.}
To generate keys that are used to encrypt other ballot data, the above process is run a second time, either in parallel or sequentially. Each guardian generates $k$ coefficients $\hat{a}_{i,j}$, the corresponding polynomial $\hat{P}_i(x)$, and commitments $\hat{K}_{i,j}$ as above.

% xreqj {
  "section": "S3.2.2.b",
  "text": "(Ref: S2.b) Key Ceremony",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.b",
  "text": "(Ref: S2.b) \"EGRI enables a Guardian to generate its own Ballot Data Encryption (Public|Secret) Key pair prior to the start of voting or RLA.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.b",
  "text": "EGRI enables a Guardian `i` to generate and store `k` secret polynomial coefficients (indexed as `0 <= j < k`) by sampling a CSRNG uniformly as `0 < a_{i,j} < q` for their Guardian Ballot Data Encryption Key pair.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.b",
  "text": "EGRI enables a Guardian `i` to generate, store, and publish a Schnorr proof of knowledge for each of its k secret polynomial coefficients (indexed as `0 <= j < k`) for their Guardian Vote Encryption Key pair.",
  "sc": "" }

% xxxx /FG2jFRS7QTcgq6X0Xm+Tx6tzXBnyy5suPRyl4wmL1ots8ILHexz9MFkz+b3oaFjYFNoFZsUdCBN
% xxxx FtYxO2Nhi+wd1uzjY6lraAVMU5sfDcDIizNwXvSbINh9Ej3V3bEF3nyvtU8DFX/e3rHmmODlOl5b
% xxxx 7WkiWsSiya/MZHhB0pThaoIu28aUvCIOhKmNV4Tc7HdWZxcbepmqOJAzGsB3X9px1jCNRhK7Tu/u
% xxxx SMEIL2naiht6B7Quq/9rMbv4YI/dFLldQl7E9YKXJyGK6E1dL3pQnZH1H+vtuRo/2p3PvvtfHELx
% xxxx uRSV80M/qBp+NdbzfnAZlrpAiLVnZtf5j7yQ5CN0mUbwZZWuMT1mTfVUk8pz0LWgFXX+rGq+TJLz
% xxxx 3xIPN1MF3z1nafUTYY9aHQhcQloIJwhiLj9IUgkqrev57QJXn0O4eg9KiD1tATYYNp6uLViRcnIk
% xxxx rx9CmrTieFNrCmzEm3/ZRJCmtEIe4oPsX3d4VH5wE31rd/Bbq5pJBKjYS6VrBESzDTMsP3PrCilv
% xxxx ptI45uERya+3SZvgIw1Xd2e5vvbGqx30t5KxP5VCESvb/K5/3ZtDt4P+l22dm7mw0xgg5YX/lBO2
% xxxx oiBXQyDeUondBIy0GcCj4/cvK8G6Dpp6WdUsS23LLmKrQGF3qFOx6NUpufh2IwkRj00RLUktcitT
% xxxx 9TL1Eu873mM8naqkpzrg9MwjHzZD1EAJGJEfXMuxXQcMZsA2EOlUxixy1iUN8Eki19dMbtmIrXfT
% xxxx
% xxxx
% xxxx ---- S3.2.2.c Details of Key Generation - Additional key pair for sharing secret data between guardians

\paragraph{Additional key pair for sharing secret data between guardians.}
To share secret values amongst each other, guardians generate an additional ElGamal key pair that can be used for communication between guardians. Guardian $G_i$ thus generates a uniformly random value $\zeta_i \in \Z_q$ as the secret communication key and computes the public communication key

% xxxx ---- eq. 9

\begin{equation}\label{eq:additionalkey}
\kappa_i = g^{\zeta_i} \bmod p.
\end{equation}

In order to prove possession of the coefficient associated with each public commitment, for each $K_{i,j}$ and each $\hat{K}_{i,j}$ with $0\leq j < k$, and to prove possession of the secret communication key, guardian $G_i$ generates a Schnorr proof of knowledge for each of its coefficients and the secret communication key $\zeta_i$. These proofs are grouped together for the coefficients $a_{i,j}$ and likewise for the coefficients $\hat{a}_{i,j}$ as follows.

% xreqj {
  "section": "S3.2.2.c",
  "text": "(Ref: S2.b) Key Ceremony",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.c",
  "text": "(Ref: S2.b) \"EGRI enables a Guardian to generate its own Guardian Communication (Public|Secret) Key pair prior to the start of voting or RLA.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.c",
  "text": "EGRI enables a Guardian `i` to generate and store a uniformly random value $\\zeta_i \\in \\Z_q$ as its Guardian Communication Secret Key",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.c",
  "text": "EGRI enables a Guardian `i` to derive and store Guardian Communication Public Key as \\kappa_i = g^{\\zeta_i} \\bmod p. eq. 9",
  "sc": "" }

% xxxx S4Whk3DEYpaBC17jxee+p8N6tI/SdCgOrsm8Zq79FFWKk4BGAwEhiktlH/138o6XsW1OJa9hIqig
% xxxx bIibt5Tplp/hTUca1QBjbWCXDE3E+FZlPbeSQdKwz09KMGuqykJsjwZoz0qQzbYdbNCeNbSTEygz
% xxxx w3Kx6jS4h1irflhPBISDR3gJd0XM6Z5KGthaTlbRlZyyhx4rkN/6bkvTOraKF3/a2R+N2oKktojr
% xxxx 5YV7z1qof0+My8AsXwCLNONRnYawZvAJCNCc+Ou1Htwf9cGVo7BmDTM+54smkKdjqVute8vVbD/4
% xxxx dHFhoLzPcYkQzm6LL3E/Ybh7ci4jqsvQhAg40RQSyngvAYrNZh6WFIekEfqHCaz1wS46cCl2UPGK
% xxxx EmbxNEmLaN9SKJa4RXt+mytWNW8k9z42eIGZv+6DOExp/oeQa4sC+pA+FkNwONeJWZ6qMyYbpuuF
% xxxx cYOonfL0p1IPEQHj2aN8uutvMqQe0qqu7uArP/lgPoUvl9h914OnlfA4yVSsY6xAK0eCqLVoVLu7
% xxxx 7qu/NqE+LF/m3IuIUrElZHNJV+gdcyJPKs1fNM9rO7tf92Nwc6ikcE+L+HYQb6aInnE39icBVusT
% xxxx 8K3WPiDbKNn/R5kfWGjSoGO2L6u/UST1beATsyLvivuKOOjrmfYXUDY5Vo9do+1D3PqerQVxGgns
% xxxx 7dbGQ6VYzJVFJT15rN3fkmSiGM3QwonpFRLsRg3lo/ini5tFWRK9i1zKNxnGLyhQliuVF8FhEtEg
% xxxx
% xxxx
% xxxx ---- S3.2.2.d Details of Key Generation - NIZK proof

\paragraph{NIZK proof:} Guardian $G_i$ proves knowledge of secrets $a_{i,j}$ such that $K_{i,j}= g^{a_{i,j}} \bmod p$ and of $\zeta_i$ such that $\kappa_i = g^{\zeta_i} \bmod p$.

\noindent For each $0\leq j \leq k$, Guardian $G_i$ generates a random integer value $u_{i,j}$ in $\Z_q$ and computes

% xxxx ---- eq. 10

\begin{equation}
h_{i,j} = g^{u_{i,j}} \bmod p.
\end{equation}
Then, using the hash function $H$ (as defined in Section~\ref{sec:hashing} below), guardian $G_i$ performs a single hash computation\footnote{The hash function $H_q$ hashes into $\Z_q$. In this version of the \EG specification, it is simply the hash function $H$ concatenated with reduction modulo $q$, see Section~\ref{sec:hashing} for details.}

% xxxx ---- eq. 11

\begin{equation}\label{eq:hash_nizk_keygen}
  c_{i} = H_q(\HH_P; \mathtt{0x10}, ``\mathtt{pk\_vote}", i, K_{i,0}, K_{i,1}, \dots, K_{i,k-1}, \kappa_i, h_{i,0}, h_{i,1}, \dots, h_{i,k-1}, h_{i,k}),
\end{equation}
and publishes the proof $(c_{i}, v_{i,0}, v_{i,1}, \dots, v_{i, k-1}, v_{i,k})$ consisting of the challenge value $c_{i}$ and the response values $v_{i,j} = (u_{i,j}-c_{i} a_{i,j}) \bmod q$ ($0\leq j < k$) and $v_{i,k} = (u_{i,k} - c_i\zeta_i) \bmod q$ together with $(K_{i,0}, K_{i,1}, \dots, K_{i,k-1})$ and $\kappa_i$. This proof is a compact version of the $k+1$ Schnorr proofs $(c_i, v_{i,j})$ for $0\leq j \leq k$.

% xreqj {
  "section": "S3.2.2.d",
  "text": "After having generated its own Vote Encryption Secret Key and Guardian Communication Secret Key, EGRI enables a Guardian `i` to generate an NIZK proof of knowledge of secrets $a_{i,j}$ and of $\\zeta_i$ as specified in EG DS v2.1.0 eq. 10 - 11",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.d",
  "text": "EGRI enables a Guardian to publish its NIZK proof of knowledge of secrets $a_{i,j}$ and of $\\zeta_i$.",
  "sc": "" }

% xxxx /TJH/pOp64nx3C4OEZFi25uff+zXjfnJSMqgZiMJ7DH7u47Nt16wEdxmu99ygkpKwcriqLvk+xsE
% xxxx JGGswpfYWPyvvWbvAWnD4kE0fRF+W6lka22IoOFVLGvF91BfsU6RHT8O5oWhOgqzi3jL/6RZAb2F
% xxxx Etl18T1x+HNBLxkp1MO/jR7MxUz3dbAZAApeLT1ShSCcdAPF4om5bzbkiCfW5m5Kqt4Na3DI/DWF
% xxxx SE9q7TvKV5BQMTy10Lt98g41YlXiqRDbSSLLAeNLxUa2by/+auMbCLLjy4i9+pR+v6SISqEFQjPc
% xxxx ETIVqXyBBKuIvrEjC+2N59h2OzvnrEt0h7n46Wg4HDJY1DkIFFl8zlgWX0ZI9bAgVmNCGe/WkuXn
% xxxx JoDq6x1i/WX6t/12K93KuhGQLvscsJl8JbJ4yESaygetVswCyjC2FeBvn+oy3c/E+ZKdmQRYxSpH
% xxxx fALZ5DUriJQvuNkm2rCbjEWloWTi/MJFN151zRdHOpJahT+h79tl6FnXomOFTdruLMMg7P1R7Gol
% xxxx czIogEUWUM4efBYIc6tK/6WagLpl94Wf5fM701/uApjSWrDJMeALEZH8afQf9m+zoqJJneBEWVyd
% xxxx M+XjDl24BpLl2N9qYGzQW/sWVaxxIric3MRQp8PQ2UObh3ghF09GVB2UfJHQBeT4A6dzwYpP7KXD
% xxxx NKhjk9dMofXj148X2NOfvauV95FcNbpYZOJm+cAP94mtZxFuTuXiGPWPYdbOnfmlZP/zKdNh9peQ
% xxxx
% xxxx
% xxxx ---- S3.2.2.e Details of Key Generation - NIZK proof

\paragraph{NIZK proof:} Guardian $G_i$ proves knowledge of secrets $\hat{a}_{i,j}$ such that $\hat{K}_{i,j}= g^{\hat{a}_{i,j}} \bmod p$ and of $\zeta_i$ such that $\kappa_i = g^{\zeta_i} \bmod p$.

\noindent Guardian $G_i$ computes a proof for the coefficients $\hat{a}_{i,j}$ that is completely analogous to the above proof for the $a_{i,j}$, including the additional secret key $\zeta_i$ again.
As above, for each $0\leq j \leq k$, it generates random integers $\hat{u}_{i,j}$ in $\Z_q$ and computes

% xxxx ---- eq. 12

\begin{equation}
  \hat{h}_{i,j} = g^{\hat{u}_{i,j}} \bmod p.
\end{equation}
The challenge value is computed as

% xxxx ---- eq. 13

\begin{equation}\label{eq:hash_nizk_keygen2}
  \hat{c}_{i} = H_q(\HH_P; \mathtt{0x10}, ``\mathtt{pk\_data}", i, \hat{K}_{i,0}, \hat{K}_{i,1}, \dots, \hat{K}_{i,k-1}, \kappa_i, \hat{h}_{i,0}, \hat{h}_{i,1}, \dots, \hat{h}_{i,k-1}, \hat{h}_{i,k}),
\end{equation}
which allows to publish the proof $(\hat{c}_{i}, \hat{v}_{i,0}, \hat{v}_{i,1}, \dots, \hat{v}_{i, k-1}, \hat{v}_{i,k})$ consisting of the challenge value $\hat{c}_{i}$ and the response values $\hat{v}_{i,j} = (\hat{u}_{i,j}-\hat{c}_{i} \hat{a}_{i,j}) \bmod q$ ($0\leq j < k$) and $\hat{v}_{i,k} = (\hat{u}_{i,k} - \hat{c}_i\zeta_i) \bmod q$ together with $(\hat{K}_{i,0}, \hat{K}_{i,1}, \dots, \hat{K}_{i,k-1})$ and $\kappa_i$.

% xreqj {
  "section": "S3.2.2.e",
  "text": "After having generated its own Ballot Data Encryption Secret Key and Guardian Communication Secret Key, EGRI enables a Guardian `i` to generate and publish an NIZK proof of knowledge of secrets $\\hat{a}_{i,j}$ and of $\\zeta_i$ as specified in EG DS v2.1.0 eq. 10 - 11",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.e",
  "text": "EGRI enables a Guardian to publish its NIZK proof of knowledge of secrets $\\hat{a}_{i,j}$ and of $\\zeta_i$.",
  "sc": "" }

% xxxx WfB0H6qBUelwpi7JfKBL3nymtprDUOmokhNoNqA7E6zEA4u4kGNC3ylm6NowcnlxBmBKhxGWYpuj
% xxxx OM6GGqv8O4L8w/c0dvAKh1YMot/TpqQmFedUWlhR/R4XT0Iue/Huk8CK2No3Ic6pjxr69hd7yWA0
% xxxx SlmwUasquvbPgsyGOMv6HM0PdJKHMExxfTe3Ox2q99fSRosB6bxmNKiOQZi+Z0+f22tHiGOZOiU2
% xxxx of97acgUeiYJV6vCD19q3n7zvGT6BE2Myhc2rjqCTElVK6L02MKHnBu32NKqIciH3pQTVLUp12i+
% xxxx 3ftw2piKSv3w6HDSYwNg/EtGeeVZ+O68bd0G2kqWQ9kj5rvK+JwcMXuNOe2blqmS24zitYhhv78u
% xxxx eYm4cAizAqcpwKCyaTSnUSob/15ZdkTThjSJxlH8dGw5x4kVjaAxaifi51F4BQbre4C1yQx/M5kg
% xxxx F8+gfDT24A43jvG6t9ex9FKzg/ztxZir28UNlRsGF2ddw51E82uHKHrM4JgsbHbGnqtYZX4C5TW9
% xxxx Zr8I01/08cli/WTawJkhO8q1sj0TZ2PeRmvCQorIl9mZK+vQe2bNdRIPxHHLspMXP9ZObcAcn72R
% xxxx /B4E0rcbFAoiOQauqROdhZvt9LMFDFolyDkQ6ZpptiOqb7Fxn/lwZ9W017HCs+TtzGya1+xd025w
% xxxx nAOEIXFsnLVkpPgJeCtFNvQ4t+llrel1W2SZXHUZhmjTTr4uj6uGtk3lgaP/Ou/XjDYutnKPAXts
% xxxx jSvSBQ3xqZX0ktxJajqgbYfl0ixjWelHiF0sQNA4Wf+kqUzWmQMVWhe4uBYC/GLpxFEFN9totETb
% xxxx
% xxxx
% xxxx ---- S3.2.2.f.verif2 Details of Key Generation - Verification 2 (Guardian public-key validation)

\EGverifExtended{\veriftitleGuardianPublicKeyValidation}{\label{verif:guardiansPK}\veriftextGuardianPublicKeyValidation}

% xreqj {
  "section": "S3.2.2.f.verif2",
  "text": "TODO: Verification 2 Note: Required for (Ref: S3.2.2.o Details of Key Generation - Share verification and the guardian record)",
  "sc": "ace" }

% xxxx fkkOt0htsCHwPUGtFJP7q0idgCZvq5wiPY9laebFZeD6Iwk0Dzjfq0yIpj0CEPyEaxNkgL88ivO/
% xxxx 6jEHHBkLqyp6kR0SE/0Ytq5Dpx4NlCe8vun43OTpTXestlWB10kiEeNnchbCjNLkNkolX9h0hPfX
% xxxx +GzZhdzLY6vwmbY6NUgO2/4BLXMpVTWMgyScIUpK9RwWDou2MJewd39RGUMTmEHSac+IJJ0lHxjY
% xxxx MnYSG3R8wJZIvOgqzn0jIaoZBISgc/0hE5cobYbTYS3PfdGNfpm2UxmSH0g12By9ahm1nFgboSOf
% xxxx Ng2QB9abNYEuv1UAADL9c5hoxLSndcivt7HEZV4zAqhmdoBYhvri+Mcthb9m2DfayAKONRkjm+WP
% xxxx A7OxWpjmi9jfZDHEvngs1FU1ikK1FUx12aWv5zOr814Zpkd7LE/FMBUjp9TwH+cYFenhD8vcJjFM
% xxxx T7HdTvkSMb8gkD3Cbp0cFY4u+IB7scCXJ0Y/Qdwj+6g75ihAoo4L8wMaDPACkkqrLptP/er3NbHJ
% xxxx 4VQmVwysaYKuzLluXnl7F8xkaqsUOdIVAg6UGfpXQqc+m9Zguw+eCDOATwbfQF9AftG6twvGMjJj
% xxxx CfO6oPq/dn63e4vebC47JwyLgNor1muR1BOr2sDymBKe+NvRizYER/tPikipdIwSoO219miuxQgR
% xxxx TEXPXM4q9B5jYce5VlXjTs9E2Ou2HgRnBkH8r1h1wOZUkyGoW6jDQB0k0kBcNLHixRVTqhd7DiAC
% xxxx 0zX7E/rdtpgczYm7dEGyA80eYDYOrQ5tTyrRyooXMggotfCVB1ghAO+WTqy/UYinY0fOPW+RcQtt
% xxxx
% xxxx
% xxxx ---- S3.2.2.g Details of Key Generation - text after Verification 2

This verification box and some others below contain computation steps as well as verification conditions. The former are numbered with decimal numerals, while the latter are numbered with capital letters alphabetically.

It is worth noting here that for any fixed constant $\alpha$, the value $g^{P_i(\alpha)} \bmod p$ (and similarly $g^{\hat{P}_i(\alpha)}$) can be computed entirely from the published commitments as

% xxxx ---- eq. 14

\begin{equation}
g^{P_i(\alpha)} \equiv_p g^{\sum_{j=0}^{k-1} a_{i,j} \alpha^j}
\equiv_p \prod_{j=0}^{k-1} g^{a_{i,j} \alpha^j}
\equiv_p \prod_{j=0}^{k-1} (g^{a_{i,j}})^{\alpha^j}
\equiv_p \prod_{j=0}^{k-1} K_{i,j}^{\alpha^j}.
\end{equation}

% xnote S3.2.2.g This section generates no unique or specific requirements

% xxxx N45KvhfNSke+RP7a52xoMpb1l8auBLdalL9vrMbBs0gD3MNnoxQainv5ycAR2OnxPH8VXW9pOmps
% xxxx SJWR8SY1NNlT+Q+YG+GxDrns7/i2SclNZ5+25edbyyPcKFpeWwQEY8zJ3g5MXhJ9p6cClTHGQeSg
% xxxx FfOAye9x3mZ4/YMK4NukL71E1Fnmo6Ll+aH9FnsOlaNhPzMQKdpzwKyfaXcWy4lzsRhjed1f3STL
% xxxx 1h5JQO2GITWrk4bjaX4nJBFbSDQC6oitGbOaCaCS8hV1xoCnbsoQvk2+yma/reuZcfMDMD8sQOgB
% xxxx d1awBSFwa7uNZCl8h5Jm6SeEXQIqqnx7ieM8EbB2xISAypHxLgAotk3xHF+rXqIt2GBQg8abFtt4
% xxxx 2iEcjrRj0szibFppxXLfyuyD1XwA1tmeFxQ6WTh1sIN4HTa8IQMexZSotXMsHRWrbVyHq5sKen2w
% xxxx c7nBZ0Gq87TLJZL5HC1rEbvvs10mSxYxX5QR62M6r+jTAAc+WL5TL8iQE3RVXCCSBqADjSMHUMAZ
% xxxx dkMjKZ6vcgAaHjN7uEaTWinvFBK1ctMxPNbOpresNbrWC9Drk9jUm5DMjo8YrzRZ6v+IkbKF670D
% xxxx 7nAAueTAV7aNNVAeroYrgTCqxz5bDqFoy/+s6DqYCrbdfX1bKLkYYu2mVBRTiOt2vT6VuRcHEijp
% xxxx FwSTIc7XAP0/RDPW9BIZrHTNS7i6HulMiuA27+LCmgNK1hf1W0Ik9lr5GMPxZwyU+q81PyYSyfSJ
% xxxx crnSNci6qUBn+2o88pj/ydSrp/3ZVT5xC6uTt0EdWyOnJ4OCA6w7jpiSkvtYfHWwvcVoAtR6M7kY
% xxxx
% xxxx
% xxxx ---- S3.2.2.h.n3_3 Details of Key Generation - Note 3.3

\EGnote{Although this formula includes double exponentiation---raising a given value to the power $\alpha^j$---in what follows, $\alpha$ and $j$ will always be small values (bounded by $n$). The resulting exponents $\alpha^j$ will therefore be relatively small. Even for more general settings, the exponents can always be reduced to $\alpha^j \bmod q$ and therefore will never exceed $q$.}

% xnote S3.2.2.h.n3_3 This section generates no unique or specific requirements

% xxxx TNtvAsqCEUfKh2unIqubPv8aCu2Vapx/P63FzJAsmFlWpCL5Ap942DTHRoy46iwKABb4RBhsSpci
% xxxx aNWQe/tsMmLD7/SEk5i4aW86smffJGLz6USU9fEbazm06XXlM4Nmb8xBVOaPbUQ55zRHTmn3kHm2
% xxxx gOm3cFB4+tlaWUN2RRgUxoqz5mksaAT6NMBspttvYAd7UsPUDQiTQOU6CUTsF3k0ENNA6HYb9oIB
% xxxx VkB47wtmPPg56rhXj/U4DrQGRHzWfWEchplIXTVAvfgljQoaOBFI7d6W86HHNxo1Ts5CgD97ln2l
% xxxx 6HHJtFQpdGXdGqxp5TC1pwmatz5vh252ueQO7zvsq2vyUWRovl9LuL0YHe1e0F3KgUyZ1vfqCdK8
% xxxx ofKtT+FxeIwx/qNVNYueaoe6fKc7XYth2L7x0ORUwPAxLkzrueKy6ELKBTWHGc4h8P0bo0Z8dfi0
% xxxx wW5Pzgtn5xQCdmiebKEop00FwUr4WnUp3U2YNRAdupauwG7hdunPR6sCe41F1IMZN8CEaz32/wd6
% xxxx 4nXwUzYZRnrhwH2/O59U0sJSGWUxEKVXxONzuRspTPvZ3nr0BEsSPP8UCksyE8tYoooxcMrFTlzE
% xxxx v0bxrjR6Tz/eFR28ZtD9tm2gXTbZOTs3Y+ddeeoLzWaHVs75300tfhoKiA4FRfvZLXdPcl8kdwhb
% xxxx INr4zwZ6LQbPBAa5l4vWuB2WhLndgL/BP2W+vYNwSk7leKR9mSayhzjrEl9ZtbDVix9aPi5uOkLW
% xxxx
% xxxx
% xxxx ---- S3.2.2.i Details of Key Generation - Share encryption

\paragraph{Share encryption.}
Each guardian $G_i$ encrypts its shares for each other guardian $G_\ell$ ($1\leq \ell \leq n$, $\ell \neq i$) using an encryption function $E_\ell$ that can be instantiated using that guardian's public communication key $\kappa_\ell = g^{\zeta_\ell} \bmod p$ as laid out in the section describing the encryption of other data above. This means that each guardian $G_i$ publishes the encryption $E_\ell(P_i(\ell), \hat{P}_i(\ell))$ of its secret key shares $P_i(\ell)$ and $\hat{P}_i(\ell)$ for every other guardian $G_\ell$ as follows.

Guardian $G_i$ uses guardian $G_\ell$'s public communication key $\kappa_\ell$ and a randomly-selected nonce $\xi_{i,\ell}\in\Z_q$ to compute

% xxxx ---- eq. 15

\begin{equation}\label{eq:share_encrypt_ct}
(\alpha_{i,\ell}, \beta_{i,\ell}) = (g^{\xi_{i,\ell}} \bmod p, \kappa_\ell^{\xi_{i,\ell}} \bmod p)
\end{equation}
and the symmetric key

% xxxx ---- eq. 16

\begin{equation}\label{eq:hash_shareenc}
  k_{i,\ell} = H(\HH_P; \mathtt{0x11}, i, \ell, \kappa_\ell,\alpha_{i,\ell}, \beta_{i,\ell}).
\end{equation}
Using the hash-based message authentication code \HMAC instantiated with \SHA, this key is used to derive\footnote{NIST (2022) \emph{Recommendation for Key Derivation Using Pseudorandom Functions}. In: SP 800-108r1 \url{https://csrc.nist.gov/pubs/sp/800/108/r1/upd1/final}.} the encryption keys

% xxxx ---- eq. 17

\begin{equation}\label{eq:share_enc_ENCkey}
k_{i,\ell,1} = \HMAC(k_{i,\ell},\mathtt{0x01}\parallel\mathtt{Label}\parallel\mathtt{0x00}\parallel\mathtt{Context}\parallel \mathtt{0x0200}),
\end{equation}
and

% xxxx ---- eq. 18

\begin{equation}\label{eq:share_enc_ENCkey2}
  k_{i,\ell,2} = \HMAC(k_{i,\ell},\mathtt{0x02}\parallel\mathtt{Label}\parallel\mathtt{0x00}\parallel\mathtt{Context}\parallel \mathtt{0x0200}),
  \end{equation}
both of which are 256 bits (32 bytes) long, and where $\mathtt{Label} = \bytes(\Str{share\_enc\_keys},14)$ and $\mathtt{Context} = \bytes(\Str{share\_encrypt},13)\parallel\bytes(i,4)\parallel\bytes(\ell,4)$.\footnote{This key derivation uses the KDF in counter mode from SP 800-108r1. The second input to \HMAC contains the counter in the first byte, the UTF-8 encoding of the string $\Str{share\_enc\_keys}$ as the \emph{Label} (encoding is denoted by $\bytes(\dots)$, see Section~\ref{sec:stringencoding}), a separation \texttt{0x00} byte, the UTF-8 encoding of the string $\Str{share\_encrypt}$ concatenated with encodings of the numbers $i$ and $\ell$ of the sending and receiving guardians as the \emph{Context}, and the final two bytes specifying the length of the output key material as 512 bits in total.}

Since $P_i(\ell)$ and $\hat{P}_i(\ell)$ are integers modulo $q$, they can be encoded as byte arrays $\bytes(P_i(\ell),32)$ and $\bytes(\hat{P}_i(\ell),32)$ of exactly 32 bytes each as specified in Section~\ref{sec:intmodq}. The encoded values are then encrypted as

% xxxx ---- eq. 19

\begin{equation}
E_\ell(P_i(\ell), \hat{P}_i(\ell)) = (C_{i,\ell,0},C_{i,\ell,1},C_{i,\ell,2}),
\end{equation}
where
\begin{align}

% xxxx ---- eq. 20

C_{i,\ell,0} &= \alpha_{i,\ell} = g^{\xi_{i,\ell}} \bmod p,\\

% xxxx ---- eq. 21

C_{i,\ell,1} &= (\bytes(P_i(\ell),32) \oplus k_{i,\ell,1}) \parallel (\bytes(\hat{P}_i(\ell),32) \oplus k_{i,\ell,2}),
\end{align}
and the third ciphertext component $C_{i,\ell,2} = (\bar c_{i,\ell},\bar v_{i,\ell})$ is a Schnorr proof of knowledge of the encryption nonce $\xi_{i,\ell}$ computed as follows. Guardian $G_i$ generates a uniform random $\bar u_{i,\ell} \in \Z_q$ and computes $\gamma_{i,\ell}=g^{\bar u_{i,\ell}} \bmod p$, then computes the challenge value

% xxxx ---- eq. 22

\begin{equation}\label{eq:share_encryption_proof}
\bar c_{i,\ell} = H_q(H_P; \mathtt{0x12}, i, \ell, \gamma_{i,\ell}, C_{i,\ell,0}, C_{i,\ell,1})
\end{equation}
and the response $\bar v_{i,\ell} = (\bar u_{i,\ell} - \bar c_{i,\ell}\xi_{i,\ell}) \bmod q$.

% xreqj {
  "section": "S3.2.2.i",
  "text": "(Ref: S2.b) Key Ceremony",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.i",
  "text": "(Ref: S2.b) EGRI enables a Guardian `i` to encrypt to another Guardian `l` Guardian Communication Public Key a share of each of its own (Vote|Ballot Data) Encryption Secret Keys, $P_i(\\ell)$ and $\\hat{P}_i(\\ell)$, as specified in EG DS v2.1.0 eq. 15 - 22",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.i",
  "text": "(Ref: S2.b) EGRI enables a Guardian to publish the encryption $E_\\ell(P_i(\\ell), \\hat{P}_i(\\ell))$ of its secret key shares $P_i(\\ell)$ and $\\hat{P}_i(\\ell)$ for every other guardian $G_\\ell$",
  "sc": "ace" }

% xxxx bKLLEiZjXvTl0J/m0T7DVpI/nnjEPktzLvXnVg9rE3XT1RsZcvACosyBwoFWl56YoI9GTaQf6NrL
% xxxx xbizmeIXoEWqbYrJMUBJVkm/DIgx1Gh4WLJbIje6IWesFb8i0IUqXbYN0LPQt0v2pmdj9b91jPF1
% xxxx 4hbTJSH2NtWojO7OwZ2FFY/lua+sUtx4iB4yxOZx2Ly2Q/d3B0H2dBcIOo3IwmR/oPkamMccp7jL
% xxxx R5eM88Q+jaOvkUkIdY+GgWtVT62G32saafmFESJ+mO08qDs7rJ8LAiQaqWqZKGVgFOOjv++pDD5t
% xxxx rPBX4ugbfHGAY0xQ9HcLwswuS+zPhM2ZrmrHIhhdvzCyK+71mgZzvnr8G/hWqz2rGF1Za90jmSvP
% xxxx DN820rV10BeFjSQedJK3R01+yaS5RyRajEh/9EQjsW0eWd6iXhKl1pS9gAlAbS9ndH3YSZNzMVPN
% xxxx tpCWWDLXU/7+vXXexbMf6KSj4cXgoQRlc1sxFmBqFxI83QEw0eS4qfrgkAKuDOCKuGtSJNVsLxFd
% xxxx AHZ9mJi5DbTHf5zV/znmdJR0bS54+yP+/KBf449qmv3tIHExtQwaKkQipiYU7QYrCgZHGJqlDimv
% xxxx qjPEBbqksiESgPGvOPKNsYnUEjU3CXfMKZhN5s7B4d5xztEJhjAlJRfiRiHUGUwSkkiCDfNrx5mK
% xxxx I7kgHi+XfawkuuTvUK2HgIJ8Lu3cMmE9RJdn9Tv8f+SalsEHJ2y8MTYSTEFBQlhXEQrdeyRoa/CB
% xxxx
% xxxx
% xxxx ---- S3.2.2.j Details of Key Generation - Share decryption

\paragraph{Share decryption.}
After receiving the ciphertext $(C_{i,\ell,0},C_{i,\ell,1},C_{i,\ell,2})$ from $G_i$, guardian $G_\ell$ decrypts it by first verifying the Schnorr proof $C_{i,\ell,2} = (\bar c_{i,\ell},\bar v_{i,\ell})$. Guardian $G_\ell$ first computes $\gamma_{i,\ell} = (g^{\bar v_{i,\ell}}\cdot C_{i,\ell,0}^{\bar c_{i,\ell}}) \bmod p$ and then verifies that $\bar c_{i,\ell} = H_q(H_P; \mathtt{0x12}, i, \ell, \gamma_{i,\ell}, C_{i,\ell,0}, C_{i,\ell,1})$ according to Equation~\eqref{eq:share_encryption_proof}. If the Schnorr proof is valid, $G_\ell$ obtains $k_{i,\ell} = H(\HH_P; \mathtt{0x11}, i, \ell, \kappa_\ell,\alpha_{i,\ell}, \beta_{i,\ell})$ and computes the encryption keys $k_{i,\ell,1}$ and $k_{i,\ell,2}$ as above in Equations~\eqref{eq:share_enc_ENCkey} and \eqref{eq:share_enc_ENCkey2}. The ciphertext can then be  decrypted as

% xxxx ---- eq. 23

\begin{equation}
  \bytes(P_i(\ell),32)\parallel \bytes(\hat{P}_i(\ell),32) = C_{i,\ell,1}\oplus (k_{i,\ell,1}\parallel k_{i,\ell,2}).
\end{equation}

% xreqj {
  "section": "S3.2.2.j",
  "text": "(Ref: S3.2.2.i) EGRI enables a receiving Guardian `l` to verify or refute the Schnorr proof $C_{i,\\ell,2} = (\\bar c_{i,\\ell},\\bar v_{i,\\ell})$ from sending Guardian `i` as part of the share of each of Guardian `i`'s (Vote|Ballot Data) Encryption Secret Keys as specified in EG DS v2.1.0 eq. 22.",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.j",
  "text": "If the Schnorr proof successfully verifies, EGRI enables receiving Guardian `l` to decrypt the ciphertext as specified in EG DS v2.1.0 eq. 23.",
  "sc": "" }
% xnote S3.2.2.j Josh 2025-03-18: The 'decrypted key share' is not believed to be necessary to retain.

% xxxx jR/ReLUubpsW+6qd8oFSmKg/50/8SIfUuwOAgB9f8RFCQ6FfIPjJSQm5ckvz9DSWqQ4hn1j97bZm
% xxxx G6u1X8NGifoxLUtPqZialVC5UGTe3EVX7RVGqKkA0AnQJEQ0RBuf2a6/HxHoDKRNAaOFGsFi/bxj
% xxxx k5RaTW7z+9hqLtvelIvDidaI4IV4v4RXPCjMxfwaXDZqr29eKaP1/c4NlhfG6Q6zAahoKOxUsRlB
% xxxx 484W/bxWvcc8V0aQOf4MfJ89ztneeTr/0KRQqy2Mqe7FX1VlnHuZfzOgjRn65Nk0Ccca6tnIDokh
% xxxx wBT9q2SEXdW61ZggS2/gAkACrqfZHhVJoyPj6CpECTADTtEKjJUf+1gCdDPjqoHDJGfb7dPMuuMV
% xxxx XOY2OuRTwFK6mzxjhM9S+QXLKbWlufJVp0/XW3ZmAIckJiNrM+uVDoz358xMTA/2ONoa5ALZdY11
% xxxx nybLeH5s3fS9wm7vt3uouo8xwLTLEcgC+pCWo9z7nJNDgXYeXDWencxjBEnmWJMtW8senNP9N62b
% xxxx 5YeZlip0KvraN6WoMoq8J/MQleauszZ3aPscfsAzPYfwFXNzZ61OSF96KpuabfoiymbBqWC36Kjd
% xxxx 9/8yxhHKG349XO56btNOEnD5p3IhiCYkQcYe5CFSJ/XXS4btCojdhaVMvcg9KQdlqy8jjnIaPfS5
% xxxx lHGlJvejYn95b4JaJLUYxE7XTctI49kSrZld+R9J6JGyBIV6qxCE2/y5A4b/hzIyTBXqMvs6eU8k
% xxxx
% xxxx
% xxxx ---- S3.2.2.k Details of Key Generation - Secret key share computation

\paragraph{Secret key share computation.}
Each guardian $G_i$ computes its share $z_i = P(i)$ of the vote encryption secret key, which is the value

% xxxx ---- eq. 24

\begin{equation}
z_i = P(i) = \left(\sum_{j = 1}^n P_j(i)\right) \bmod q = \left(P_1(i) + P_2(i) + \dots + P_n(i)\right) \bmod q.
\end{equation}
for later use in decryption as will be described in Section~\ref{sec:decrypt_missing}. This requires computing its own share $P_i(i) \bmod q$. In the same way, guardian $G_i$ computes its share $\hat{z}_i = \hat{P}(i)$ of the ballot data encryption secret key from the values $\hat{P}_\ell(i)$.

% xreqj {
  "section": "S3.2.2.k",
  "text": "EGRI enables a Guardian `i` to compute its share $z_i = P(i)$ of the Joint Vote Encryption Secret key as specified in EG DS v2.1.0 eq. 24.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.k",
  "text": "EGRI enables a Guardian `i` to compute its share $z_i = P(i)$ of the Joint Ballot Data Encryption Secret key as specified in EG DS v2.1.0 eq. 24.",
  "sc": "" }

% xxxx 2MvD38+7Y5XDCKovXzRH1v9gZu4skdUL+18J46aICcFyE8qGYcl8LnZlRxe6ovDkBVxw5iLkqGSU
% xxxx mOy8hbgVbbkIcDujJ96PzLs7mDILeD75FNFD9+I5bCz/HBKQAhE6VfjZNwMyY8UFatNgWxAurjYw
% xxxx 3CYnuwgSNgTpofu7iXZjnJ0jMt3Y4XiY+YsOYT88JMmQFr2lmPQAkjBdIK2M2A8JmwdgA2sH1wez
% xxxx dCCKwqgh4ryFaRF5mM+ONocfWiqZn/qeDCMPOzUn62fDgE8TfCKhAt4Hf9hzPBnnaIULkVpvO18f
% xxxx 0vP9QLQefOMydutZ39NFfrlV6B+yQIZh3uOnMOCEVEqyri47HHnRUe9oIkLg2oELhprWhdTOKZwh
% xxxx 6DAScTGrjJAQSZzKRVOjyw6mG6q7XIzTPORXgSOMdIPrl/uDpNtHttBBWrkUHnDH1r89VHnYcUY8
% xxxx JyumzukC1kqwAGq1cjY/Pf0AZncPlf4d8lU57UE3L+9vDZW38BDo6dVDYVBsmDbW0okIVyfnVaNd
% xxxx y+nH8RbWbMmwbyaCGEGfjgsQs1QfUQqFJMqMthWea2+6Pek2v8GBFrs5T86IIHh7vNsWu7HYbT1G
% xxxx t+dWCbpYWJLJxtpNFXn1zRbm7rO6nCvPL15lducQYptSGcdGKbkA1gh0wJq8hWVdGNuL4fhX/O5u
% xxxx pQNfurhBzAZmrf5Ca+6rqCr2OwmmMXilKFTyr9hgChIvPGFxG9H4qCHcpWU2j6h5bzvKle6xM/fW
% xxxx
% xxxx
% xxxx ---- S3.2.2.l Details of Key Generation - Vote encryption public key computation

\paragraph{Vote encryption public key computation.}
The joint vote encryption public key $K$ is computed as

% xxxx ---- eq. 25

\begin{equation}
  K = \left(\prod_{i=1}^{n}K_i\right) \bmod p.
\end{equation}

% xreqj {
  "section": "S3.2.2.l",
  "text": "(Ref: S2.b) \"At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Vote Encryption Public keys to form the Joint Vote Encryption Public Key.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.l",
  "text": "EGRI enables the computation of the Joint Vote Encryption Public Key specified in eq. 25.",
  "sc": "utep",
  "utep": "joint_public_key::t::t1_generate_jvepk_k" }

% xxxx KQLOo2AnMIxcTnv7I78sbVLS0Jdq3IpxRFz9x7fbpuwd20Nyxe9KKmC7NCtgNPymNoS0c4iiAnqP
% xxxx QVdI/E1owVaXkqjQTTqpqV94aqptTw5ZSMYBwI5xJ5g7Bsr5IEHce/+3J8ll6OcVe/ScsJma/5VQ
% xxxx pgxZgHeIMDgl89GGM89uEnbJDi08eJokuVKdxBGffasWh7HDxu/n0LSYTgQZIgmJnSmVCXlrKFRL
% xxxx 3TemcpXpi024aWaZGtDbB5un3azzc0CYqQaa/o9SW5z9gVW57kXPi7is/m4GMwIV+mPeS9SZuPcd
% xxxx mzIf6QWEGLZWe4EgAdzOkp6pwBg4ahEa2MmYfBh60uziKMbhSwUbogdJNtanjm0/LEZvv6jXYfFP
% xxxx yi7oEKeW+S01AvLuGuJV35xqnA/jtHXr9NDweW770gQ4GsuT4tCFL2l3kcWp88V1l0DWX8NNEauA
% xxxx dMcpLUy3cHmZZeW3b9B3YOZ4XNrmlZSBUV9x+mOf5JNmt6TswHagFVhNJfxhcf5QQlAOz3A2EDXV
% xxxx Nlu5wAmO6enhLhnEdhGIAjZjO3zCqsixqCsZjCXzD9w4JmuQYe2SmH2Oh61HefeIkeS2APRQ5Mso
% xxxx SSy2w0AqqW7Y7Y8pN33h4L+rOD8NCVQfi3C7NydJywXBG6jA9bGnBcl7ELiFWZsUPsdKRksl3ver
% xxxx 08fb69DSLTxlGaSRxloVsjWvWinDZ9OcFXcEukS1Qdh4oF3NFrid5VzBHl9OAueCCesb+vcdls26
% xxxx
% xxxx
% xxxx ---- S3.2.2.m Details of Key Generation - Ballot data encryption public key computation

\paragraph{Ballot data encryption public key computation.}
The joint ballot data encryption public key $\hat{K}$ is computed as

% xxxx ---- eq. 26

\begin{equation}
  \hat{K} = \left(\prod_{i=1}^{n}\hat{K}_i\right) \bmod p.
\end{equation}

% xreqj {
  "section": "S3.2.2.m",
  "text": "(Ref: S2.b) \"At the successful completion of the Key Generation Ceremony, EGRI enables the combination of Guardian Ballot Data Encryption Public keys to form the Joint Ballot Data Encryption Public Key.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.m",
  "text": "EGRI enables the computation of the Joint Ballot Data Encryption Public Key specified in eq. 26.",
  "sc": "utep",
  "utep": "joint_public_key::t::t2_generate_jbdepk_k_hat" }

% xxxx fYwh9HfOXYv073nKP1YBFuXO+YRGjy8+lQaxbsQk9q7C1qBAIK9fhZCYwHeT2PcQYmTFR7WVpPuL
% xxxx VdXa1fkYgMIO41UHa68iRkCkbGrJOvQVJekFeEe898Rbv32OWnOoP43uWnV+Pbid9QB/z3KHpci9
% xxxx Y+K5UkXut7xwDNJulkpNLDpXRffYwBetR4sXpgCAHS/tPHe46rAFK9HlXyH7LfwlSPEnfObfksib
% xxxx 1JV3qgrXfJZBaBcmWaA52hsA+VN4QcERDPNu0ZkNVDOxYzP/wzJJCvAMqicKpZxBGuHbDCQEx7k7
% xxxx l4Ygdlyq/1bI3AZvupjdR75ea56FUVIFLdxl3w7xa2FZ3ls9hFA2gUMVRfRlqkSFq5Ep9vugx7e5
% xxxx PzC9yYIuwjESccw9ikb2h9BsPQvt7POtOXqrMU4TesO7ufcCV9iWCC+pB0Qz+SyK5GSfdC8WCzb1
% xxxx pF9o0ugj3gPnwFlrHXph4NF+CmwV7VCGdQymb+Jxnj6q6LCQz5FZJmRUWh2oi8NVODtUQAuLXInT
% xxxx VWKQ6c9Cu6T4HnAA/Awvx19+GaxbQ3mJ/chfCQb7Lg1kjzOHwMKGEdtiW4e2lWjFMpb9UY09+r1V
% xxxx j/nYW6qv9LVs7B3QgMlpbGx6WQuTGIUt9xo9b5V2ckj1bD4xetO57+ZPHyEK0ns8DuqoLMRlSuyx
% xxxx FQpuYf6Qz1iJDykylmo3RUNW80O79FVN+ueJ60uFDZzzbV+p5NaLGuV7y65xVS95nvs7QtgWGo/n
% xxxx q9GiPnJepreo433yi4uDvdcm888ZQjyZ8QKC6d8Hlv4AmXFcM4E/GH7k4q/HmNqWFUOKWQZhoqft
% xxxx
% xxxx
% xxxx ---- S3.2.2.n.verif3 Details of Key Generation - Verification 3 (Election public-key validation)

\EGverifExtended{\veriftitleElectionPublicKeyValidation}{\label{verif:electionPK}
\veriftextElectionPublicKeyValidation}

% xreqj {
  "section": "S3.2.2.n.verif3",
  "text": "TODO: Verification 3 Note: Required for (Ref: S3.2.2.o Details of Key Generation - Share verification and the guardian record)",
  "sc": "" }

% xxxx mpBncnBKALiFVe+j83di0WewgATplImDLVq7+MpvbSuF5NZWaGD1yY3YKBa7CsM6/L/faOHIDCwT
% xxxx k6ZfDn47TQeZEZVRz05ngUH4tXVTb1P2JlVAkgjwo43WuIFSjWFi2xJYYdRS5yTVS95k64lzddjp
% xxxx 96jSseuT/JX8NUqA/rlDhaLXEsPJKGugZBgSVilghOdHpIDcSZrR9RlNdQoH3y4UOYfvxePuSxl0
% xxxx zknjdn02lp0E6P+lUG1vILxvgEkN2jpYi0N19J07NTz8wa/5x7yBmglqqT/Lo32EB+w+7UxEcF2d
% xxxx LmamfwLftTzIBIW7t3BS6sBlGrHzcZnkyN1PiWhZJo3Hq8RWY3U1x7lrMxRfrx5WgkafVF8G1W6O
% xxxx vUXpSlyzKLGmfZ2oWh7LMeL3Vm3EhGN57lB2N8OIyh9R6V6oiUK7ZK9oI72gF8F+hsErPIa60gLD
% xxxx wNbcZVA80Egq6IulQBEXcVgoAa0wHYAW2clFc5CLspXU14c+cxQRi1kPFIRxZm7q5AAndCMX9Bdp
% xxxx 1f3nwwxe/BT+wBIW7HA5MdLMMpTgWos7yUt+SZkOb2vYY8V6CCMlOAu/BK7f3BD9e4/AXvBmuxFi
% xxxx WbsKECSkqFZc2IEYU9ljlVlmnz/y8nHGn3IWuoq61I7p0UH7r0vXkH3j2mPn3ySJ6r11km5dOzm7
% xxxx G3Rmmi7FdAg5qu/l/JE9m35ZKU3F/wiKKqr0R3OXGMUQAU+dP6kHCx06teZPC6oNcgZP0X8QYMM/
% xxxx
% xxxx
% xxxx ---- S3.2.2.o Details of Key Generation - Share verification and the guardian record

\paragraph{Share verification and the guardian record.}
The election administrator produces a \emph{preliminary} guardian record and makes it available to all guardians. This record contains the election parameters $p$, $q$, $g$, $n$, and $k$; the election public keys $K$ and $\hat K$; all $K_{i,j}$ and $\hat{K}_{i,j}$ values from all guardians (for $1\leq i \leq n$ and $0 \leq j < k$), and the public communication keys $\kappa_i$, together with all Schnorr proofs $(c_{i}, v_{i,0}, v_{i,1}, \dots, v_{i, k})$ and $(\hat{c}_{i}, \hat{v}_{i,0}, \hat{v}_{i,1}, \dots, \hat{v}_{i, k})$.

Each guardian $G_\ell$ now performs the following verifications of the preliminary guardian record.
\begin{enumerate}
\item Guardian $G_\ell$ compares all key data in the preliminary guardian record with its own view of the data. This means $G_\ell$ checks whether the data that $G_\ell$ computed or obtained from other guardians is the same as the one displayed in the preliminary guardian record. In practice, this can be done by comparing a hash of all the key data as
\begin{eqnarray}

% xxxx ---- eq. 27

\HH_{G} & = & H(\HH_B;\mathtt{0x13}, K, \hat{K},\nonumber \\
& & \ \quad K_{1,0}, K_{1,1}, \dots, K_{1,k-1}, K_{2,0}, K_{2,1}, \dots, K_{2,k-1},\dots, K_{n,0}, K_{n,1}, \dots, K_{n,k-1},\nonumber \\
& & \ \quad \hat{K}_{1,0}, \hat{K}_{1,1}, \dots, \hat{K}_{1,k-1}, \hat{K}_{2,0}, \hat{K}_{2,1}, \dots, \hat{K}_{2,k-1}, \dots, \hat{K}_{n,0}, \hat{K}_{n,1}, \dots, \hat{K}_{n,k-1}, \nonumber\\
& & \ \quad \kappa_1, \kappa_2, \dots, \kappa_n)\label{eqn:guardrecordhash}
\end{eqnarray}
with the hash value computed in the same way from
$G_\ell$'s own view of the record. Guardian $G_\ell$ also verifies the
correctness of the base hash $\HH_B$ by performing Verification~\ref{verif:parameters}.
\item Guardian $G_\ell$ verifies that all Schnorr proofs $(c_i, v_{i,j})$ and $(\hat{c}_i, \hat{v}_{i,j})$ are valid for $1\leq i \leq n$ and $0 \leq j \leq k$. This means that guardian $G_\ell$ performs Verification~\ref{verif:guardiansPK}.
\item Guardian $G_\ell$ verifies that the election public keys have been correctly computed from the guardian public keys as $K = (\prod_{i=1}^n K_i) \bmod p$ and $\hat{K} = (\prod_{i=1}^n \hat{K}_i) \bmod p$. This means that guardian $G_\ell$ performs Verification~\ref{verif:electionPK}.
\item\label{verifstep:keygen_shares} Guardian $G_\ell$ also verifies the validity of each share $P_i(\ell)$ against guardian $G_i$'s commitments $K_{i,0},K_{i,1},\dots, K_{i,k-1}$ to its coefficients for all $1\leq i \leq n$ by confirming that the following equation holds:

% xxxx ---- eq. 28

\begin{equation}
g^{P_i(\ell)} \bmod p = \left(\prod_{j=0}^{k-1}(K_{i,j})^{\ell^j}\right) \bmod p.
\end{equation}
The same equation is checked for the $\hat{P}_i(\ell)$ and the $\hat{K}_{i,j}$, i.e.,

% xxxx ---- eq. 29

\begin{equation}
  g^{\hat P_i(\ell)} \bmod p = \left(\prod_{j=0}^{k-1}(\hat K_{i,j})^{\ell^j}\right) \bmod p.
  \end{equation}
\end{enumerate}

If any of the above verification steps fails, guardian $G_\ell$ complains to the election administrator and all other guardians. This triggers an out-of-band investigation to identify the cause of the verification failure.

One possible way to investigate verification failures is to have all guardians release their secret information such that detailed checks can identify parties that provided false information or carried out erroneous computations. This does not necessarily allow identification of a misbehaving guardian, but might do so. At least, it may help to identify implementation bugs in the guardian or administrator software.

After possibly excluding or replacing a misbehaving guardian, the key generation procedure is started from scratch. It is the joint responsibility of the election administrator and the guardians to conclude key generation such that all guardians agree with the proposed preliminary election record.

Once all guardians confirm that all verification steps have passed successfully, the preliminary guardian record is validated and published as the guardian record as part of the election record.
Guardians verify that the public keys $K$ and $\hat{K}$ that they verified in the preliminary guardian record appear in the election record.

At this point, guardian $G_i$ only needs to retain the secret values $z_i = P(i)$ and $\hat{z}_i = \hat{P}(i)$ that it needs for participating in the decryption process. All other secret values, in particular its initial secret keys $s_i$ and $\hat{s}_i$ may be discarded.

% xreqj {
  "section": "S3.2.2.o",
  "text": "There is a defined Election Data Object called the 'Preliminary Guardian Record'.",
  "sc": "" }
% xnote S3.2.2.o Josh 2025-03-18: Out of scope for EGRI: % xreq2j S3.2.2.o The Election Administrator has software.
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables an Election Administrator to produce the Preliminary Guardian Record from data generated during the Key Ceremony.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "The Preliminary Guardian Record contains the Election Parameters $p$, $q$, $g$, $n$, and $k$; the Joint (Vote|Ballot Data) Encryption Public Keys $K$ and $\\hat K$; all $K_{i,j}$ and $\\hat{K}_{i,j}$ values from all Guardians (for $1\\leq i \\leq n$ and $0 \\leq j < k$), the Guardian Communication Public Keys $\\kappa_i$, together with all Schnorr proofs $(c_{i}, v_{i,0}, v_{i,1}, \\dots, v_{i, k})$ and $(\\hat{c}_{i}, \\hat{v}_{i,0}, \\hat{v}_{i,1}, \\dots, \\hat{v}_{i, k})$.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables a Guardian `l` to verify the Preliminary Guardian Record as specified in EG DS v2.1.0 eq. 27 - 29. Note: This includes (Ref: S3.2.2.f.verif2 Verification 2) and (Ref: S3.2.2.n.verif3 Verification 3).",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "(Ref: S2.b) \"EGRI enables a Guardian to \"complain and halt the protocol\"\"",
  "sc": "ace" }
% xtodo S3.2.2.o EGRI supports a Guardian `l` in complaining to the Election Administrator and all other Guardians. TODO: In practice this likely implies providing a set of data TBD.
% xreqj {
  "section": "S3.2.2.o",
  "text": "(Ref: S2.b) \"EGRI enables, supports, or facilitates the initiation of a 'Key Ceremony Irregularity Investigation' subsequent to a Guardian complaint of irregularity.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables to deterimine that all Guardians have confirmed that all verification steps have passed successfully.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "There is a defined Election Data Object called the 'Guardian Record'.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enable publishing the Guardian Record as part of the Election Record.",
  "sc": "" }

% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables a Guardian to retain its own indepent copy of the Preliminary Guardian Record for later comparison with the Guardian Record as published in the Election Record.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables a Guardian to verify that the Guardian Record as published in the Election Record contain the same values for $K$ and $\\hat{K}$, the Joint (Vote|Ballot Data) Encryption Public Key as that they verified in the Preliminary Guardian Record.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables a Guardian to retain only its secret values $z_i = P(i)$ and $\\hat{z}_i = \\hat{P}(i)$ for later use in the decryption process and to destroy all other secret values.",
  "sc": "" }
% xreqj {
  "section": "S3.2.2.o",
  "text": "EGRI enables a Guardian to destroy its initial (Vote|Ballot Data) Encryption Secret Keys $s_i$ and $\\hat{s}_i$.",
  "sc": "" }

% xxxx kXN+QiD9GIRtBsqVA6v/FrjSxWZYF04eLtbPsCC2OrErfXq4QW0i4efPWvj4VFERcHZDZUlazfPM
% xxxx RDmiUq1QR3UkBQ8aqMNs8TM1Lpr7VGjI+qI2SzDST2v8m2OzD25JAE0TcA23CcQ1TmZDG7RV678y
% xxxx KoyTB8EF2ujd7c3Qjpp/pwfcuPEd2r6aptz/xfBe0sNb7GzcjW0uzC1iBF4Y5HlybyXdBv1k2bAB
% xxxx ZZTRPhS4MfU80vk9968x8ST4PVcOQJrHeXkayA8j22+iRXqwok1ZSi6BpEHIpgSjgNY0+o9sRrrE
% xxxx WolWoye6DXe4oDmb6XzcDwpzKWnA+VDpZEP3/eOp6/oWt/Ol8OAtLLYoqXmdGSXYelMYjdMkHwRf
% xxxx udtRYTZzi1UUzfmJwocKaJ81SBs6Baa+nGI555eOKCsytDOC5HlMfl83KK5Bylb+aNQ+n5WjYPKQ
% xxxx Hid/+5LoX9LTGs4JwjuG/DervT7wCkC2rLlpwiX08jr1FEEkrvjfmGCbSc9xca6AF6EP7I6gVrxk
% xxxx l4HVizzCg8tXg2UXcEMsZy7DGf24ZwzmJKCnZ0SQiiJGyE3bRaW2V8ZdemuXBU4Orsg8KJm8y+oJ
% xxxx ILxrWu0POsjIa9C36I6wpsmh/Dj57oPHuaQiuEVjF//TYkI8eNTwGCApdDOLhjPrNhTVHh6DRIUM
% xxxx LUf2ej6jDpWBmV8JJjfPpMSyOVNJQQyg7UJ6G3tPRMRH2gdxlKNHwkIYgl+Uz1DM8bEzjmgLicKB
% xxxx
% xxxx
% xxxx ---- S3.2.3.a Extended Base Hash

\subsubsection{Extended Base Hash}\label{sec:extendedhash}
Once the baseline parameters and the election public keys have been produced and confirmed, the base hash $\HH_B$ is hashed with the election public keys $K$ and $\hat{K}$ to form an \emph{extended base hash}

% xxxx ---- eq. 30

\begin{equation}\label{eq:extbasehash}
  \HH_E = H(\HH_B; \mathtt{0x14}, K, \hat{K})
\end{equation}
that will form the basis of subsequent hash computations.

% xreqj {
  "section": "S3.2.3.a",
  "text": "EGRI computes H_E from H_B and the Joint (Vote|Ballot Data) Encryption Public Keys as specified in EGDS v2.1.0 eq. 30.",
  "sc": "utsp",
  "utsp": "eg::extended_base_hash::t::t1" }

% xxxx GmjLj0KbHj3PA0WY2a726ybWojlC0uHRhnGzo1Hzbx+6xduVW0MPK8mw9fc8O/Aw5p6mr01/+Dg8
% xxxx 3KwNe0oE9HOnpdc8NkUPH+TColw+0eRchPD/VueAo/f9z67haehklb3DjXbwAiHqJxOu2O/D8m3F
% xxxx bXq0buAXseqtL2z1kfDBAiIvoNgbbicjJXWP+/2Go//EDdcEbHWOGinY1PfT4fs/GrI3TPkqxYkV
% xxxx YJSZXshLToU2EHjHc8mY8Fvl95gqfY9zKtJgCzCyfE3y4elgvT/XPyZOZNhBwyLEjR2R1k3jLv+2
% xxxx qya1RxT37cm2lxuGLB6x8cmaNkAekD9DNaT8YV5r8LgGEFTNIieh1pvkjJGLDEtNtV9W6+EeT+/A
% xxxx j6S+e8fYzCg7KVeInZJB/xxEXjBo6vbhCz1lhGdqwMw+wTOGEg0lco+jx1RauJYb7bSe2wllHaMf
% xxxx Ak1w2NmAmB55WAKwHE837+VTtz0x6BlU0fYBhmeNqrgE9TiQwcyoBvMVWFaTDAeqqcgc/Bs8gy5R
% xxxx 0gVvAtUvkQBfRteibuNQd4UvBua3rdwDF/172U+ongxIIC4Z5b09BgNR0tO53wj6sThCOvOFP88R
% xxxx wlc/5W29Q0BUntBBxE0HTfdpsxoUUgpcn6qICGeQTvZb15X7JGozx8x5PDMaFmuemOe4mweLYw8Q
% xxxx 0KNXOnL8Hx9f2N+mVDsYALopM15MsnFCO16lnM6J9p2rvVLJdljJur/LTEBQfC51MPJ6O0ZlO7Ne
% xxxx
% xxxx
% xxxx ---- S3.2.3.b.verif4 Verification 4 Extended base hash validation

\EGverif{\veriftitleExtendedBaseHashValidation}{\label{verif:extendedBaseHash}
\veriftextExtendedBaseHashValidation}

% xreqj {
  "section": "S3.2.3.b.verif4",
  "text": "TODO: Verification 4",
  "sc": "" }

% xxxx J0+U1XUcigIsH5BMqBKbddv01uux9agLxDFTC9R24Pgyd2BtFd0LNiqip7B98mJ66XBCxa8+FwAk
% xxxx pPPZpyCNLXE3+vwbP2WBkFeyhKMhjH/ck8w/SbAUDk2TG1HbpLDB0GKL6gcLWoaCASWv7b5efdOa
% xxxx KPa3mq27xA3utH7PKv/bd/Rr5CKjYZyrKkBTMJFLYwcL5n488TtTwJLb6SX9ahQZdyARlXBRXsys
% xxxx fmFnGztzsvi7qXJSThb7TbYSC2jeIkGm69YmGHuQ9H6e1NMesYJbUVR+5ef1aYFMoiGrp+qINfST
% xxxx WozhlAE7nDQQHlV/VxDDgqKQ2oamrTsOdcdGUTNq73l85qWLOk71pwGRRWkGTAv6cC8D0cj8wsuC
% xxxx 2QeDzXPVC/LXLJyxU+krFIy8Oo3IYr4q8yeTWFiOScfhcz2PRSTF6JJNf/UdT6oa3wdQXrJc7dk0
% xxxx KYu4X6q68vQjSNYcdXV0cMhokBXtx/YHbYVT8bXe2sEQjchQQLMbbdpZcbBSfQXZJjiu7k57JgQo
% xxxx SkTo7G7V8bsuTRWlGI7QsQT4kx/29neyJiYjHBKcubHPjfjFXUfgAmYjmPYB4nFSL5/RSxEBTocW
% xxxx Z8a6j8cYlLwxURwC1XK60UgHs1Y8n32oe/stXVSGfz+gLhRrQAkCwSpHg7d//KfYHAGvx66Qv9M/
% xxxx dFm9ohjhijkhELxJyOP9iqVjF1gmqaIg28u+4pdpP8BkrjUDeJTTC3nw8VmP1gA0oaRj7PS2JWF6
% xxxx
% xxxx
% xxxx ---- S3.3 Ballot Encryption

\subsection{Ballot Encryption}\label{sec:ballotencryption}

Although there are some exceptions, an \EG ballot is typically comprised entirely of encryptions of one (indicating selection made) and zero (indicating selection not made).
% xreqj {
  "section": "????",
  "text": "EGRI rejects any set of Guardians having any CoefficientCommitment the same.",
  "sc": "" }
% xreqj {
  "section": "????",
  "text": "EGRI rejects any Guardian having any CoefficientCommitment the same.",
  "sc": "" }

% xreqj {
  "section": "S3.3",
  "text": "An ElectionGuard `Ballot` is an Election Data Object that is created encrypted. The term `encrypted Ballot` is technicaly redundant.",
  "sc": "utsp",
  "utsp": "eg::voter_selections_plaintext::t::t1,eg::ballot::t::ballotstyle5_contest5_votes_0_0_1_0_0_0"
}
% xreqj {
  "section": "S3.3",
  "text": "The concept of a traditional, e.g. paper, \"ballot\" is referred to as `Voter Selections`.",
  "sc": "" }
% xreqj {
  "section": "S3.3",
  "text": "In specific cases, such as a challenged, an ElectionGuard `Ballot` may be decrypted and the plaintext of the constest data fields published. But the term `Ballot` still as always refers to the encrypted form.",
  "sc": "" }
% xreqj {
  "section": "S3.3",
  "text": "Election systems may assign a Ballot an ID label for reference and retrival purposes. This ID may be randomly generated or derived from a combination of information guaranteed unique. In no case will this ID label encode or be derived from data that wouldn't be recorded in the Ballot in-the-clear anyway.",
  "sc": "" }

% xxxx N+SHHIM5ns2ibRGGa+ilc5NN10D35HMjPlw4i+ohaOkhMbDjWBltfj805KQfgncyoJb7I5I1bHjU
% xxxx DsL2vw2NFlGbJdtJMMsaXmdYtNtk1kLBP3d8IeJislNgczQfQ00/kWULSh6y0B5u0sFT/VupNcVe
% xxxx Y9c0pMJ4Yu6aEDYEMaEvVQ0lg6Hsc3Jvj2NrR+TXuxtFe9nHAyfpGcm7llg3pHAgI2x02e2tt6m2
% xxxx bLbSzSFYS6JVPCWnA5njzKK2eFGxndrhryxx7aGTUaL/4FswJvaKx7hQu6cWcdWeQbYxEY/RRdch
% xxxx /aCtEQSzXZr+2WyzTX2d1ro8xmQOQVNJ1wtDFJ6hnxXatkzYu5OmOYuxNyzaRcAZrZ+ELuL4/iIa
% xxxx XjgKs+TGgsqEaHqXmrBI9jyq+djJ8fs2zyx9bnU19p28pCcbJi1Lbghmf0ZjeExlHqNcMFUzRU+O
% xxxx KGMZIM9zimJRgq5f/OGhSsavjlENil6cOJWOSdqOX01Yr9Tb/8S6zxgt2DAR4oPQKOcaXGPQ2iiT
% xxxx Uw72mPl8SA9J56IYDYEHJH39sLqn7r/CK/6/1fsxl6aDm26sAKRCypsfT9cZXGE59amvDQzjQ7/C
% xxxx oNVAtDoxb3Ab9gxjrGEDfdrJv4WMUu1ZqCJTHe47O0hqwPdbSMy49vjMLucP3ORnJMMN6y9sod/k
% xxxx GtRTCvKq73eDMHNc11ZWRJlWysIcUnLZ3zosq3zA3kgYTHzGr11oIFwpBuWimI/9EhV+rrkrlxdM
% xxxx
% xxxx
% xxxx ---- S3.3.1 Selection Encryption

\subsubsection{Selection Encryption}\label{sec:selectionencryption}
To encrypt a ballot entry $\sigma$, a random value $\xi \in \Z_q$ is selected, and $\sigma$ is encrypted as

% xxxx ---- eq. 31 pg. 28

\begin{equation}\label{eqn:encryptvote}
\Enc(\sigma,\xi) = (\alpha, \beta) = (g^\xi \bmod p,\ (K^\sigma\cdot K^\xi) \bmod p) = (g^\xi \bmod p,\ K^{\sigma+\xi} \bmod p).
\end{equation}
Specifically, for the typical case of $\sigma\in\{0,1\}$, one of the following two computations is performed.
\begin{itemize}
\item Zero (not selected, $\sigma=0$) is encrypted as $\Enc(0,\xi) = (g^\xi \bmod p,\ K^\xi \bmod p)$.
\item One (selected, $\sigma=1$) is encrypted as $\Enc(1,\xi) = (g^\xi \bmod p,\ K^{1+\xi} \bmod p)$.
\end{itemize}
The notation $\Enc(\sigma,\xi)$ for this homomorphically additive encryption includes the encryption nonce $\xi$. In cases, where the nonce does not need to be referenced, $\Enc(\sigma)$ is used for clarity.

Note that if multiple encrypted votes $(g^{\xi_i} \bmod p,\ K^{\sigma_i+\xi_i} \bmod p)$ are formed, their component-wise product $(g^{\sum_i \xi_i} \bmod p,\ K^{\sum_i \sigma_i + \sum_i \xi_i} \bmod p)$ serves as an encryption of $\sum_i \sigma_i$---which is the tally of those votes.\footnote{The initial decryption actually forms the value $g^{\sum_i \sigma_i} \bmod p$. However, since $\sum_i \sigma_i$ is a relatively small value, it can be effectively computed from $g^{\sum_i \sigma_i} \bmod p$ by means of an exhaustive search or similar methods.}

Some cardinal voting methods like cumulative voting, score voting, STAR-voting, and Borda count may require the encryption of small positive integers $\sigma$ greater than $1$ that represent multiple allowed votes or weighted votes. In all these cases, encryption is done as shown in Equation~\eqref{eqn:encryptvote}.

A ciphertext $(\alpha, \beta)$ as above can be decrypted using the encryption nonce $\xi$ by computing $K^\sigma = \beta/K^\xi \bmod p$.

% xreqj {
  "section": "S3.3.1.j",
  "text": "EGRI encrypts a Contest (Option or Additional) Data Field value as specified in EGDS v2.1.0 eq. 31 pg. 28.",
  "sc": "utsp",
  "utsp": "eg::joint_public_key::t::t3_encrypt_to" }
% xreqj {
  "section": "S3.3.1.j",
  "text": "EGRI may pre-compute the encryption of a Contest (Option or Additional) Data Field value of '0', and then convert it to an encryption of `1` if needed.",
  "sc": "" }
% xnote S3.3.1.j Note: Though unlikely with expected values, the addition of \sigma+\xi must not wrap.


% xxxx epcSI8UDr2Z0rmURrq8nzZ3fiUFwemP0YsBFLHgI8rhJtAhCYq5r+aoKrUX+b12VOuww6HLs6EJp
% xxxx xrIekpfax0EbX8Vj1WGT8f6I9wGygxJ1uw8aBWs+Neg74YZy07pL+rKFHmv5zoe+hMvA1IKNLfMQ
% xxxx Mn1THg+uqprk7XS2IsGm1HvRSZg/iZqcJ/8wA5LlwCdiFWeDzQE169lLZC4luodlj4s8vDSoequC
% xxxx oluvcnuUvF/gha/0wVOtILdEydGkhSxMl38gcLUBml1tlssQXQpMaPKwgiJx4j+yIy6EAXMm61Gl
% xxxx xOWLQx6UL/BPr5UImHUqDc9KifV4dkqbJIKxGipSmKnZs15SDU1k9o1CBWwonbBy2AGojppogFiO
% xxxx Fw9Sg8JcP5njtW6hEbk4/YYhQy7E/oPV1+OlGpaBc9OQIygP7BB07XZ8W9RYVX+fU9lUA9cZnEg4
% xxxx a417XNDvEGd+PtyjPefEyhrvvYStA+UZ+VXN+7a7K3A9anlK9kf4m+XemO5kVrmrN5zY3Qc172Aw
% xxxx dqHY4zY9tahBTYpXBznHdqH6j89ruy4qC51mlusAAuoE975N9ozLSc9YXAx8NBX46jkJK2PXmgUe
% xxxx ggSbInmrMIbPifhvZ8Lz24YUitsHEG0sAjBZtOAqiUL2wBKhtQhPOG75WWa+KsyHCO0fnoMksWOw
% xxxx tqvtVUwokAIDlberg1/WQg07LlLJYy1dvOWlLGZ163PlZh3qENe4wJFOo8Ly9bsWNvwnNbvN5f4F
% xxxx
% xxxx
% xxxx ---- S3.3.2.a (new in v2.1.0) Selection Encryption Identifiers and Identifier Hash

\subsubsection{Selection Encryption Identifiers and Identifier Hash}\label{sec:identifier}
For each ballot $B$, a $256$-bit \emph{selection encryption identifier} $\id_B \in \{0,\dots,2^{256}-1\}$ is chosen uniformly at random. This value is a unique identifier that is publicly released with the selection encryptions of the ballot and stored with the encrypted ballot in the election record. A \emph{selection encryption identifier hash} $\HH_I$ is computed as

% xxxx ---- eq. 32

\begin{equation}\label{eq:identifier}
\HH_I = H(H_E; \mathtt{0x20}, \id_B)
\end{equation}
and is used in all subsequent hash computations relating to the ballot $B$ such as the generation of encryption nonces and challenge computation for zero-knowledge proofs.

% xreqj {
  "section": "S3.3.2.a",
  "text": "EGRI computes for each Ballot a Selection Encryption Identifier `id_B`.",
  "sc": "" }
% xreqj {
  "section": "S3.3.2.a",
  "text": "EGRI computes `H_I` from `H_E` and the Selection Encryption Identifier `id_B` as specified in EG DS v2.1.0 eq. 32.",
  "sc": "" }

% xxxx gTHfktcFv8LekksASRlTlHqIKDiVO6U8DZTA0UaXP/xTni2lZJiFIB72rIfSKGRqNrrxYWesrZdu
% xxxx JkIFdjU47bPezeDBGq15f7yRXsQg91f+etoXF7TsKnwtG+o9UDoPLlkThevjhqtXnVhhTbJNT0TR
% xxxx BOL5f6YehVlRBCpdKyid8+LSlP1XqDh6V+9D8fNP35o69tg6qdZwYMmQFGrVZlAj5tNd+3zKKE4i
% xxxx X/hRO/0Z027FQI2guJXlQm/N1ZO3Nj5MVGCdVEACaHcUqmuGzBD/lnZqPDxlMZ1xTWUEXZE+KdU9
% xxxx jcMR5S2v9JqXmTD6wDRx2I+EWiV8n0dGFNlDlRO/rZTK60UCfM9SB0PL8QwkECpV1Z+IUd7Evr3c
% xxxx MUmAEjdSdmhb2ZB65f1avxZcqvO+paQL0CooFCPLoqi6+38+sfyoeXowTpIGDQzYbfFbatNNBeu/
% xxxx WENfheWEjYaYZ1kMQIE8jVPTuWyRPhfvyzE+dgkLewaSmL74UXSqto2aSXFGUuTCLmkShwY7ec3P
% xxxx mZOGO/IpqOcC5WTW9vs+EuJ+gsx0oxwN1BjQ8nRbntzs2QPy3d6Ql+72Qv2PC0wL8zl9copMSyXY
% xxxx e1EuXPhBePEchQScp/T55VyM9+oHo/O9ByG5CLybDEzWt+3lHDTnWEy/4Bv7XQAfZGBpbvJoY+Ua
% xxxx Tn8+Fj2RuWqkRYr1CTdrw6npAMK2/D2N2PZbMato0AXmrqkjWekeaKiBq7zQgj+FmJScNvUtIMHC
% xxxx euHj+TlMfUUOoUPw6VlfD9YeeGyKQapiHfbbSfAK4Wt+D5gAefjOEjh09JSOnYDtxjzwspcT5SCb
% xxxx
% xxxx
% xxxx ---- S3.3.2.b.verif5 (new in v2.1.0) Selection Encryption Identifiers and Identifier Hash - Verification 5 (Uniqueness of selection encryption identifiers)

\EGverif{\veriftitleUniqueEncryptionIdentifiers}{\label{verif:uniqueEncryptionIdentifiers}
\veriftextUniqueEncryptionIdentifiers}

% xreqj {
  "section": "S3.3.2.b.verif5",
  "text": "TODO: Verification 5",
  "sc": "" }

% xxxx vkDzqdOGV72CWytYqxtxgxsvq3iJ/f9wCZRdGh7wUQmKN7Gp5xfp94WQUmsBx1VPPncHIJLLaLLB
% xxxx meAPcpMOkD5GRgGZhp0ts2Lqh8pK3br2og5WzE8UktTBUDSihXppgsvcdDxErNT8/VfUrX3M8nmP
% xxxx 5ADzEdovixyqrA+PJKTppdBWSwzz8HGvRshkebyp2lnOBSUaGxcfZ5nJmOFgzwyozhRG2BpYwiru
% xxxx EwYK4VHoXIx9OT7i1lnEIUiDMtQyd5gLAwxB0MqM3LPpOPmLUhjRSbtVFjhbIc8PJGimjiaFCQ22
% xxxx QgT9mdrRODr8ZocNFnAzwmVsKw7ljguH7DRSjkseIU9iMeQywoi89tEk6F0nIMnPzJSzdoE5Kpf7
% xxxx w72JVQTAhj6PG+p3hAvGh8B+fuwEhWU6GX219JdB6HZbKhXqWH4vc0t0YswEREiB/rpCCS07OOJ8
% xxxx +8aCvZq7H6TgnasVwspPS+CjbVOPsUVdqnfH0nt1W4sjklRsrRNLXhNLL5BVOEGLJK15PweNAMC2
% xxxx 6B81q68UXZ9PQlFLH6T0DMbkZse7uqd2wTgXjOrAye5jzQ7ZFLjJHkfyydaTgi70nGJIZdiA5gHw
% xxxx suozVgWlVKXJf1YV3pUvSZUpF4Jc9pkhiHYUnse7SFkVbjcCPa1BSfx45kk5qHh4szBUjuk2P32E
% xxxx XWkK0Z0A3puIAVd2368O83gA9kIjhqo/kHDPRh9YLiv3TjYuP8C6Oz4Bh1j5mbqGqMM2SXGChCUD
% xxxx
% xxxx
% xxxx ---- S3.3.3 (was 3.3.2 in v2.0.0) Generation of the Ballot Nonce and Encryption Nonces

\subsubsection{Generation of the Ballot Nonce and Encryption Nonces}\label{sec:noncegen}
The “random” nonces used for vote encryption on a single ballot $B$ are all derived from the selection encryption identifier hash $\HH_I$ and a single, secret 256-bit \emph{ballot nonce} $\xi_B \in \{0,\dots,2^{256}-1\}$ that is generated uniformly at random. As detailed in Section~\ref{sec:manifest}, it is assumed that each contest $\Lambda$ has a unique index $i = \indc(\Lambda)$ and that each possible option $\lambda$ within a contest also has a unique index $j = \indo(\lambda)$. The nonce $\xi_{i,j}$ used to encrypt the $j$-th selection of the $i$-th contest is derived as

% xxxx ---- eq. 33

\begin{equation}\label{eq:noncegen}
  \xi_{i,j} = H_q(\HH_I; \mathtt{0x21},i,j,\xi_B).
\end{equation}
Ballot nonces must be independent across different ballots, and only the nonces used to encrypt ballot selections need to be derived from the ballot nonce.
The use of a single ballot nonce for each ballot allows the entire ballot encryption to be re-derived from the contents of a ballot, the selection encryption identifier, and the ballot nonce. It also allows the encrypted ballot to be fully decrypted with the single ballot nonce.

% xreqj {
  "section": "S3.3.3",
  "text": "EGRI selects for each Ballot a Ballot Nonce by sampling a CSRNG uniformly as `0 < id_B < 2^256`.",
  "sc": "" }
% xreqj {
  "section": "S3.3.3",
  "text": "EGRI computes for each Contest appearing on the Ballot, for each Contest (Option or Additional) Data Field, a Contest Data Field Nonce as specified in EG DS v2.1.0 eq. 33. Note: This uses the \"mod q\" version of H.",
  "sc": "" }

% xxxx YdZAooYV/JrIzw8zqNcVMK0xZ8tRRBH+Td66dmPoh7p9dy0T0h6W0kbNJWQlKyQk2y0GK5Qz8aXW
% xxxx E4fRH/j6NcXllHeUgG4RgL3LEBhDLWdrjVF1EMNSW6a4x9Gs1n/OWYXNVh2xgQ9J6eJ60ZWKLUxn
% xxxx 6PEHMb+eHdqWdX7rfy+7xQNlqh8ix5nm1NJ5EEEV0KlNf3h5StRHKh/AAYchPNYNFiKiXtv2yW+u
% xxxx aC1iikfWjDnkqYx4MyuopWI8nWWuDwBPNla0HV58Q5xJ2YIWAG+uH/6u1r879IN/3NA6MJALkToi
% xxxx +Vb08ugEvd+SJJq2u5cG21AfyZDgZdRU9LSl+Rgc+MyrvcmtT3xnXPv4WL1zAt/HU9uoW7beqNeP
% xxxx 7ezswe5aDbk4CGHGYKgE/MIqBx5akywENve0MXP4ISlT8Rt7zA2RcD9lV9SGF9i4L1JWrhhUXXUW
% xxxx 4QTtqrza9hio2kzYvWaSIvcYTYGy6miC66YD9XsCx4aE1h+J2ZotHdmLmeLSWWpLGXeZb+pEGJqz
% xxxx /7yxz3ltLAlCYq6h6Bh3bxst0TZbdSAxIw1nX7/HGgvad2pwPh2+HuqHtOmIJpIoadmQrYL5cECY
% xxxx EMjmDZsKlidbr4Y88qjhraFiE9HyF/TuWm3CkOiBXwbqKeiNp5i86vnwfEEJCuknIyLg3sCtb9uv
% xxxx M2js4HfDUBsWvBv2i3x5iE1JoChiFBqJqovxn7iQrqghrVeXifHOjYvlyn1yaPRXBpZFBFKO+pp1
% xxxx
% xxxx
% xxxx ---- S3.3.4 (new in v2.1.0) Encryption of Ballot Nonces

\subsubsection{Encryption of Ballot Nonces}
\label{sec:encrypt-ball-nonc}

Since access to a ballot nonce $\xi_B$ enables decryption of the
ballot which it encrypted, ballot nonces must be protected
carefully.
%
Still, they can be very useful in several scenarios. For instance,
challenged ballots and ballots that are selected in the context of a
risk limiting audit need to be decrypted and it may be much more
efficient to decrypt a single ballot nonce and release the derived
encryption nonces $\xi_{i,j}$ than to verifiably decrypt every
encrypted ballot selection on the ballot.\footnote{\EG releases the
  encryption nonces $\xi_{i,j}$ rather than the ballot nonce $\xi_B$
  in order to offer the flexibility to decrypt only some of the
  encrypted ballot selections on a ballot, which can be useful to
  preserve privacy in the case of a risk limiting audit for
  instance. Furthermore, it may offer some (limited) protection
  against a weak PRG that would be used to generate the ballot nonces
  of multiple ballots.}  Some elections may also make use of offline
ballot marking devices that print a ballot and a ballot confirmation
code for the voter. In such cases, printing an encrypted ballot nonce on
the ballot may offer an efficient solution enabling a scanner to
recompute the encrypted ballot selections matching the confirmation
code provided to the voter.

In order to accommodate such scenarios, every \EG ballot contains an
encryption of the ballot nonce using the ballot data encryption public
key $\hat K$. This encryption is computed using the same encryption
mode that is used for encrypting guardian secret key
shares. Concretely, a random nonce $\hat{\xi}_B \in \Z_q$ is selected
and used to compute

% xxxx ---- eq. 34

\begin{equation}
  \label{eq:EG-enc-of-ballot-nonce}
(\alpha_B, \beta_B) =  (g^{\hat{\xi}_B} \bmod p, \hat{K}^{\hat{\xi}_B} \bmod p)
\end{equation}
and the 256-bit secret key

% xxxx ---- eq. 35

\begin{equation}
  \label{eq:master-key-enc-of-ballot-nonce}
  h = H(\HH_I; \mathtt{0x22}, \alpha_B, \beta_B),
\end{equation}
which is used to derive an encryption key $k_1$ by computing

% xxxx ---- eq. 36

\begin{equation}
  \label{eq:derived-keys-enc-of-ballot-nonce}
  k_1 = \HMAC(h, \mathtt{0x01} \parallel \mathtt{Label} \parallel \mathtt{0x00} \parallel \mathtt{Context} \parallel \mathtt{0x0100}),
\end{equation}
which is 256 bits (32 bytes) long and where
$\mathtt{Label} = \bytes(\mathtt{``ballot\_nonce"}, 12)$ and
$\mathtt{Context} = \bytes(\mathtt{``ballot\_nonce\_encrypt"}, 20)$.

The ballot nonce $\xi_B$ is then encrypted as $C_{\xi_B} = (C_{\xi_B,0}, C_{\xi_B,1}, C_{\xi_B,2})$ where

% xxxx ---- eq. 37

\begin{equation}
  \label{eq:ciphertexte-enc-of-ballot-nonce}
  \begin{split}
  C_{\xi_B,0} & = \alpha_B = g^{\hat{\xi}_B} \bmod p,\\
  C_{\xi_B,1} & = \bytes(\xi_B, 32) \oplus k_1.
\end{split}
\end{equation}
The third component $C_{\xi_B,2}$ is a Schnorr proof of knowledge for the encryption nonce $\hat{\xi}_B$ and is generated by selecting a uniform random integer $u_B\in \Z_q$, computing the commitment $a_B = g^{u_B} \bmod p$, the challenge

% xxxx ---- eq. 38

\begin{equation}\label{eq:ballot_nonce_proof}
c_B = H_q(H_I; \mathtt{0x23}, a_B, C_{\xi_B,0}, C_{\xi_B,1})
\end{equation}
and the response value $v_B = (u_B - c_B\hat{\xi}_B) \bmod q$. The third component is $C_{\xi_B,2} = (c_B,v_B)$.

% xreqj {
  "section": "S3.3.4",
  "text": "EGRI for each Ballot encrypts (with a Schnorr proof of knowledge) the Ballot Nonce `id_B` to the Joint Ballot Data Encryption Public Key as specified in EG DS v2.1.0 eq. 34 - 38.",
  "sc": "" }
% xreqj {
  "section": "S3.3.4",
  "text": "EGRI attempts, to the greatest extent practical, to erase from hardware memory the Ballot Nonce `id_B` (and any information which could reconstruct it e.g., RNG state) immediately after use.",
  "sc": "" }

% xxxx hgVkHtHef2PQSU5Qf5fQLHXyqqIKsKcYSAJB1sY6UDUJ4cgMCP0IXmUGsKknllsJnRyy47ohybd/
% xxxx vFxdE4bTOJrafjh6lFYI2KKo8wemcXSKw9P7QUMMAwcnTpvlD7jzgPlMj9/4bDznyzq6a62gaVMs
% xxxx FmJrdfJPYGNRxyPdEai2D1Sycjr+aYTkPj+YIm7LB2OByx68hDZaghsdXa+6zhWnZ2rmi8VWIalU
% xxxx V62Rq1qG/Atbd002Nqc73FgoX+rULswS3SgaAnclSkU5F1sofwfQYLdRIrG6w0cn5JJFYyj9Bbhr
% xxxx l28+7JQN8MAHDlj4xAQrL3avEThWdjs90OBCCbrBv0nhoei8ookbeh8G+1UFdA5VisUfXFkMq41J
% xxxx 0ba6ZDy+xcDrCp8XttjdZos8Tc5p/zvxriNjEvlF4KHgeq4ff9NULdBWFyx9vrXiNF0/m5DcGMSV
% xxxx NMXwJR+7UU2uenGwUrWOoNSqU8mVRhmJot0on5jk68L3LWrOV/YDqUK0o1R41K0bEvfNxEAy3lih
% xxxx A5SPwuez77Xo4wQq5udSMjyA85FvrmIbSJjGIYXCi228VeXi3/gUYMAlvU+eDb91cegdhl5IWR4c
% xxxx ErDFEUIhVT/4J6cjcbQMLBL33jc33aGMnux9kngeYoOXnn1UYuGJ0Ko/RN7CXytWRcxYIZf7X2kS
% xxxx bGgPe9KpxHdJbM+0Xc9HnDYtJ9KImPXkDcapBYSOuR4ldg0o8NUn5aC6llYp9FRC3wtxHYu0ondm
% xxxx CRaOCo/ZVmN5jfvhavu8ziAAjdN9GZtE3lYw6BFl7Xc3urXlzmn1Q22aRsKnz4N1nVsdKCTkunpz
% xxxx
% xxxx
% xxxx ---- S3.3.5.a (was 3.3.3 in v2.0.0) Ballot Well-Formedness

\subsubsection{Ballot Well-Formedness}

% xnote S3.3.5.a This section generates no unique or specific requirements

% xxxx COvt4v0k5WIynOjgKYGsaf00M9nidNKJUd/UCjNNma/uWzc4QAS3FAUphvMQ075gKp4PG3Vj17jU
% xxxx BMNJiX+1rVi5PPLk2RFA22DPsTmlbr2lviNZ4Ho1JsA+pZ7Te5Q7LT5142hCZiBEqFQo5akirAGT
% xxxx 140iS+OhohxMX8UdWvcRNkA5oT8Qwl24hHQSAeNn9BTf4Bn80XQI2UahegkodQ80l1ZJTODQE+j4
% xxxx LmHtn9WYWCzmKFQJZG08GEGC8N1eI8f3NsuaVQA/bIHOArddhwXoD6wEWy1Jo+pWk1HVm9/a67xX
% xxxx p5WQqMxZBqG8lY9wg8E3E0Ic2hX4I72nkD1/mol5cJ6JjkYL55pWa8Rlbc5+kdlXU87n6MsgVhKw
% xxxx oukD/NshPcGWRGdRzMSleUQlNIfc1UJb0aKZ2eITaeSY2IuzTEs/zqwkt54B93KGVq4733h2/Ixh
% xxxx xgTNhcroNBXo8Dy0Bzc7jY8ngpmcv0pwj/keFLo7e7JaKc71prsqg8a7NOi7s+63phLyPSI34g8w
% xxxx JVFZd3hWIa5prQ66mghGKR/cGr8rUm2xeJaO72ys+z3Efj0krY7NGwf1Afyltj2L1MIgAN90Hvu7
% xxxx SAz2r65+b2+GTy5ZakpL5NfSHwvut9u9gV6qcm1o0nyCXSjoEiKB8etzLmXnb3gilWBmReewlFsF
% xxxx j0UE6OU7MftwWGh5BHiRDH27qg7hfq8tmssaCBpdErAk1uHy5R4Abr2pgmj/eQlatIu9Th2JMM1U
% xxxx
% xxxx
% xxxx ---- S3.3.5.b (was 3.3.3 in v2.0.0) Ballot Well-Formedness - Contest and option selection limits

\paragraph{Contest and option selection limits.}
A contest in an election consists of a set of options together with a selection limit that indicates the number of selections that are allowed to be made in that contest and an option selection limit that indicates the maximal value that is allowed to be assigned to an individual option. In most elections, most contests have a selection limit of one and an option selection limit of one. However, a larger selection limit (e.g., select up to three) is not uncommon in some elections. Approval voting can be achieved by setting the selection limit to the total number of options in a contest. Ranked choice voting is not supported in this version of \EG, but it may be enabled in a future version.\footnote{Benaloh J., Moran. T, Naish L., Ramchen K., and Teague V. (2009) \emph{Shuffle-Sum:  Coercion-Resistant Verifiable Tallying for STV Voting} in Transactions of Information Forensics and Security.} Write-ins are assumed to be explicitly registered or allowed to be lumped into a single “write-ins” category for the purpose of verifiable tallying.  Verifiable tallying of free-form write-ins may be best done with a mixnet\footnote{Chaum D. (1981) \emph{Untraceable Electronic Mail, Return Addresses, and Digital Pseudonyms} Communications of the ACM.} design.

% xreqj {
  "section": "S3.3.5.b",
  "text": "Ref: S3.1.3.g",
  "sc": "" }

% xxxx DWD2Q2yLOjX7Fl+SNHKVWkzSiaelzTEwLhPXIaoEU2O7WOK7f6CdooBrrqNM/jbpckLguGyn5B9p
% xxxx CCmNnfKhbfHy/vVfhtT+wh1ozGmnOn8SmMnnFlNlMcLNllFeiu25KX+T1Tt//h0be8fJP36EaUq9
% xxxx U10fcAZJsqz83+lw4Wty2KY1Xtf6C1NHc9k1D94f4Wl4cDOUYGBaxfsb+KeLkWEVDY7TMGzFu/Cw
% xxxx ztx1VrUkR2lXKAAVmS3NI21qnmoK/ZbqpvLI99F5c0TQcz2fyoAga6fnwCF73GCoUa7CdC+OPQiH
% xxxx 4bIUgo1kWZ6Tv6Qxj6YacEXpBLOhFBpiV/9nfL4mI4ChGU4NG8S0acxlE4sjnR6LkR373XKGc8LS
% xxxx OGPPS6uXFbRCA1J09HvS4/jRsk0Ftst+Jsv9ET0DTv+bpch6vs7E0QHdwQdsuiBu74L4aQefhCWe
% xxxx 1ehwSeLfscODnPB959RmC8bFtbyykYyyKY0sz+HUgx8TFRh6wWwD7KiBSVo2pxYjAXIYkwLIEMR7
% xxxx 4xMWc7HSOWxmL9gRPYopOvjUDsX7JhKHJUO5ZkKcyj3A2DgB3kCj3M987fJJejqezUDfiRJVJfxW
% xxxx 7tF0BGRckBRm9p0LPP4JbiBZvQKUeRrzTEcoZI76cI0SFDDd+lPy7yc4gBPIdYNhz9JkNmXMRJKt
% xxxx eRGjl/YeMVuAL/6hVpsPH24QCa8n0h9G7AMGJGm8EW1TNLt8UeaCQabeg0RWgGQDEfPWSpwky+Qj
% xxxx
% xxxx
% xxxx ---- S3.3.5.c (was 3.3.3 in v2.0.0) Ballot Well-Formedness - Undervotes

\paragraph{Undervotes.}
A legitimate vote in a contest consists of a set of selections with cardinality not exceeding the selection limit of that contest. To accommodate legitimate undervotes, in previous versions of \EG (up to v1.1), the internal representation of a contest was augmented with “placeholder” options equal in number to the selection limit. Placeholder options were selected as necessary to force the total number of selections made in a contest to be equal to the selection limit. When the selection limit is one, for example, \EG used a single placeholder option that can be thought of as a ``none of the above'' option. The current version of \EG adopts a different approach to accomodate undervotes and allows the total number of selected options to lie in a range between zero and the selection limit. This has lower computational cost and leads to smaller election records.

% xnote S3.3.5.c This section generates no unique or specific requirements
% xreqj {
  "section": "S3.3.5.c",
  "text": "Ref: S3.1.3.i Election Parameters and the Election Manifest - Undervotes",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.c",
  "text": "Ref: S3.1.3.j Election Parameters and the Election Manifest - Counting undervoted contests",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.c",
  "text": "Ref: S3.1.3.k Election Parameters and the Election Manifest - Undervote difference count",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.c",
  "text": "Ref: S3.1.3.m Election Parameters and the Election Manifest - Null votes",
  "sc": "" }

% xxxx gVZrZXHha0hjxtsuiSa17s+pAxKzcRCvS9XEtYAcxnJagyG3mTkLiZq6l9ZiqEKwn47qEuOluIom
% xxxx 5ojJbZ2L2hCKPdCwDNk5L1lh84fJnQz0t66WBcD7AirqSJjIkfirc26OMMho4KKpnbxGJ8XUlliU
% xxxx bEP3FaZRx7ntC/RJLlguf6266ESLDxDe5rsxC60jwQyGpQTD+7tpzk4ZToBxOG4P1f5QJESevGI5
% xxxx 5HeWT1BoGANYN3Mq6EqivHW1K7pK5U30EFwWXN/mKZv9t3DXbM9CqyO51+dWzcwEI5MlORHAzT0V
% xxxx dgc9rirfc4xJUhgwnU4Um3VNgu5MdFUFjOzBSpf3S42uWwqtmE7tMc5W4LnZftOcXPbvok8myLtI
% xxxx j/AYqS+DoyA+F6DM7dn6Bsul8z/G7Y2QhFdULoXIJiObWbaqFYZLmIldjKYvs/2Y9p+hFfo+5cR7
% xxxx Jav+mSJ5HVzgSQsjKOhjOWm+26aCgPZ36cozG6l1PzV3wv9Vy2c7PfGajt/g5KzuImeJqVBHTkq0
% xxxx mM8LzOmRofN4gbF5SRNBa7lQC0Xdj1TI/saavqD/HI2fe/u/GXvi/RxyP3q4NOVsUTWm3ZCOe1vS
% xxxx +oH/Mdiw5kqmmaGSNZcEYT1nOO4jv5xnqrYTDejV7/pDwJvtAu8oMLhsNJdNUd4NYDB8AYahqwiO
% xxxx 5uTVwXpHjRDX0tTmATi5a3lmPd5EFW/EI5tuODu7jp6f1CE76OikwfU+OniKw/HlUmRdAH0QHgtl
% xxxx
% xxxx
% xxxx ---- S3.3.5.d (was 3.3.3 in v2.0.0) Ballot Well-Formedness - Overvotes

\paragraph{Overvotes.}
When the number of selections made by the voter exceeds the contest selection limit or when the selection assigned to a single option in a contest exceeds its option selection limit, the votes in the contest become invalid as an overvote. To not affect the election tallies, all selectable options in the contest are set to zero (unselected). To record that an overvote has occurred and what specific selections were made by the voter in this contest, this information may be encoded into a contest data field, together with other data such as write-in text. This data is then encrypted with the ballot data encryption public key $\hat K$ using the Hashed ElGamal encryption described in Section~\ref{sec:encrypt_ext_data}.

% xreqj {
  "section": "S3.3.5.d",
  "text": "(Ref: S3.1.3.l) \"An 'Overvoted Contest Condition' is considered to have occurred for a specific Contest on a specific Ballot when the the sum of the selections is strictly greater than the contest Selection Limit.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.3.5.d",
  "text": "When an Overvoted Contest Condition has occurred, all Contest Option Data Fields for that Contest are system-assigned the value of `0`.",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.d",
  "text": "When an Overvoted Contest Condition has occurred, this fact MAY be encoded into a (non-tallied) data field and encrypted to the Joint Ballot Data Encryption Public Keys.",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.d",
  "text": "When an Overvoted Contest Condition has occurred, the specific voter selections for this contest MAY be encoded into a (non-tallied) Contest Data Field and encrypted to the Joint Ballot Data Encryption Public Keys, much like write-in data.",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.d",
  "text": "Ref: S3.1.3.l Election Parameters and the Election Manifest - Overvotes",
  "sc": "" }

% xxxx tiFjMZbzEhielQ4qrIy0Y5wAl5lk97L4E5+xzQWGtsCDLBRtEuV14cnH5Czx+kEn6QlRQZNtS1Vl
% xxxx Lb8YZXOXFKeeYkKXGd/NR/tB+Suwv+bcT6IKjbqpidou/HID6Ja/iuJA8zP76BCb4LLq7+Q3pEn4
% xxxx LnrL/Z+oQB9J0Ka9gb6U2qRPYN5q9Bk8+hlb/Z9m3dgWGQCTohMVtLowNMdtYJXdrGz2BygwaYr0
% xxxx G0NUr7XVhjTRD8koYmbbQppGZkMs2We/MHobESTgk8A57W7DG7UTqAOOQMMlxPz32KytAWKIe/7X
% xxxx alhCgv2k05CKdvpA+vTgSCgqMygazC/G178JFUA/Mhy/QCeiY2P6QZLaFJCoOXgfof7QneweHsCS
% xxxx YqPG4RVPcSx9JraJFewPWEssjvhQErcPu0Ck9Eyrr3les474m1Gw5K8L3iC4pvlG70BwXbYUfPyt
% xxxx G+npe47atQsJBuQGngf1m7Ke+K8zwrrn0AleBjW35ZwU5GjWEKCB49uft9djCHMB9MvsygADkxfC
% xxxx TvXKiLi+s/qDaLL7FP2wDe5bD2GXooFhec9vXH6ZnJVaP5C862fQkB1IwtSib6q/3gnoebuHtnjd
% xxxx hhi93XB2c5pbVf6dim3l6Rur9pQBrF4U4IIR+AdHLr5PgcS/aBf9BlC7LR+eo2f8cMCh2pG1ej0t
% xxxx pVowt3r3Vo37gt6MaOYxbbbVdYEqzCeI18vZ2bQwaK2H3EvgNp5tF5j6yBqW0txjJ+7SiyUwnjrt
% xxxx
% xxxx
% xxxx ---- S3.3.5.e (was 3.3.3 in v2.0.0) Ballot Well-Formedness - Ballot well-formedness

\paragraph{Ballot well-formedness.}
Two things must now be proven about the encryption of each vote to ensure a ballot is well-formed.
\begin{enumerate}
\item The encryption associated with each option is an encryption of a legitimate value not exceeding the option selection limit---usually either an encryption of zero or an encryption of one.
\item The sum of all encrypted selections in each contest lies in the range between $0$ and the contest selection limit $L$ for that contest (usually $L=1$), i.e., it is one of the values $0,1, \dots, L$.
\end{enumerate}
The use of DPP vote encryption enables efficient zero-knowledge proofs of these requirements, and the Fiat-Shamir heuristic can be used to make these proofs non-interactive. Chaum-Pedersen proofs are used to demonstrate that an encryption is that of a specified value, and these are combined with the Cramer-Damgård-Schoenmakers technique to show that an encryption is that of one of a specified set of values---usually that a value is an encryption of either zero or one.  The encryptions of selections in a contest are homomorphically combined, and the result is shown to be an encryption of a non-negative value that is at most the contest's selection limit---again using Chaum-Pedersen proofs combined with the Cramer-Damgård-Schoenmakers technique.\footnote{For approval voting, when the selection limit is equal to the number of available options, the proof of satisfying the selection limit is not necessary because it is implied by the proofs for the individual selections.}

% xreqj {
  "section": "S3.3.5.e",
  "text": "For every Ballot, EGRI allows, for every Contest Option Data Field, to prove that the Ciphertext is an encryption of a nonnegative value less than or equal to the effective Option Selection Limit (e.g., an encryption of `0` or `1`).",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.e",
  "text": "For every Ballot, EGRI allows, for every Contest Additional Data Field, to prove that the Ciphertext is an encryption of a legitimate value (as specified for that particular Contest Additional Data Field).",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.e",
  "text": "For every Ballot, EGRI allows, for every Contest, to prove that the sum of all Contest Option values is an encryption of a nonnegative value less than or equal to the effective Contest Selection Limit.",
  "sc": "" }

% xxxx GWBFVHcktZQcu2xTebaUch6Fb2A3mmQvpPYqdFtu9X78MLZT5yD2tiypcd4WD7GOHL0R4fC+FYci
% xxxx hxvX2rO0DYitWwxXfQ/XErhH4oDzpaAk7DOJbPFNDmFBWzYr+hbT7UGr2zytscQrHA1YKlDs6w40
% xxxx XyBbVgcGgHT6Zu1BzIX/mWYfijEIafULqeSNOAzHyKDlvfUgesCfvzeuJSz0U/23ZYATzrvuUv8r
% xxxx LIp7u+GcX0mcLzL6x4iMhyQQNDkYYnja3J4qHs0HR4Zs0jKtcokPg19uH3CbPaOcUBtqMDUREX5w
% xxxx erFuW8KvZUNl4BYcsJLVitcHn73Zn6MFIHAynKgwOdpIw3OC8Yt5NiAbYKWIpRimsO2ziSSZCMjD
% xxxx q2VBtNyFFWwyYfO0lGojejiNJDN4dNYYbXT5je4oA4Tom8GlBDYnQkTuwzFuK0T9rY9GfvXGpZUj
% xxxx FKQfD11i4Nb/3gOSsIcK0uvctqrXizr9aZI2TClVU8rPw8LC4NjLL1IIIpNAV7ZhFiCKR63xXhtE
% xxxx S0gu9r34JaadZDgdpT1aLqDObH1rrZ6j62sdDQfrq10XXODkpoyE+CZ2jLtZon3DG2whHKxVnvwH
% xxxx sYJO1KzzTv3iFPOFyeax2rXOKlaTrvHCnZMXZyyxoL4d7YcmUAdHEtdNQg2aeD++KR3wGAgzfINJ
% xxxx yW4DJ1GFDYwCya/ni63HFQaSQwWvNQ12H6o4MMAK9eB4cGiMwqirKo7c+C/cVZzSIN9MaKHtB7hv
% xxxx
% xxxx
% xxxx ---- S3.3.5.f (was 3.3.3 in v2.0.0) Ballot Well-Formedness - Cardinal voting methods


\paragraph{Cardinal voting methods.}
A range proof, i.e., a proof that a ciphertext is an encryption of one of the values $0,1,\dots,R$ is a generalization of the proof that a ciphertext is an encryption of zero or one. It can be used to prove well-formedness of an individual selection when it is allowed for options to receive multiple votes in a contest by a single voter. Using range proofs with a range up to a certain option selection limit for the individual option as well as the contest selection sum therefore enables cardinal voting methods such as cumulative voting, score voting, STAR-voting, and Borda count in \EG.


% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI uses range proofs to prove well-formedness of an individual selection when it is allowed for a Contest Option on a Ballot to be assigned values greater than `1`",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI uses range proofs for individual Contest Options",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI uses range proofs for the Contest selection sum",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI can use range proofs to enable cumulative voting",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI can use range proofs to enable score voting",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI can use range proofs to enable STAR-voting",
  "sc": "" }
% xreqj {
  "section": "S3.3.5.f",
  "text": "EGRI can use range proofs to enable Borda count",
  "sc": "" }

% xxxx p8FAWnGWr362N23Nt1IcFL66HOhja5NDPrUZhvZPTzpL7LEuyIuYqtUljMY+UrN4PrM5hDgzDsH1
% xxxx qfTgGFYAhPFlXCD8+sjLErFUHlVVun+xgb8FzOfj7561DqbDcHjTl6xHZRgGJH6OoLMubUxBQNZg
% xxxx Ii2qUX90gdnx50JyPJ2jwf704hur5RYDzOwqwVMdzOtnYlSTyNj0fMrfFGEYnO4dIpl2HWZA+rJU
% xxxx ih2TSowDScztJBndNZLGq04Az9hXiBH6hTzZnoS7+jKm+1AcEsit6tVyiQ9mY40JUynwy/q9SLzN
% xxxx PP3PFdEDd1P6C9dI0/R0rpnIGSVQ6i6THmxMgt4GHf2Ukhg/hIdq0yuH2wLxYoRaJXmPtJdfi+Nj
% xxxx rU6LJjx7m/feiruGuTiqZCbHChDydQK0WQGPykAsTeHfTDr4byEMef6P42yb7jBtOKYBbW/pEYd7
% xxxx cEAhQxqX9p3smViTgU/nKC55JIan29H7s9O8hpx86e6hqVslFKtyysP+wOD+cKs4nLyR+XMv8gez
% xxxx X/ahAW1eRhwgjXEPVfGKJXplNK2vtjrD8r5ZMelwEuK+YQ9qMUjBqhNyB0rXaCVx7HUvxtDQZoL0
% xxxx tLkXqTeoTG18A2ALe3U3JEeSKcvb7bYT+VvoAS0PXxh4MJuS9djTgwG6Vs/qUo1cEf67zwJTiGLj
% xxxx X9uRjXPYVMYtN9O5UUeXA82xQnYKbflTxvvT4cUT7QG+TH7xNw4mbJcQAee/t0SRd+2U1VASgBDp
% xxxx
% xxxx
% xxxx ---- S3.3.6.a (was 3.3.4 in v2.0.0) Outline for Proofs of Ballot Correctness

\subsubsection{Outline for Proofs of Ballot Correctness}
This section provides the outlines for different types of encryption proofs that aim to give an understanding of how they work. It starts with the proof that a given ciphertext is an encryption of the value $0$. Based on that, it explains how it can be proved that a ciphertext is an encryption of the value $1$. It then combines those to arrive at the base case used in \EG, namely that a ciphertext is an encryption of $0$ or $1$. Finally, it shows how the latter is generalized to generate range proofs, i.e., proofs that a ciphertext encrypts a value in a range $0,1,\dots,R$.

% xnote S3.3.6.a This section generates no unique or specific requirements

% xxxx /p8znPOr4QBO37zAwrqQTWEokmUu5C6miFTfPMti/qKYBcEJlKL12bH3bIc3aXsGvy0IMztzyo3K
% xxxx sDPGDOrYL3pPjKc/P1fNuP0oeHLcMVx/KsRar7ze4XNU7241kcRwXRppPWTXpaAHlOIdwNuGZ3Kt
% xxxx MC24xOsUtBWLpps5qE2xftUScY5TaUx6cEYG1d08XfZ32R5nB2A/XJ9JIbTeaibuUqoHT1zTsqfA
% xxxx 9fgmVVV8K8f8IZB56vEjMu18K67P+K9Za9yiVDGLfupe/atvZi00o69Q5yILR9RIFGzj1lkyku0s
% xxxx EHVU1caZ5Em1L4UY/aWf3ZEFtoI1xGoOc3mPq3ow+aBgOLMdNKm0/DpAxWHtaL9CApKXGHMXQmni
% xxxx 902irQ+wsHydmhgDSZbo4POlO1fM2+ERZK2ia7/oNPKEE9WaDHRE1R+FFpL1NbFZ0wATqUDEKwr3
% xxxx pu8A//pYcXaFm84hMORX4MaCj8pNN/qam+hOIDTMdnue0kIxXApyNGuNJyISkvaQNcoHQ4DlzCmV
% xxxx C6ogMsuFNPACKrqYU6FHjdncvORvB7nUDQ1soQTX/VILliO3jsEjhkiFa5h90mj4TzLQoyJ8oRno
% xxxx ZhREuxQvqWAMy04GXX1qhO3Pfxq/hi5Ki+BEF26PMOeJ8mdrobETkfQvDQCOcOkciqLaXlzDMXZa
% xxxx wo/3ptklA/cDG4mbOcAaYYlJ0pil30rW19O9RprrLZalP4P9RqIK0+FAoZw3Xk+CTvrHBNAvfsmA
% xxxx
% xxxx
% xxxx ---- S3.3.6.b (was 3.3.4 in v2.0.0) NIZK proof that $(\alpha,\beta)$ is an encryption of zero.

\paragraph{NIZK proof that $(\alpha,\beta)$ is an encryption of zero.}
To prove that ciphertext $(\alpha,\beta)$ is an encryption of zero, the Chaum-Pedersen protocol proceeds as follows.
This proof assumes knowledge of the secret encryption nonce $\xi$ such that $(\alpha, \beta) = (g^\xi \bmod p, K^\xi \bmod p)$. The prover selects a random value $u$ in $\Z_q$ and commits by computing the pair $(a,b)= (g^u \bmod p,\ K^u \bmod p)$. A hash computation is then performed (using the Fiat-Shamir heuristic) to create a pseudo-random challenge value $c = H_q(\HH_I;\alpha,\beta,a,b)$,\footnote{The actual proof would add to the hash inputs a domain separation byte and other elements of context, like the contest and option for which the ciphertext is computed. They are omitted here in favor of a simpler description.} and the prover responds with $v = (u-c\xi) \bmod q$. A verifier can now confirm the claim by checking that both $g^v\cdot \alpha^c \equiv_p a$ and $K^v\cdot \beta^c \equiv_p b$ are true.

% xnote S3.3.6.b This section generates no unique or specific requirements

% xxxx /p8znPOr4QBO37zAwrqQTWEokmUu5C6miFTfPMti/qKYBcEJlKL12bH3bIc3aXsGvy0IMztzyo3K
% xxxx sDPGDOrYL3pPjKc/P1fNuP0oeHLcMVx/KsRar7ze4XNU7241kcRwXRppPWTXpaAHlOIdwNuGZ3Kt
% xxxx MC24xOsUtBWLpps5qE2xftUScY5TaUx6cEYG1d08XfZ32R5nB2A/XJ9JIbTeaibuUqoHT1zTsqfA
% xxxx 9fgmVVV8K8f8IZB56vEjMu18K67P+K9Za9yiVDGLfupe/atvZi00o69Q5yILR9RIFGzj1lkyku0s
% xxxx EHVU1caZ5Em1L4UY/aWf3ZEFtoI1xGoOc3mPq3ow+aBgOLMdNKm0/DpAxWHtaL9CApKXGHMXQmni
% xxxx 902irQ+wsHydmhgDSZbo4POlO1fM2+ERZK2ia7/oNPKEE9WaDHRE1R+FFpL1NbFZ0wATqUDEKwr3
% xxxx pu8A//pYcXaFm84hMORX4MaCj8pNN/qam+hOIDTMdnue0kIxXApyNGuNJyISkvaQNcoHQ4DlzCmV
% xxxx C6ogMsuFNPACKrqYU6FHjdncvORvB7nUDQ1soQTX/VILliO3jsEjhkiFa5h90mj4TzLQoyJ8oRno
% xxxx ZhREuxQvqWAMy04GXX1qhO3Pfxq/hi5Ki+BEF26PMOeJ8mdrobETkfQvDQCOcOkciqLaXlzDMXZa
% xxxx wo/3ptklA/cDG4mbOcAaYYlJ0pil30rW19O9RprrLZalP4P9RqIK0+FAoZw3Xk+CTvrHBNAvfsmA
% xxxx
% xxxx
% xxxx ---- S3.3.6.c (was 3.3.4 in v2.0.0) NIZK proof that $(\alpha,\beta)$ is an encryption of one.

\paragraph{NIZK proof that $(\alpha,\beta)$ is an encryption of one.}
To prove that $(\alpha,\beta)$ is an encryption of one, $\beta/K \bmod p$ is substituted for $\beta$ in the above. The verifier can be relieved of the need to perform a modular division by computing $\beta K^{q-1} \bmod p$ rather than $\beta/K \bmod p$. As an alternative, the verifier can confirm that $K^{(v-c) \bmod q}\cdot \beta^c \equiv_p b$ instead of $K^v\cdot (\beta/K)^c \equiv_p b$.\footnote{If it is more convenient, the verifier could instead check that $\beta^c$ is congruent to $K^{c-v} b$.}

As with many zero-knowledge protocols, if the prover knows a challenge value prior to making its commitment, it can create a false proof. For example, if a particular challenge $c$ is known to be forthcoming, a prover can generate a random $v\in\Z_q$ and commit via $(a,b) = ((g^v\alpha^c) \bmod p,\ (K^v\beta^c) \bmod p)$.  This selection will satisfy the required checks for $(\alpha,\beta)$ to appear as an encryption of zero regardless of the values of $(\alpha,\beta)$. Similarly, setting $(a,b) = ((g^v\alpha^c) \bmod p,\ (K^{(v-c)\bmod q}\beta^c) \bmod p)$ will satisfy the required checks for $(\alpha,\beta)$ to appear as an encryption of one regardless of the values of $(\alpha,\beta)$. This quirk is what enables the proof of a disjunction of two predicates as described in the next paragraph.

% xnote S3.3.6.c This section generates no unique or specific requirements

% xxxx zRZDVRUMLaasSSWyoSTeJ9jUnqxqR+Dj7pvNTMWq0LvIwTjwHJH5DCyo9Bs5eJgDbi7VrcXDcb0w
% xxxx WKeb2pM9KVgcPcu64iCQq7jEw/RTyugDYY8/CrTFDpvkl7IlPTVTZrtdRnGqNPWhVVQ/YcR4EyLn
% xxxx lwg2Ih0T2n65vU3cHetopZbATOV55ZaMDWbBi3yVAxUk4r3KTAeXj3DFg1Jl+Gdd0Jcj577idzel
% xxxx C3MsaAgidFfnuRlMnPT0XRgiZEBqvSgPcFAjvpPmjNsDO0D18JNlpdcza3dQCStw1PTxfx6LfX3l
% xxxx Wtu25MQGFAt3OmSl/5zPLvNvdG1o2acdJzyar8qa9/H3tk2zSIW2XBl2bagO0q387X0vqvRdxywy
% xxxx v2TfC7gPXc9DqKvGF5UFVzE/SWj8z1coYzc8STxuKwP1bhgsaYz1LpBxBS+LcOWjCX6SH8d73ygz
% xxxx A8fEFMLD6F3nDquKTqsa52VYwdNx3ScUZqO5Idbd1nwfDzNzSNJiDfQeFIFQLdJUl+mjjludPyAp
% xxxx yuh730SRAhZdI5xIvHmKgArr6edpJhEtnYOSyeWgozANPTNKuK/K3tuV4URtcHzJ77oG3GHs+A0G
% xxxx fMCtTih+GjZfeOb7GSN4LxZyEYCqOeGhB5sZyjDl3WngiYkDFqZkPPKDHK7OI/Tq1a0WUp6LOhtP
% xxxx CY4d8uqfaL4bC1L+D6cHWR0T2sHeFbINxR7UeyrIgirGILePinatUS1lEDOyPZ5k6zt3kWFcB0SB
% xxxx
% xxxx
% xxxx ---- S3.3.6.d (was 3.3.4 in v2.0.0) Sketch of NIZK proof that $(\alpha,\beta)$ is an encryption of zero or one.

\paragraph{Sketch of NIZK proof that $(\alpha,\beta)$ is an encryption of zero or one.}
The Cramer-Damgard-Schoenmakers technique enables the proof of a disjunction by giving the prover one degree of freedom in proving two assertions.  Instead of being required to answer two challenges exactly, the prover is constrained only by the sum of the two challenges it must answer. It can therefore freely choose one of the two challenges that it will answer.

More concretely, the prover will compute a challenge value $c$ that it does not yet know, and it will have to answer challenges $c_0$ and $c_1$ subject to the constraint that $c=(c_0+c_1) \bmod q$.
The prover starts with whichever statement is \emph{not} true, generates a random challenge for it, and then derives the commitment from it to be able to produce a false proof, as described in the previous paragraph. For example, if $(\alpha, \beta)$ is an encryption of one, the prover chooses a challenge $c_0$ and a response at random, then derives values for $(a_0,b_0)$ so that the `response' satisfies the `challenge'; if $(\alpha, \beta)$ is an encryption of zero, the prover chooses $c_1$ and a response at random and derives satisfying values for $(a_1,b_1)$. The prover then works on the true part. It generates a truthful commitment $(a_0,b_0)$ like the first part of a proof of an encryption of zero (or a truthful commitment $(a_1,b_1)$ like the first part of a proof of an encryption of one, whichever is true). A single challenge value $c$ is selected by hashing all commitments and baseline parameters. The prover must produce challenge values $c_0$ and $c_1$ s.t. $c = (c_0 + c_1) \bmod q$. It answers its false claim with the challenge it chose in the beginning ($c_0$ if $(\alpha,\beta)$ is an encryption of one, $c_1$ if it is an encryption of zero), then derives the other challenge by subtraction ($c_1 = (c - c_0) \bmod q$ or $c_0 = (c - c_1) \bmod q$ as needed). It then finishes the proof of the true part as usual, using this challenge. An observer can see that one of the claims must be true but cannot tell which.

% xnote S3.3.6.d This section generates no unique or specific requirements

% xxxx yBpr6QUKy+Dw4KC8NcjdWpkPU3Sa9Bw4a/vNWhVlSseDZo9jHzwfeIctU9BzKxeGlnoZS//hx1jF
% xxxx a+ORi/yLBArAJAMb34F+P1vojak3KICjN4fZW0cL7XTjnaN92YUtua2DwiqBkznUVF8Fy0s4OazO
% xxxx Km1IU1rLnWK9c2soTdt15Qq1RzhhTRJtkCzM+593KdSikE/DuKkuV5ylLdUiadrxh2HVkbPeRrme
% xxxx 8hEYmMfsVRCAg0vzX7baVR1D9Ou/hfGExLNpv6U1BGIApaTIXCHiFDgm7o7zDXpBxUoHMtDA69zQ
% xxxx Sx89m8yxwz2GY62AQ4KFzynuyHgNSNOWENhBYTGVtahj34R6qNJeJBI7AxPYmTqDG8xzE7pDnRa/
% xxxx UePolZ9dh1oc5M3jxkbVjodJpcSZsvn1YQeEDg10uQoAFn1J2cgpKL/s/V87EzX3ZfJPsJRf5PbK
% xxxx A7GGJe03hT1yLinHIKEO29Wl3/pp0VNaeNY7F038q3O6EDhbJe0lYjD+cyWTVQARVUS9cmJJ6PS9
% xxxx EbkxdCf+HQuEGDfIRL8PuSKiDkJFz58X7LEB1aUD6Yofy9l90jeEyOX8eDXL8HwCugq7D45SeyxJ
% xxxx T0zXGkVF4H1uA0a3Kwe4bYwxV/cLiOXMINM+JINIz1B/uu3Fr+Vfty3yxCahYTSBCejz5tza5smV
% xxxx Hmp6oMLEJPBzOma5Ecc4/yFZo4n3bhSuJIE35CTTef7DyV9uQfmcqPTM0MfKAzBMkqxT1FhhC1pS
% xxxx
% xxxx
% xxxx ---- S3.3.6.e (was 3.3.4 in v2.0.0) Sketch of NIZK proof that $(\alpha,\beta)$ is an encryption of an integer $\ell$ such that $0\leq \ell \leq R$.

\paragraph{Sketch of NIZK proof that $(\alpha,\beta)$ is an encryption of an integer $\ell$ such that $0\leq \ell \leq R$.}
The above method to prove that $(\alpha,\beta)$ is an encryption of zero or one can be extended to more than two values in an analogous way. Now, the prover needs to produce false proofs that verify for all values that are not encrypted in the ciphertext. This means that for each $i$ with $0\leq i \leq R$ and $i\neq\ell$, the prover selects a challenge value $c_i$ and a response at random and uses them to create commitments $(a_i, b_i)$ that make the response verify the challenge for the false claim that $(\alpha,\beta)$ is an encryption of the value $i \neq \ell$. For the true assertion that $(\alpha,\beta)$ is an encryption of $\ell$, the prover makes honest commitments $(a_\ell, b_\ell)$. At this point, there exist commitments $(a_i, b_i)$ for all $0\leq i \leq R$ and a single challenge value $c$ is selected by hashing all these commitments. The remaining challenge value $c_\ell$ is then uniquely determined by the constraint $c = (c_0 + \dots + c_\ell + \dots + c_R) \bmod q$ and can be computed by subtracting from $c$ all other challenge values that were chosen for the false proofs. The challenge $c_\ell$ must be used to answer the true assertion that $(\alpha,\beta)$ is an encryption of $\ell$. The proof now consists of all challenge and response pairs, including the honestly generated one for the true assertion and $R$ faked pairs for the false assertions.

% xnote S3.3.6.e This section generates no unique or specific requirements


% xxxx YJ2OOQowGysja1F12sUAVqW3H3bG60pwE2WUWP45sQOza4fvlvYOFEB9HsI4CP4A6jDGmzx6ai15
% xxxx xqV91ci1wjkhCXQu0aPERbe69myGOn8MU6L427Omhb06jcXy99KW9COg3UG2F02Gmoiq8L0wZLRk
% xxxx YplhVFIafD30SrRu/JrMtbyMumoIyErzqDKDNBVEKe39gp8z5ILyegzuQus6f6TlbAQGu4cDSvCt
% xxxx c3T0Tc8nax2n7R6+KUj1YdV1UasBmBxP8pSnVeJHRnasHXvYE4zqQcdoC33hUjOD5Y0mEbKF5zI9
% xxxx Ed6MoVvHF3FAxp/zBTIPgyBJKdHI3sfIT/Xs2EiSt4uPx+oruOQiDpceCSvI8pxywxtnkNBeKBOZ
% xxxx 8XcF26x98dhMskhNFUcao5JOdPpf9QHH3GxR/thbTEm9IVkIQlHkk8t/khma/VDYn67Dephi6f3b
% xxxx WlIVoXzR+XNKuIDYIlf5bOALoIxBSnJZNzfh6/EXw6Hp0ihdAZwvkGXT7ZvnpxD8belQg5XlUH5i
% xxxx j02d7ro5QnNu64i18fkIW7/pFEqBriCk9OZrrN6cec5fzRbtLz6oIpN/DBDMXfj4PL9tQAXdw7v1
% xxxx K+mYEDIyyVyjweV/LX8t2bZNRsO9ieYl0JMgZGLOLsvDLvXd49nhC1YwzzrplMZ6zHes0dFcAvRq
% xxxx jQMnwKrW+QyGqegdN+GV7LM+vI5az5t1dFcOmZcYs4MJgShAfLxHxKkwZ+lDiGUTfiGgvlC9TH3y
% xxxx
% xxxx
% xxxx ---- S3.3.7.a (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness

\subsubsection{Details for Proofs of Ballot Correctness}\label{sec:proofsballotcorrectness}
This subsection begins with the special but common case where a selection is either a $0$ or a $1$, which means that the range bound is $R=1$. Both cases---unselected (encryption of $0$) and selected (encryption of $1$)---are spelled out in detail before the general case range proof is specified.  An \EG implementation can directly implement the general range proof and use it in the special case $R=1$. There is no need to implement the case $R=1$ separately.


% xnote S3.3.7.a This section generates no unique or specific requirements

% xxxx OfgbbbdVlu4L+1ssN5v4I33KA/qLfHddhP3szvpNzAiwycEL1vuNzDMjb+ZF6QliGe+zj7B18ksQ
% xxxx NGXwR+R+4OZaV94k8wgR94nhV9wZ6Epoij62y5pc7LVnjW0lcs1QZ3jFaRcx8iqXGIEOnC968ibi
% xxxx yzixzw/pcrfYrrJ3oXbZ1wSrAQ+Yp686ub0jLa3V0K6fe+Tdq3CbZHAkdRQDsHM57xPqfn/4cEwx
% xxxx L8mUeaxBG3bR+vX98xmVU6RhTDDpgHaMQUkudQGRrUeV1ITIm3lLIkgwAZukCXK8Gv33NM4n0tMb
% xxxx cyWZjTMGV+2qdeUYMbatd4toyJWQoOQwKOMbjd0ct76rJtefMTms7795LTQhgeYxsOBrwVvoMUs8
% xxxx lQZ/x+P6p0nGhxDXOnA2PO6LY3QmKiohKngq28+6tsqObJiXszN/Z4jD9Qwmuyv2/B+piIWSAJP+
% xxxx 95zjJDMHP1J1Op31irk1yyJWNnFfc+e91AuduDU6lTxHPRSnuykGPCp6PyaiGzbCcT+GM4BXzUYO
% xxxx qs9s+VgtWpdikwL5XLS+fzotT87/S+JVjSueqTcVtmSsuYNHKMvB0WlOnZUYkO6ihaNIEGLRSNO/
% xxxx 4uZintHBQYm0SIiw2uvfUlbWk7iX2oiYYsPPLKGdoLwthsGpASn2lZPZGsWqIdXaQcvbJpf7jFxm
% xxxx RMHWm7gXBMUTsaSj2FDrD5SUo0I/I/c4C3kdJrTmZwFkUMyRND1OhlC3CMZWiYEAzt1hQp/NtgBY
% xxxx
% xxxx
% xxxx ---- S3.3.7.b (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Unselected option

\paragraph{Unselected option.}
To encrypt an “unselected” option on a ballot, a pseudo-random nonce $\xi\in\Z_q$ for the selection is derived from the ballot nonce $\xi_B$ as described in Section~\ref{sec:noncegen}, and an encryption of zero is formed as $(\alpha,\beta)=(g^\xi \bmod p,\ K^\xi \bmod p)$.

% xnote S3.3.7.b This section generates no unique or specific requirements


% xxxx ebxK8yIuTzPmfT0eN/0f7TqghiCNUUsug5eGvZukGmBSSe1CLVxe1aMkCLsMh8z/Rzl5GtrsoCxj
% xxxx baEJAwqsL6eduGM+knOfcF3kDzPCf6xT0iLCQZTuTlZzniBOR9sHunWOD2hbJLDosqUwtlWiBSX7
% xxxx uW1uiguAD2RB7mJBsfSLzQwxuKHuNzcb526Q01AtbUp9xSq1qFeTx7Eqv1BJPYboIdp+poX4kSXO
% xxxx AqWsDHf4QFt8oB2HPS79/JbjMH+B+SUE9Xz/2DH2eK7BEM7itZXD5zE+MZHMqYxKJBiYYFeXUNLw
% xxxx qgcQGbZE6KwG0P+BoL7fyCC2i9J0vGu+c48an1YL+9q+GrgUOwQdZ7s2r7MjGXxWgH51XvM9m8Bo
% xxxx grrAQLAILfoX2Bijwqu190xb0FOoAC1YMdDheLDEndA6E7/t9IWy4OXC/zCA0+878X9Azk2s7j1J
% xxxx nMwW+Cbuth/cIGqQO2PmROoZg+0GUraSTzhd/utzNo7+uzwnkfaBrLoqC9zSshkZNQRNVUXvZt/I
% xxxx +hbwAp0r0IcloyOcRJ6lTxIeDn6uHWSpPufo/TnbppP7G2QAWFzEx+0mXDR4yutg8HvNu+3BQa9w
% xxxx Su63nDepvDNmNBwS0Vi16Hj2Y78l5ApTaJ/VYQzGUd+xh92oWk4ky8rEKrmxiowQVpGRUh7BihEP
% xxxx ea+f/fEbNkzI8GyE7xed1EK2GzBx3N5mw7s3TQTSuHTEjgNftdSRMsZkhAURoLX/1UP0C9fi/YMI
% xxxx
% xxxx
% xxxx ---- S3.3.7.c (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Unselected option - NIZK proof

\paragraph{NIZK proof:} Proves that $(\alpha,\beta)$ is an encryption of zero or one.\\
(Requires knowledge of encryption nonce $\xi$ for which $(\alpha,\beta)$ is an encryption of zero.)

\noindent To create the proof that $(\alpha,\beta)$ is an encryption of a zero or a one, randomly select $u_0$, $u_1$, and $c_1$ from $\Z_q$ and compute

% xxxx ---- eq. 39

\begin{equation}
  (a_0,b_0 ) = (g^{u_0} \bmod p,\ K^{u_0} \bmod p)
\end{equation}
and

% xxxx ---- eq. 40

\begin{equation}
  (a_1,b_1) = (g^{u_1} \bmod p,\ K^{u_1-c_1} \bmod p).
\end{equation}
When computing a proof for option $\lambda$ of contest $\Lambda$, a challenge value $c$ is formed by hashing the identifier hash $\HH_I$ together with $\indc(\Lambda)$, $\indo(\lambda)$, $\alpha$, $\beta$, $a_0$, $b_0$, $a_1$, and $b_1$, namely

% xxxx ---- eq. 41

\begin{equation}\label{eq:encproof0_challenge}
  c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\indo(\lambda),\alpha,\beta,a_0,b_0,a_1,b_1).
\end{equation}
The proof consists of the four values $c_0$, $c_1$, $v_0$, and $v_1$, where $c_1$ has been selected at random above and
\begin{align}

% xxxx ---- eq. 42

c_0 & = (c-c_1) \bmod q,\\

% xxxx ---- eq. 43

v_0 & = (u_0-c_0\cdot \xi) \bmod q,\\


% xxxx ---- eq. 44

v_1 & = (u_1-c_1\cdot \xi) \bmod q.
\end{align}
These values satisfy the proof equations as follows.
\begin{align}

% xxxx ---- eq. 45

c & = ((c-c_1)+c_1) \bmod q = (c_0+c_1) \bmod q,\\

% xxxx ---- eq. 46

(g^{v_0} \alpha^{c_0}, K^{v_0} \beta^{c_0}) & \equiv_p (g^{u_0-c_0 \xi} g^{c_0 \xi}, K^{u_0-c_0 \xi} K^{c_0 \xi})
\equiv_p (a_0, b_0),\\

% xxxx ---- eq. 47

(g^{v_1} \alpha^{c_1}, K^{v_1-c_1} \beta^{c_1}) & \equiv_p (g^{u_1-c_1 \xi} g^{c_1 \xi}, K^{u_1-c_1 \xi - c_1} K^{c_1 \xi}) \equiv_p (a_1, b_1).
\end{align}

% xreqj {
  "section": "S3.3.7.c",
  "text": "(Ref: S3.2.3.j) \"EGRI encrypts a Contest (Option or Additional) Data Field value as specified in EG DS v2.1.0 eq. 31.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.3.7.c",
  "text": "EGRI encrypts a Contest (Option or Additional) Data Field having a value of `0` as $(\\alpha,\\beta)=(g^\\xi \\bmod p,\\ K^\\xi \\bmod p)$.",
  "sc": "" }
% xreqj {
  "section": "S3.3.7.c",
  "text": "EGRI computes an NIZK proof that (\\alpha,\\beta) is an encryption of `0` or `1` as specified in EG DS v2.1.0 eq. 39 - 47.",
  "sc": "" }

% xxxx O1+7DxKkxgkZQXrU7EbEpihlYO6c886dDsbEAhKPJI3I1kvQnoasf8hkp+UzJWn+8UesaaTHolrl
% xxxx f7BOUy5kTgE/ob0R54T5uxr3PM+5OyQjXmn9xRdP9ZOwJx0bLTFxRYS/ANARBCRIUFuH51k6SSib
% xxxx 16bM5FAApzACHGahxHIyIfIqEmnWgU0ILyio4Bsoeo35m3ggjgMjCRfreXnc4ug0Z7fTfpEQmuqq
% xxxx N6eXP0L3dco9noPhrZXf1HvW0QhKk+heGf4kjzN9wC6gb7Hnl6p48e19hB3wbCqaaRYVUYJW0Dwl
% xxxx u0IgU55Zry6Bku5FZ7pUTCsBhiT/386i4cEuxCCjrx1ztu03dipRdwoVs07CncDHWdMUDzWarM8w
% xxxx Dn1eSJLkKXKUHXoFU59pYXjYeYEUosCoIJKEKJRct+Bz48bNw0jYM+S5hJafqMhdkkJqNHRIRc5d
% xxxx HtbR6SRHV63Bqi3c/KHivMlhDs7dE+Z5azlD7J1w6x4oEk6fmWZrizJrL7XpqanAql3UdeK3d9vN
% xxxx Me/9cq5HzAifacDeQGzGgaYjKtD8QmFsujucMeW81gl8HioH4JhDWuZW9Qf2Yr0B0xX7ZPcmMzWy
% xxxx dpq1Lh/qMRIMTzpn7OAy/SJGsThVO9iZQ4JS1+JCYVb9j5lkJXzX+3F46favVGjJCuqIpcge6H/F
% xxxx Mh+ziPoJhPoydRKWla8W1cn8594opWuG9i5X1AqhUhXx5W7PQ5lYpdK7LLe787HYkxfijC4kFwxx
% xxxx
% xxxx
% xxxx ---- S3.3.7.d (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Selected option

\paragraph{Selected option.}
To encrypt a “selected” option on a ballot, a pseudo-random nonce $\xi\in\Z_q$ for the selection is derived from the ballot nonce $\xi_B$ as described in Section~\ref{sec:noncegen}, and an encryption of one is formed as $(\alpha,\beta) = (g^\xi  \bmod p,\ K^{\xi+1} \bmod p)$.


% xreqj {
  "section": "S3.3.7.d",
  "text": "(Ref: S3.2.3.j) \"EGRI may pre-compute the encryption of a Contest (Option or Additional) Data Field value of '0', and then convert it to an encryption of `1` if needed.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.3.7.d",
  "text": "(Ref: S3.2.3.j) \"EGRI encrypts a Contest (Option or Additional) Data Field value as specified in EG DS v2.1.0 eq. 31.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.3.7.d",
  "text": "EGRI encrypts a Contest (Option or Additional) Data Field having a value of `1` as $(\\alpha,\\beta) = (g^\\xi \\bmod p,\\ K^{\\xi+1} \\bmod p)$.",
  "sc": "" }


% xxxx r83uczW1gXvsRxhgzrlwunNLq+2r81UgnBeQAxHL+f4XJNWukuMCTllME71MwRahvJ40SAI7Hz9j
% xxxx 2fXlFQoQHm683lJKdj6qV84fvd/hZdvenQsSVPiPP8kuLho9+NfKMJe8kBPt11QmxiNqJDXUPltv
% xxxx SejqUjTEXnSwke2OxUeTS9TpGPqo5djwKxRIvlkHT2Te06/l90yP3JikxFzYpPWVbcJKm3jIeQ9f
% xxxx tX9ehAj+xMIJWCcfZC9a+c2Ygl6w9RYTot1W8d4shoHAbRAVa4SwBEH+9M6WcKsXML1+wrBlsp5T
% xxxx 8ZGf4C4nn/f5A3VpOyFGqtUBqJvNSKhGNzc8j0y4G5eZVP+JzS7l8tlm/tBzD6J71toPOeGLvkMS
% xxxx Wgzo6++wq12b3g7stWDZHVgX1Idf1NJpRPAoftpEoRekf3VeyDQmXIh0vBXvXhKVUlYnJenNDwFh
% xxxx wiJU4kpBBp5rMh2x8MUiuL/aI+o5eKfRekfdyCo49uAMJNxdSOekZninngES8bb234OoCufXvo8g
% xxxx 4Y43yUs9LL0AWkhx0t3SlOp4mR/xb/TZP3SEYHxSp844g+2bj67yQ5bNULWEgHFEOVLW3bw3ZkVa
% xxxx RX1cbfZUmHUbgGhpLOoaiFO9fgsER+8fTGzvR50p4PSulH5yDgOlilN8L5Ve8RwRZel4J31I01MZ
% xxxx XZsRTZlabD4l5U5eKOggsDFqsulcTjxUh95A/ZBUBxQFvQe+FkPY7FBN46g8ri7vzCgC3U+2NSsM
% xxxx
% xxxx
% xxxx ---- S3.3.7.e (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Selected option - NIZK (range) proof

\paragraph{NIZK proof:} Proves that $(\alpha,\beta)$ is an encryption of zero or one.\\
(Requires knowledge of encryption nonce $\xi$ for which $(\alpha,\beta)$ is an encryption of one.)

\noindent To create the proof that $(\alpha,\beta)$ is an encryption of a zero or a one, randomly select $u_0$, $u_1$, and $c_0$ from $\Z_q$ and compute

% xxxx ---- eq. 48

\begin{equation}
  (a_0,b_0) = (g^{u_0} \bmod p,\ K^{u_0+c_0}\bmod p)
\end{equation}
and

% xxxx ---- eq. 49

\begin{equation}
  (a_1,b_1) = (g^{u_1} \bmod p,\ K^{u_1} \bmod p).
\end{equation}
When computing a proof for option $\lambda$ of contest $\Lambda$, a challenge value $c$ is formed by hashing the identifier hash $\HH_I$ together with $\alpha$, $\beta$, $a_0$, $b_0$, $a_1$, and $b_1$, namely

% xxxx ---- eq. 50

\begin{equation}\label{eq:encproof1_challenge}
  c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\indo(\lambda),\alpha,\beta,a_0,b_0,a_1,b_1).
\end{equation}
The proof consists of the four values $c_0$, $c_1$, $v_0$, and $v_1$, where $c_0$ has been selected at random above and
\begin{align}

% xxxx ---- eq. 51

c_1 & =(c-c_0) \bmod q,\\

% xxxx ---- eq. 52

v_0 & =(u_0-c_0\cdot \xi) \bmod q,\\

% xxxx ---- eq. 53

v_1 & =(u_1-c_1\cdot \xi) \bmod q.
\end{align}
These values satisfy the proof equations as follows.
\begin{align}

% xxxx ---- eq. 54

c & =(c_0+(c-c_0)) \bmod q = (c_0+c_1 ) \bmod q,\\

% xxxx ---- eq. 55

(g^{v_0} \alpha^{c_0}, K^{v_0} \beta^{c_0}) & \equiv_p (g^{u_0-c_0 \xi} g^{c_0 \xi}, K^{u_0-c_0 \xi} (K^{\xi+1})^{c_0})
\equiv_p (g^{u_0}, K^{u_0+c_0}) \equiv_p (a_0, b_0),\\

% xxxx ---- eq. 56

(g^{v_1} \alpha^{c_1}, K^{v_1-c_1} \beta^{c_1}) & \equiv_p (g^{u_1-c_1 \xi} g^{c_1 \xi}, K^{u_1-c_1 \xi-c_1} (K^{\xi+1})^{c_1})
  \equiv_p (a_1, b_1).
\end{align}

% xreqj {
  "section": "S3.3.7.e",
  "text": "When the effective Option Selection Limit is a value other than `1`, EGRI computes an NIZK proof that (\\alpha,\\beta) is an encryption of `0` or `1` as specified in EG DS v2.1.0 eq. 48 - 56.",
  "sc": "" }

% xxxx 19PO5ylaP5dX/lEQ8omMp0PPrTQaozLrHWmwOUNF9R4mXtlgDi7lL4+8yMKahjmp8b1gs4Ixwjsy
% xxxx RTlDQSFY2nWeLM6JqSm747o7oC020wsCdLjYz7KkToV4v+c17H0f80zdWot5k+PZgCCJZNJ0aQ7U
% xxxx dP2dReOBnQV5FN+6mpYZm7BsC9j4/veZ/OleaMQhoQWJ9SooKoC4QhFeqvzs/VXtvicwzhqlzL0p
% xxxx 7+absYRLvYifeDZZUNVbc7r+rrSJgxTDefbePBpu0YtXLgevW+IY7Nk2LVxkoMp6+URX9XLYfl77
% xxxx W49qXUFGf3hrsVZ8BEzim5JsoOgh6QzAJGx4aNjmI1PYiqQ8heO6kunNsjN5L6SQ6ILADg/1ckiz
% xxxx CPTATkNtFQmAf6jlXx435u/ayQTh63gkx2EkG6zYQvOXFhi7M2OlQhGA8Fiv8y3i8d1taeQ4YtXi
% xxxx uULwrFBkFI7TBhNiUskM5oOCu2cZlty6SCEnyV62V1dqwgiCPicqH9OWKVuGFECErbGwhh018D9+
% xxxx wDxJgWrk57RyvSPlHxmGDP0GCBUMQ6yCLKTU/fCVYgF3Cn+xBcx7WIaENWOmzrgG3w7GOpXUY2ee
% xxxx 92A52mdPLs2rPmJO0JLqOMmP7y8uvw9m3hN6AYpmcGwO7GTjkfnq7RFtI3Ww4ps1gFFdRdqryMd7
% xxxx LdB2Kmc0ZNHdMfKHZ5cVrJ3tb9BkI8Dk17XhOs7kjJ4aT33m9qhxw94D/BZhTl9OoMIbFpC7pF31
% xxxx
% xxxx
% xxxx ---- S3.3.7.f (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - General case of a range proof

The remainder of this section specifies the general case of a range proof used for encrypting a selection. It is a straightforward generalization of the method for proofs of encryptions of $0$ or $1$ described above. Any zero-knowledge proof that asserts a ciphertext $(\alpha, \beta)$ encrypts an integer value $\sigma$ in the range $0, 1, \dots, R$ for some integer $R$ is computed in detail as follows.

% xnote S3.3.7.f This section generates no unique or specific requirements

% xxxx LYW0DBACEbCF2GXAujh7jElnF6xSGdfz1dc2pTS6QnaJuoFj3RB7yjx3BtQUnD4LAwjDdxAYrxZT
% xxxx PThT4ZdJtcz+iNytYYr9YhkBX3i2MfjbyJTyotx6B2EhaxLZHssjD80UzQ+HOcBrtlHJ21HI1Xk8
% xxxx t0rh1r0gRdlAB5eX45r8VJwJqBcimkCygo9oMLj/mS2BM6+/AZKfxKq03sEvu8AKkSM7R621I+4A
% xxxx 5fBzaHZ6Q4F5fgY8TCRLHdvtVZPKM9DIQWEuvJZmcrKcn9Rm2KzleWKaptFEETeqnclaDNDXZ4eT
% xxxx lUHV7UiUlOIY/Xo7klE8K1wS+YQxCuPkA6CmgS+dcWYo1D/vj6LUwVCxfxEsv0tBrUirYDGI8T+j
% xxxx xvmSfAvLiZddx0tMQwB5v4qzPD3GeaOjCR70Y9eQXMyQ0p0jePc/5X+tiF710e+2z13EpEbKPROZ
% xxxx XuKRkCNWt4UIXujTA+Gv1RSs0iXcNeaypD3Iz/h3v6MLdqjp+TJioxg8T0Z6sfMOAui85Z7mr0w4
% xxxx 2wXBJrYOe6oAVBnIz6ZBN7a7QG4dVTPRFWAryHMu0IZuZLy5n0ATrU0zpWvf8Pj2YJH67N8i+t+W
% xxxx d4J+PAFPRLhse4o9VctycQVcDKwCv1n4XAK2vvlGDKZ7P+locMcmr/5PYkKlICoyjqeEWxFBEEzH
% xxxx m1tu6oTuKmCb6Qu0bza8gHlWo801Yqe9Vnjdr4LcdqZqzfXjGpmQVkYmVYpWA6lM5x7KvN+eRhfT
% xxxx
% xxxx
% xxxx ---- S3.3.7.g (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - General case of a range proof - NIZK proof

\paragraph{NIZK proof:} Proves that $(\alpha,\beta)$ is an encryption of an integer in the range $0,1,\dots,R$.\\(Requires knowledge of encryption nonce $\xi$ for which $(\alpha,\beta) = (g^\xi \bmod p, K^{\xi+\ell}\bmod p)$ with $0\leq \ell\leq R$.)

\noindent A disjunctive Chaum-Pedersen range proof of $(\alpha,\beta)$ being an encryption of an integer in the range $0,1,\dots,R$ is produced as follows. First, for each $0\leq j \leq R$, a random $u_j\in\Z_q$ is selected. The commitment

% xxxx ---- eq. 57

\begin{equation}
  (a_\ell,b_\ell) = (g^{u_\ell} \bmod p,\ K^{u_\ell} \bmod p)
\end{equation}
for $j=\ell$ is computed from $u_\ell$ alone. In addition, for each $0\leq j \leq R$ with $j\neq \ell$, random $c_j\in\Z_q$ are selected and commitments are computed as

% xxxx ---- eq. 58

\begin{equation}
  (a_j,b_j) = (g^{u_j} \bmod p,\ K^{t_j} \bmod p),
\end{equation}
where $t_j = (u_j + (\ell-j)c_j) \bmod q$. Next, all the $a_j, b_j$ values are hashed together with the contest and option indices $\indc(\Lambda)$ and $\indo(\lambda)$, the ciphertext and the selection encryption identifier hash $\HH_I$ to form a pseudo-random challenge

% xxxx ---- eq. 59

\begin{equation}\label{eq:rangechallenge}
  c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\indo(\lambda),\alpha,\beta,a_0,b_0,a_1,b_1,\dots,a_R,b_R).
\end{equation}
The remaining challenge value $c_\ell$ is determined as

% xxxx ---- eq. 60

\begin{equation}
c_\ell = \left(c - \sum_{j\neq \ell} c_j\right) \bmod q = (c - (c_0 + \dots + c_{\ell-1} + c_{\ell + 1} + \dots + c_R)) \bmod q.
\end{equation}
Finally, responses are computed for all $0\leq j \leq R$ as

% xxxx ---- eq. 61

\begin{equation}
  v_j = (u_j-c_j\xi) \bmod q
\end{equation}
and the proof consists of the challenge values $c_0, c_1, \dots, c_R$ and the response values $v_0, v_1, \dots, v_R$.
Note that a range proof can be performed directly by the entity performing the public key encryption of a ballot without access to the decryption key(s).  All that is required is the nonce $\xi$ used for the selection encryption.

Specializing the general range proof with $R=1$ and $\ell=0$ is identical to the proof of the unselected option above, i.e., the ciphertext is an encryption of $0$ or $1$ given that it is an encryption of $0$. Likewise, setting $R=1$ and $\ell = 1$ is identical to the proof of the selected option.

% xreqj {
  "section": "S3.3.7.g",
  "text": "When the effective Option Selection Limit is a value other than `0` or `1`, EGRI computes an NIZK range proof as specified in EG DS v2.1.0 eq. 57 - 61.",
  "sc": "" }

% xxxx u4RAwwNqcaBfmaUVbbTi0ZC/Z39SeG4XytijB4P8UDCAzeZTEgoGC4WFN6HYVgzSAOaycyvqCj6l
% xxxx qaj6Ox+sV9R43eSTawgtI6lfHL/K8enHxEcwTvmS36ti04fuxLAqdFVwd8/K4kABqMGDcSDU6psF
% xxxx BTveC1IIRzQY//QAXYTQVsC1viw4caForFNat2h6r7icZa0zeTKO5W1LAkbr07tnh8sGd7k9AIQl
% xxxx emxqteQDvYBHBJCcEjk9sKauMKbCjRkYp7R+Denj4t0QhokidR2miNklZeKb1vJOc6EKBE5DJ0EE
% xxxx QSRK36eeOjqxhdPxrGt8SEZt5n8yWwezblJsE9sMOLUsvibAIUDa71ot66rFQJsPl/OLklc4LSMF
% xxxx 0mHc6X/7M1aKeiJcKQ6CzUkMe4s9b6xGqRiBHRdt6OfExZPXWNIv8cK0G1+X1mGP2RXdYVN8oZog
% xxxx JNsz0Z2Uk5vahLxd7+/uvtZ6JRL9joy0lGkPVT1/aHw3z06BVTLtvO7LqBN2q01Mf6TKtmvIBIxX
% xxxx 9WukweHI8LT4QN0cLcTFj9gJTiGXrG82qIbKiKOA1kZ+73+ciQHks8TjkW2uzj65P/TEr58owU57
% xxxx Mi64GeMI6FsmIbAiRBNbZHrn8AlYJI/Sf5+OOKkAki5nGXxuVxf175YHUG7fGvz5Ak/hrimWf4G6
% xxxx 0UC+p8MuVZRGIyws0BT19ajdrfxZ9pZTkpYuE2cpJdydPxyOVHj7XqsinKUTuWstsGWaudyhFM6D
% xxxx
% xxxx
% xxxx ---- S3.3.7.h.n3_4 (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Note 3.4

\EGnote{\label{note:setproofs}
One may observe that this proof makes no use of the
  fact that the encrypted integer $\ell$ is within a range
  $0, 1, \dots, R$ of consecutive integers. It is instead simply a membership proof that a ciphertext is an
  encryption of a value in the finite subset $\{0,1,\dots,R\}$ of the set of integers modulo $q$.
  This set can be replaced by any other small, finite subset, for example, $\{0,R\}$ or $\{0,2,\dots,10\}$, if the used voting method only allows integers from such a subset to be assigned to a selection option.
  As such, the proof can easily be adapted to
  contests in which voters are allowed to make a null vote (no option
  selected) or to select exactly $R$ candidates, with undervotes being
  declared invalid, that is, $\ell \in \{0, R\}$. In such a setting it
  is sufficient to only compute the commitments $(a_j, b_j)$,
  challenges $c_j$ and responses $v_j$ for the values of the index $j$
  that are within the authorized set and to ignore the remaining
  values of $j$.}

% xreq2j S3.3.7.h.n3_4

% xxxx gO1E4BWXkct3xqMRzvc2jfOWIQF55hzfK3XWsttKnlFlyVVygSs8gd0VToV8nAUTFe2o68W3XTGQ
% xxxx 7aTBo+tZpCwLa2lCSL3CGF0FeTnY4exXwRl6RHz/RNovdnPD1IZM3gq4roRi5lPGSCcAjMTBCrFD
% xxxx wgyVCfB2sY39hdKVK2O0TjOAYZnqWAmGvx1LpX+VLmtZ/UVK6V3klIP4rjwpb1Tll5xVJrlYFiYP
% xxxx MKjtTsb56NPePglcSZ0HVvy5ngJn6To12ppBJOu4Awos6KyZrpQRkwiSdpUXsQvHEwxBBnVHtedF
% xxxx +4o+3z9JN4L+7c7RHIs+No0k+cRqh0BcONJqMnE/QDvI4UO1jxMTe6N97H3B/73NpGevqVlObNYE
% xxxx kyRGAnLRFbjMPxVTrZ7i2/dU+Yl1skQBKAKcRHIlJLYi/IYKvkAGiO0E+nwZQqtlbaCENL5g9GGv
% xxxx L/249SF0HhDLIslpn8vHVY5XeDz8ZRIPOMhJFor4Bgpst9o66YzvzuW2clFvQNJbVh0o8BFMKoiu
% xxxx GJKlvt7j0FWDzVgGH0W2HeyQFbf1x3Ux5/2v+w0aOdg1BfIZjQ3Axry3eFameQ9vrTtJ1ClXv/ZQ
% xxxx KHF8qebnzPqHoGoqrMmjlRaFsrUz2fRhacNiuyoxbv2ZQ83vBH52R3baip/BTO+geUKEgfSvTAqJ
% xxxx 8N8XdCXVuwpqxrq4quJ9uioduT8QL+R7VXK+Fv7fuWe4I512EAHyQO0EzXFOs8e8ePATEqi3akTa
% xxxx
% xxxx
% xxxx ---- S3.3.7.i.n3_5 (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Note 3.5

\EGnote{\label{note:expotables}Because all the exponentiations required to encrypt and prove ballot components have a base of either $g$ or $K$, implementations can be optimized by pre-computing tables of powers of these two bases. Use of these tables can be further optimized by computing and storing the table values in Montgomery form. This technique can reduce the time to encrypt a ballot by an order of magnitude or more.}

% xreq2j S3.3.7.i.n3_5

% xxxx UxPV701jhPKHicn5QaSixbmr8TArq21cjRzIX7ZLA+8wpfkZ7ODG99QhoU86BT9WI92SNFrE4GKC
% xxxx ztFNzaINM5VhVv2987DPpP1SJh2+mw//Ugx32LqcQVn0IL3t1RXcz3hwYDJLxAlUVti+qe20Sewn
% xxxx e49/HmK8EnVbl881MWvppkTNwo1ZMqKHS9cCDs66RcE1Lk0eJqtNPEqnCME1VW1+Nm94ZuVggDZ9
% xxxx /jQgCGu6l2AihuD9OR7H/r3GQxOTw4JnQWsp7W24apk3LvFb1M4hEHCLliaBl8OosAtqsnZ/o478
% xxxx IXC7cF4Ay4wJgyUcj19q8Je+eYZa0aCjjXF9WRvnoy+94bSsGHwl67LEzbHx7y2HV0/IRWIP3D4M
% xxxx wmKWn4ouq+ZlQ8J0EXUxdsFXRzLbjs/tpEsMSX8OUZZki851E+GPwdjcNAgV7EA24oZuUldNJ13d
% xxxx p5sYtnPM0tjVlrgXl1R+wSnhQg2jD3y+O1Fd8Iv+GakAVDvSVNG/I9kwQq8S39RRC2tf9q/EbDvd
% xxxx zigsXCPu1fp7QzvZOEGsr6PMg76mRR7LKCEJgcZ6uEXVg2vJvL19thocvVdfnAO+CZV82WV5acWO
% xxxx cLj61i0G/MU+twk6e2XFD8CFvvlKVlPA3q5nxmhlRghoIvGMNitX5kFusS1TqYZey1L8eFZmZvIC
% xxxx Uow1WD+PjrkeFDTjioG093an8bZlsrKqs8+XA6jGhZG81pM19+GRwlRJ4gt4+W5zZ4iujE2JPSpd
% xxxx
% xxxx
% xxxx ---- S3.3.7.j.verif6 (was 3.3.5 in v2.0.0) Details for Proofs of Ballot Correctness - Verification 6 (Well-formedness of selection encryptions)

\EGverif{\veriftitleCorrectnessOfSelectionEncryptions}{\label{verif:selection}
\veriftextCorrectnessOfSelectionEncryptions}

% xreqj {
  "section": "S3.3.7.j.verif6",
  "text": "TODO: Verification 6",
  "sc": "" }

% xxxx xnmYI0yDHiCM6+MSzmuECndzDDCxaWXHxVeqQYPBhOMRLmgOC7a86lPCDT0xkeeLWVPNeh+9Glx7
% xxxx SaXlpZ6ezmKjcCcwEcPFYfzs2yNLTdGaBWPwFi80zNp3j+M35NuJimzTJjlmbNt0F/fINCkTF07N
% xxxx RXsRizkVqLXFxt6IGVkld+7IPxPPgYJEBGBdKWY47Go08G28feEtg+nmlzDKJRQwRhpXmjOqMk5E
% xxxx r9ftO551TK6snvk+jIa1oM+qvT89ljM5xrdReAJZIMhV7m56myZLtqcMQFYnwzzsPSmP7RAN6HJS
% xxxx 5HjS+Mel+eaUFQukjWQX/B5GKqAG7qizDwe15wtUKPtfaGge2xMro+hCLY2lAvfIAu1SpOYkT5Jm
% xxxx 70Z/nzZTG3rp1E019Fe1OAj0hvKn+qY4gwt2l9KRDl0M4Kjaa0xUdAQQrEnf3tuCOAmQKqEpMpfr
% xxxx G2ZnVKFkA6IibCK1TNyq1wulO6zXd9wYjWWU1sIdttaHBBQyOhNnCpEysML+/IM5RMwvVYnWYdLk
% xxxx cbq9yAyhANIUkULf/y+WBGB5rf7NGkyO5qV7mTCONmbPH7ga6y6g1EC1jI8deJ/0XKKwymmNKMII
% xxxx 4NaST4DqXDTVGo/UETbu36fruseiPV9wKDNevfdURZxYZEEOgAPIbt/5JGZx4Oiw4pXL2NFSP3rb
% xxxx ws7JbQ6h7hzT1rZSbTU5xGyZ54CGpA7YbqYU7c7Y/Mc5TIPngXPFa0ZTbmMWpSczcqILitY1oic2
% xxxx
% xxxx
% xxxx ---- S3.3.8.a Proof of Satisfying the Contest Selection Limit

\subsubsection{Proof of Satisfying the Contest Selection Limit}\label{sec:selectionlimit}
The final step in proving that a ballot is well-formed is demonstrating that the contest selection limits for each contest have not been exceeded.  This is accomplished by homomorphically combining all of the relevant $(\alpha_i,\beta_i)$ values for a contest (as specified in the manifest) by forming the aggregate contest encryption $(\bar\alpha,\bar\beta) = (\prod_i\alpha_i \bmod p,\ \prod_i\beta_i \bmod p)$ and proving that $(\bar\alpha,\bar\beta)$ is an encryption of a value that is not larger than the total number of votes allowed for that contest (usually one). The simplest way to complete this proof is to combine all of the pseudo-random nonces $\xi_i$ that were used to form each $(\alpha_i,\beta_i ) = (g^{\xi_i} \bmod p,\ K^{\xi_i+\sigma_i} \bmod p)$. The aggregate nonce $\xi = (\sum_i \xi_i) \bmod q$ matches the aggregate contest encryption as $(\bar\alpha,\bar\beta) = (\prod_i\alpha_i \bmod p, \prod_i\beta_i \bmod p) = (g^\xi \bmod p,\ K^{\xi+\ell} \bmod p)$, where $\ell$ is the total number of votes cast by the voter in the contest. A range proof can then be used as above to show that $0 \leq \ell \leq L$, where $L$ is the selection limit for the contest.

% xnote S3.3.8.a This section generates no unique or specific requirements

% xxxx 9zUoFL+tVF6fcFa+UhZ6jkovL7cP5iwbRmmAoxgSE+EpjkEn0Ahx0IbCPKdEvchCQ1swSGGSI7zZ
% xxxx 15YRzKw9+6GwiHnEhMSnNRupjF0ydMIrY2UmVy+I62ksb+tAt3cPRz8ROAobmUOoUim1wgV9L5+C
% xxxx Gs4IYmNLDi5oAyrCnDSP+C8ba1+mLr0BVPDWt1y0bhM4wSCVrh5pvA7VOjNKYYUKWUHLtAq//l3H
% xxxx tgYKE9JC2jW68aI2VjTk40Yujqjw4lSBrC/mhCCWvSv4he5huzL748nR7UFs4BX9nYI5vdkRY86k
% xxxx quq2RAMJcML75bqYmMQlt+tVcv6ztmpm5d/AAH8yMORc6u1Bea1+vm9SWHtthOOXxNC9AABnn1Hu
% xxxx nc6d/wfsTE9f0iv8kVws+GHY+DNm9KP9Z23A0SWWliJQRO1L48oVJAHHwBp4wM/6BHtCeCk6x7tX
% xxxx V3mxwqH66U65g0KxEGj2Rj0bdYj1pZiYOW4sn8HJi8M+l0DAXlBTg3aH8buD+l0I4tVPI8Rs3xi6
% xxxx /UdX7dWAykohww5goq1yXD2JxBGd9kzOA/699xdd1Khp+iVblvulqBOAbt5rf5D9G52xzkbBs3bH
% xxxx FsJUF7j3bgNG4jYVH8bQTei4L/HRNVYCDK9sAweoqC+yn3/4HfQjRKDbngJbZd2bbMscSPsHxwTL
% xxxx PSkRsegxJpKfvt7H1ATZIYmXA3ZTBApZmZdwXL/OoegYSKTrwkqdlpIWGk5GoWU9YS3cQKKZpH2g
% xxxx
% xxxx
% xxxx ---- S3.3.8.b Proof of satisfying the contest selection limit - NIZK proof

\paragraph{NIZK proof:} Proves that $(\bar\alpha,\bar\beta)$ is an encryption of an integer in the range $0,1,\dots,L$.\\(Requires knowledge of aggregate encryption nonce $\xi$ for which $(\bar\alpha,\bar\beta)$ is an encryption of $\ell$.)

This proof is a disjunctive Chaum-Pedersen range proof as described in detail in Section~\ref{sec:proofsballotcorrectness}. The range bound $L$ is equal to the contest selection limit and the ciphertext $(\alpha, \beta)$ from Section~\ref{sec:proofsballotcorrectness} is replaced by the aggregate contest encryption $(\bar\alpha,\bar\beta)$.

Commitments $(a_i, b_i)$ and challenge values $c_j$ for $j\neq \ell$ are computed as shown in Section~\ref{sec:proofsballotcorrectness}. The challenge value for contest $\Lambda$ is then computed as

% xxxx ---- eq. 62

\begin{equation}\label{eq:nizk_c_selection_limit}
  c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\bar\alpha,\bar\beta,a_0,b_0,a_1,b_1,\dots,a_L,b_L).
\end{equation}
The remaining challenge value $c_\ell$ can then be determined and the responses $v_i$ computed as shown in Section~\ref{sec:proofsballotcorrectness}. The proof consists of the challenge values $c_0, c_1, \dots, c_L$ and the response values $v_0, v_1, \dots, v_L$.
Note that all of the above proofs can be performed directly by the entity performing the public key encryption of a ballot without access to the decryption key(s).  All that is required is the aggregate nonce $\xi$, i.e., the sum of the nonces $\xi_i$ used for the individual selection encryptions.

% xreqj {
  "section": "S3.3.8.b",
  "text": "EGRI computes an NIZK range proof that the homomorphic combination (i.e., sum) of all Contest Options Fields represents the encryption of a nonnegative integer value not greater than the effective Contest Selection Limit as specified in EG DS v2.1.0 eq. 62.",
  "sc": "" }

% xxxx A4dRqNEwhaKY/VzECpvyEKRSHT2FQeSnrOHYREzz7hLgX9h0H155PLvyizAlOyME3QFWCQO0Ph+a
% xxxx nqU9gynilLPyHIKkhIGDvEqrH0CmeZvA2knkd3oXvwziXITk547dm5//yo08G6bZ5m8m7Qc1ukpU
% xxxx rLPLw1i9BVwwWqO7I4mLqB3PyqbjLYaylUQtnWTnZi0xgkiukgQRmECjAjKPtBOKxLPkTCnw9ySu
% xxxx TCStTyjytunwCwu4cZbRG05Rjy+dGoQsDRxcGRiOLesPSyhdu+kRq8S63Nbh/TCas+i++PVMWLxt
% xxxx pvfeId4ZRxdpvTtvhB0W8vJ7Eeqk5k9qpi2zNogVTXopmq2i6Q3Dl6MekrHMoa01YZ7JYywh//k4
% xxxx v1BYFwPZsy7YGsmZBBeUzPrX3M8HF4SsTRH7L17O7xipFg5iCOHrhiPFB+0RcIm0PvVRwjXu+4Y4
% xxxx kxpUA7qrtJ95/vWk+4yM9K57/CXsUrltpbyqJCbp24pjW+jwYBw1lnre+A4lgCkpYDQ+M4/b/HAY
% xxxx 4qP36FAMDNf8iGogqSDN5DGBqbxhS+bAmYZOsHQHSZNMdFTqWvxmfMdduQ1d9F41vvWcytcESs3p
% xxxx fBmsxUaA4o17R9qNIGsBhL/a7Zic8fRyo3hu+ci4qHp8Do7H+5UT8HiVL6lKQ45Lsdkd8STmFWxR
% xxxx bfFeUqU86Aq41/t4tx0utRLQ8mS6oYXlQN1caBwu8h9a59rHoTPICWXQyzP2/iNJqjNfxa+txN/9
% xxxx
% xxxx
% xxxx ---- S3.3.8.c.verif7 Proof of satisfying the contest selection limit - Verification 7 (Adherence to vote limits)

\EGverif{\veriftitleAdherenceToVoteLimits}{\label{verif:selectionlimit}
\veriftextAdherenceToVoteLimits}

% xreqj {
  "section": "S3.3.8.c.verif7",
  "text": "TODO: Verification 7",
  "sc": "" }

% xxxx AXt7NKqHuPd2a7RjN6XyTKHzaLiXpQbbNq/m2o1hr3CYK1XMqpLD9R7ntx8NxJbPlyMLsewU7Ujj
% xxxx hgTudpu/jM2YggotQyjjBpU9N0Qt5MH+6LZF63zn+zewNL0qg2vFvpraRDRmBKU2mDvWFNxlkH/e
% xxxx mo3ATxBUcuOaNhkrey9AvcTPaAhI2nWwu1QWLbKbrTs3JHuy95rIFvHXreXTBunuuszE3025TYYg
% xxxx jwf6s9xWwcoDwiv2GIW3aCnguwmp1z6Vo5avS68AVpGDgZ2Z0St7d24PrJIMyYlc/uPNzBlz+8v4
% xxxx m4AV44ly/XGGFDoaoDoJysMM9d6ZRKBxCxXkEfMi4cf5XtjlNK64dnRJpBkIaZNgJkF6TrTX3TVT
% xxxx wi5NznQZOgeVdrSbtHmdzCb8vxGc4eggTEWMCBBtQKUx8/l0I28FH/kTBX4WcQqMv4yeCCuQNbUt
% xxxx ZbROglmVxOlHI68UYjl8w9Y1tb0abrpZ578l6Mm+FF4YhOx8/OjCzx606T7f5VIfkmh5lRtuOKSs
% xxxx yN+YEb3rAh8U6qtKVtaCWCUwxoHUVIAUJQ1POQMvFT9eP40a1uAN991O3k7Fs0NRqNy3k1QxrU1O
% xxxx pUzopDGwXSmTLuXdu0fcbBRsZRhet0W3iDlZC527VGmRafy8N0OYYRnhF7/BL+2V8yJg2bsVOlDX
% xxxx AU9MXc3jVcOlfi+XLDU1vPVVXi255vJYHj+KHaF9mRptwj+lSSSJCGWiTgFV9a8Zsz+rrrakXc5x
% xxxx
% xxxx
% xxxx ---- S3.3.9.a Supplemental Verifiable Fields (Optional)

\subsubsection{Supplemental Verifiable Fields (Optional)}\label{sec:optionalverifiables}
\EG offers compatibility with several supplemental fields that may be desirable in some applications.  Examples are counter fields that indicate whether an undervote occurred in the contest, whether a null vote occurred, whether the contest was overvoted, or a counter for the number of used write-in fields. These supplemental fields allow verifiable tallies that show the total numbers of undervotes, null votes, overvotes, or used write-in fields in a specific contest.  Any supplemental fields that are used must be included in the election manifest.  In most respects, supplemental fields are treated like ordinary option fields; however, the proofs for meeting selection limits may differ because of the semantics of the various supplemental fields.  An implementation of \EG is not required to support supplemental fields.

Details of the above examples for supplemental verifiable fields are discussed below. In general, \EG allows verifiable fields that contain any other data as long as it can be represented by small positive integers. Depending on the properties that must be proved for these fields, it might be necessary to prove conjunctions or disjunctions of certain membership set proofs. These proofs are not described in detail in this specification.

% xnote S3.3.9.a This section generates no unique or specific requirements

% xxxx xpJN/I+KpOPU2gWut3lBgSbAfSLrFh578WfngK+lo/R1Y78S3PF43hzDnidS3Rp8fryJCLpfSvSc
% xxxx sTTLSMTTx5ynQGL/xQPk+6SvinYjthzRiBVxes9K83m7dxisufyT5jgesdzxFZ8svOTy4d9p+UF2
% xxxx s60w8a4nTsSVm3xgpBeOGtFhA8p/QNaR9RZ1LZq5kwbLzlghFv3ZW8KyBZ4kR/qY1Xt0z9q67Tjj
% xxxx upHVywt6sk5Amh71B6Vzrz2Ls/u14Jc0DCmYAwJfO7RO0j8wJN2SbIibeMnzILEj44Rvw3tZce+t
% xxxx pE5XJfCjEJnTXzNnfw2nLQcYrF+I7FURN45ROgwXuK6kutwD2nLRnjoU2CmdBxsPqLr82VL5utD3
% xxxx tvvyE3EsRrcZ4ukp177pPTljDyPbAklHBpcPXaneB5OQD+Al4d/alMtL0ZttUZeV7YWvuBAg4BQY
% xxxx 6cz1Tl2O/8gwIgqqzvIBe0JzQTZd1E0IP6p35d9FVx/o/16AhSsSXQWeI9FFBxwd5359moWOaahn
% xxxx LepYEVBUfZYQ+XBWLJwglBGrns5gf/jA/Oig2rCcOxgYh6A8SPw35Rms+LUsml7gdZEy1nCXP1MS
% xxxx FvrgJUvR6lQW9GnnU9fDun8v8yhm/6D8+rTNzOiHLicjomZzZUSEF0Sxt/PZOKCtP3pQ2d5bzGeS
% xxxx kqlw13Q3ZigrbPJDe1Vgf+RmCs5OdHGtxbzl80v/zO+/1TMLRBv7de7v7DO1d9KD7RXhrOWsYP+3
% xxxx
% xxxx
% xxxx ---- S3.3.9.b Supplemental Verifiable Fields (Optional) - Undervote.

\paragraph*{Undervote.}
When the manifest requires counting undervoted contests, an encrypted undervote indicator is provided. This indicator is an encryption of one if the contest was undervoted, that is, if and only if the number of option fields that are set to one (or the sum of the selections assigned by the voter) is strictly less than the contest selection limit. It is an encryption of zero otherwise. Just as for every indicator, the encryption is performed using the vote encryption public key $K$.

In order to make this encrypted undervote indicator verifiable, an additional proof must be provided. This proof can demonstrate that one of the two following statements is true: either (1) the encrypted undervote indicator is an encryption of zero and the sum of the selections assigned by the voter matches the contest selection limit, or (2) the encrypted undervote indicator is an encryption of one and the sum of the selections assigned by the voter lies in the range between zero and the contest selection limit minus one. (We note that this proof also implies that the encrypted undervote indicator is an encryption of zero or one, which is needed for counting the number of undervoted contests.)

The manifest may also require an undervote difference count.
The value of this field is an encryption of the number of undervotes on that ballot for that contest. The validity of the corresponding ciphertext can be verified by checking that the difference between the contest selection limit for that contest and the undervote difference count exactly matches the sum of all selections assigned by the voter.

% xreqj {
  "section": "S3.3.9.b",
  "text": "Ref: S3.1.3.j \"Undervoted Contest Condition\"",
  "sc": "" }
% xreqj {
  "section": "S3.3.9.b",
  "text": "Ref: S3.1.3.j \"Undervote Difference Count\"",
  "sc": "" }

% xxxx Gqo3G9ykBWJ3GcRaMQlYOeVW/3rVdAp5FrBvI1YCGEkjn68VVObjdpNRnB0klXnwsG9ulxZ1WZQ4
% xxxx /t806vmbjMF1k5uQIPMA6ZvmDpEkx0gbdlE9XkeNsujdxLFBy6HXqTY+nc2NoSM+xgmwxAAjUq20
% xxxx i3hKVI5ln+LCR32EgnTxXOCSvfcFWsUwOeSnMUCy5vHuOdp6EppGGrlOQa3csgN8283VhG3IeN75
% xxxx QuIHFtD13OQ5s/1jpPBal0Azbic88mjT2EO4zBpRcYpi4g1+SeTRjwV6hWtuwEJ2qc7SDJhh/rjJ
% xxxx LxGz+3AsKx3jol2SlJVB1fzYHd/RcP8K3hDeaPOYRDfQrEqRzeHVdvCEz5m2ZF6K+mAJOeJ36ozq
% xxxx maPz6OY6lW5tKJyvaBWdSXBAZKiSx8Wd1ZWyI6uIMt26gBUSAO6i0cDSlXpxOgttKeQ0ZdI+oOJZ
% xxxx PzzgLoCSEFbHvKX3sQ5APveGcbks1Rc3L8dfYAQVRpbeB005/z6EhWpQsYn770iptz7rNia/6eiW
% xxxx 3UKsZTrXYYYZ4W0n6wCF/v9UBkBAsjFHUgelSQ4d/VluomAWWpMW5oFEY//Bqy8gjejvZhxxd6v9
% xxxx K9qyLjFJYJpvfXKgqaqqYM94gaBfeNJScKUEa+vpZFpqwkOxO3DrAFBQupitzuHXFly8aaw06HEH
% xxxx 7+Lj2ahI2K0LVr0U2Nfeo3Ce8eYkmo2Ql1/MQUUDNPYikNyo6C+EAS6M0avkxaGoBtIdk3nW9XnU
% xxxx
% xxxx
% xxxx ---- S3.3.9.c Supplemental Verifiable Fields (Optional) - Overvote.

\paragraph*{Overvote.}
When the manifest requires counting overvoted contests, an encrypted overvote in\-di\-ca\-tor is provided. Similarly to the encrypted undervote indicator, this indicator is an encryption of one if the contest was overvoted, that is, when and only when the number of option fields that are set to one (or the sum of the selections assigned by the voter) is strictly more than the contest selection limit. It is an encryption of zero otherwise.

In the case of an overvote, \EG sets all selectable options in the contest to zero, i.e., \EG generates encryptions of zero (unselected option) for all selectable options. This makes sure that an overvote does not affect the tallies.

The validity of the encrypted overvote indicator can be enforced by checking that this indicator encrypts 0 or 1 and that the sum of the selection fields---when added to the product of the contest selection limit with the overvote field content does not exceed the selection limit for that contest.\footnote{The encrypted product can be computed by exponentiating the ciphertext encrypting the overvote field with the contest selection limit. An alternative implementation would be to always set the overvote field to either zero or the contest selection limit. This avoids the exponentiation during the check but the publicly verified number of overvotes for that contest would be scaled up by a factor of the contest selection limit and the selection limit would then need to be divided out for reporting purposes.} This verification step also guarantees that the selection limit is satisfied for the contest. We also note that this validity check is compatible with a situation in which the selections assigned by the voters are all zero and the overvote indicator is zero as well: this reflects a null vote and not an overvote that has been neutralized.

\EG does not provision for an overvote difference counter, given that overvotes are treated as invalid votes anyway.

% xreqj {
  "section": "S3.3.9.c",
  "text": "Ref: S3.1.3.l \"Overvoted Contest Condition\"",
  "sc": "" }
% xreqj {
  "section": "S3.3.9.c",
  "text": "Ref: S3.1.3.l \"Overvoted Option Condition\"",
  "sc": "" }

% xxxx ZIURdv7q0I+ayKx5yJwZYNX0oxNgboxNRZ78ZRP6Nj7RE66AA8PUotyeQRzDWh05ZbIMDOFwsb8O
% xxxx eyAO+EbMITsa9DXbfkT+nXIYZeayEy9oydpDtjo851P+6J8dz0fxkoDn1uoMILQZmbOde+xfCGby
% xxxx yCOmbtmAv03Mjzn6oVxgoxqrf4ULz2paKZJ0/Bpsh9drbaWiQ2OghhcsvWBO3Seq+5e+PeWc+cOK
% xxxx 3cG74GKEX9nQwG3qYM6N02qvOXcR4G0sx6H9DNSDRiA+Z3xzeQv+4Y5uL95Quek1UXl+Tt3duZr6
% xxxx rwZC1bcEclszyYFmI/65FULD8PXZtA3crTxiDOwyibaYsMSwHOEYPXrSKMuIRwHyeWK9gnuLgF42
% xxxx 29LJYau5vz906zUy1gtJpedX7m4LZu3o20077hu53XxifsmkL6jbIgyD5BSG0uGmKaYxdrDWP8Vh
% xxxx GOY+V1Gvnwy3srqBeD05KygyOnX1zl82acaXp3vc2B3FN0THs0jRYd1l63ap/6CubM5xFm5Ct2dj
% xxxx D1JkVD9mBWsRfJ+2GwTdtNgJFzcFITOeK1We7qN2lq9+qIIvz++Lg6UJt70OhZXUHHTZyeszS+F5
% xxxx KdiRSsXxr6WwYYcsaLE6hftIOMoe2eNSRnr0ft13RaSBWBjAaEEKhVy8FX9jwm5GYj6v3kf2dxkG
% xxxx ofUFhzf43xTl2hKbTXyIO/vCL8rKCnaXAev+hX4c4bza4S1J19r4lOqhct68Thh9KYUGe9z1tUb4
% xxxx
% xxxx
% xxxx ---- S3.3.9.d Supplemental Verifiable Fields (Optional) - Null vote.

\paragraph{Null vote.}
A null vote occurs if no selection has been made, which is a special case of an undervote. When the manifests requires counting the null votes, an encrypted null vote indicator is provided, which is set to an encryption of one in case of a null vote and to an encryption of zero otherwise, similarly to the encrypted undervote and overvote indicators.

The validity of the encrypted null vote indicator can be enforced just as the validity of the encrypted overvote indicator. When all the selections are set to zero as a consequence of an overvote, the null vote indicator should be set to zero.

In order to make this encrypted null vote indicator verifiable, an additional proof must be provided. This proof can demonstrate that one of the two following statements is true: either (1) the encrypted null vote indicator is an encryption of zero and the sum of the selections assigned by the voter lies in the range between one and the selection limit, or (2) the encrypted null vote indicator is an encryption of one and the sum of the selections assigned by the voter is zero. Providing such a proof forces setting the null vote indicator to one for every overvote ballot as well. Note that the functionality of a null vote indicator is similar to that of an overvote indicator. But the requirement here is that the null vote indicator \emph{must} be set if no other selection has been made. Therefore, the proof is somewhat different from that used for the overvote indicator.

% xreqj {
  "section": "S3.3.9.d",
  "text": "Ref: S3.1.3.m 'Null Voted Contest Condition'",
  "sc": "" }

% xxxx +WA9m2z/eRpJ4RC/Lu/ENBxN5rYwLAlglZZeoYsYurYmjswhRkSqZoMGUUYDxpfXSMfBviwT0CRT
% xxxx SVkNnKZMTiFiL3SVTjNbrUq2uQ2FqO+1+zAM/RxPEEfpaqLqlhgFDzHpmIXrAIC8JWhzbHWAMCQI
% xxxx U8daQS24sCjG3uGdk8uQIDLbiHPtze3TI7o0SyzUSQAt40F6pu+EZWiEMKycsWyTuUiw34fblrPE
% xxxx jQKV6GZwlxkfhddJhppXrfhVwSS4k5HOf1Rx9cxYnK/kqn8PFdjytJquBIJ2qIpbDSPXI81AiFm1
% xxxx Vj7oxKzOwy6C/nRKm7BKuoH+w7toei8sLBtFmQx011iCiLko5C2DBc/Y/d8KWBWb+r0QALw2lWsZ
% xxxx AfRmGunNKVJ35XRbe5erUb5OAXa7I/E4Gu6JrOiCYUyfIrpmNljdCv7YRgrj7UabtoNFWS9Q3uJk
% xxxx kpENfpJF+W9zcLX9NWv8kYYzmof5MGKGMq2RPtG9qPiF/zRFrdbGW5VjO62PnOmAATu/lXifAEMk
% xxxx Q4/qFMlf+iFOMzvjuRkTQLUtinYkOuHN10HS1CYXp/uCgfQz1Vf3li+2NeanaJdZpwdqf0fuTcmD
% xxxx dHawa5iE9UhyhQ6X6wIx9woA30l7GtBKeeLLwfmrb5hBAcDP+q6hzhG5WCXQxKlUCeBFec7zFBkt
% xxxx csFWVLhXysgQkmbf17uboSiDN62VBv9W32IVdmv/cdXzRmI7F/MhMmv0rkGTnqvljF3FJ4bJMeQY
% xxxx
% xxxx
% xxxx ---- S3.3.9.e Supplemental Verifiable Fields (Optional) - Contest write-in.

\paragraph{Contest write-in.}

When the manifest requires counting the number of write-in fields utilized in  a contest, an encrypted write-in indicator is provided. If a contest offers more than one write-in field, the indicator may take a value larger than one. Range proofs should be included to show that each encrypted write-in indicator encrypts a value between zero and the number of write-in fields that are offered.

For all write-in selections in a contest, \EG captures the text written into each write-in field. This text can be collected in the contest data field for that contest, after any information about overvotes, undervotes, or null votes, and encrypted as described below. The number of write-ins should be incorporated into the proof of meeting the selection limit.

% xreqj {
  "section": "S3.3.9.e",
  "text": "Ref: S3.1.3.n Write-ins",
  "sc": "" }

% xxxx pvomyq/+hye1apDRpDvKIbjYuY1ZxMUTVEaq4Y2iBlcPs1KN4fRAS1fUY0TuvADAMFvcDhgIDPMf
% xxxx WUTVqnUWIahHQjES+aqaz0nhBkcKWZQmYyvh1tDnvSqVJ5SP5kfHQOnUVwxxJoIaPqeKSaJ4csCL
% xxxx pDDas0IR1kOpRSLyFDArikOThenFvF1CndVG6qwyNduvPi7qfrlkYwmfEaVmc5GnP4EhHJv2IfZg
% xxxx apKJGIWNVg26esOB+6lZ4bBElSII0mpxXUD3PKTc0U/o4o3GvYnKIyTkUppKkVVdUom+/qMmw/q+
% xxxx jl1HQtlh6mJ5Q6ukYLMzztySVfNXtWZMw/shURHt98ACzGKty1wJobh5/kGvEeHrRx/yoNiY++Rx
% xxxx ZGyXF0NKXGiMdMbad/Hszab3eGyH2UzP5dGxeV8MZU331Ig4dr7hafCDHI1h1FHZ6XmynM8CcZvQ
% xxxx rVoSZrOfGB+Q3GpF0pIa7ooNmOJD4422uvC0gMx1uJSTi3K/4f6nLfJNnFieEbye7tvinznJXAOc
% xxxx alPelQUWHu7mRbMfLoa1iTfmW0dv5DPnojc5fsgphbAZCewma8ZmtFA/90/NfKU10z8LoHNKvzxw
% xxxx NxK8Bwa8DEBm8TmhzcS5vauzRFlIkZ2lfn/6SL8f7vGRVRsiCjWh7xWCR1VWjzp9xomW6Tq/ipCW
% xxxx h3E4xdW7wvJDOEvGli0FVYYi17mrSf/jCYa/CH6AAwbJqCBdCFoQHVxeoVTM/jjRX6C+JD2FcKD4
% xxxx
% xxxx
% xxxx ---- S3.3.10.a Contest Data (Optional)

\subsubsection{Contest Data (Optional)}\label{sec:encrypt_ext_data}

For each contest $\Lambda$, \EG allows the inclusion of a contest data field in addition to the optional encrypted indicators discussed above. This data field may include any text written into one or more write-in text fields, information about overvotes, undervotes, and null votes, and possibly other data about voter selections. An implementation of \EG is not required to support contest data fields. If such a field is provided and utilized, all non-numerical data associated with the contest is encrypted with the ballot data encryption public key in a single Hashed ElGamal encryption as follows.

% xnote S3.3.10.a This section generates no unique or specific requirements

% xxxx Hd1XF+5uBFxOo6R12BC5/CYNLazAAksDjnUIC/jIOmf4ynpsb3TBQ4sVCaZxk5NOuo21yTYG9CqJ
% xxxx KboYodY6QSpFbB+u7vP5G0xUzjJrzEcH7sBOb732nQdlr7nFsdKliY+Drc11BnvhIR6Gm72cpna6
% xxxx pW3N3wuoGfPUyqxwNgw7G1RBEXProo7IGczIB+2wGXmUgMNu6baB/88Pq5DXYGoAvfYqlXy/H9VW
% xxxx w4zcUp1fGtt+BaImseidwgvpeJhPxteetKZxclmSwhEzuNXxMf3ux+RoDyR6KTLJdqXK9EhNe/JY
% xxxx QMRCIvJ9C1ENOu2MwITfeGkE31UQ7R+FSIj9o+iqDNogMPsSNEqyo/ccSJl4rQV5hwSrFFU3CLmi
% xxxx Pou7215mMdSGcThTtCizf0QtalDntEoALvmfuoZp7VmYKTI2ZctpnujKVhhydaKY26GJLPGBQHiS
% xxxx YuhPfQyFfR4na3T7KtbYPzd9fPqkX1T/eQyCEINmICeCuY6I+MddYLRu6pDFirsNCjNTja9e5nLt
% xxxx t5LeIFJRRC8BbDfSYq2BJVV9xB97IJmX5HsnZwuMq6CmFGflITUep+MQtH5Gc/Z+saYCAb8dBj++
% xxxx 3kpslGhodu4x6oK0GJoWrXA6hvJkuooh5b3a0JAlHSSgRkv40iSsvOHPJnRTtYDyB1CN3hsEvpSw
% xxxx /1rRGPUQdIYdc2JhT7AqEBoGsGUXg9ntTs481WF0pz6rv4RX9WKrNzHVrx3V0PrhRNJCNE78S/Ap
% xxxx
% xxxx
% xxxx ---- S3.3.10.b Contest Data (Optional) - Fixed-length encoding.

\paragraph*{Fixed-length encoding.}
The information held in this field must be encoded in a byte array $D_\Lambda$ of a fixed length of $32\cdot b_\Lambda$ bytes, where $b_\Lambda$ is specified in the election manifest to be the smallest value large enough for $D_\Lambda$ to capture all additional information about this contest from the ballot that needs to be retained and stored in encrypted form as part of the encrypted ballot.
It is incumbent upon the device calling \EG to fill these $32\cdot b_\lambda$ bytes unambiguously. In particular, if padding is used, it should not be possible to confuse a padding character with a trailing blank or other character that is part of the data.

% xnote S3.3.10.b This section generates no unique or specific requirements

% xxxx v8bsXGPjBHvQvgSkM6fb2qlaW0Py6iQIuG8lrrl0gxNf+a+H08QQHqHIDVN946tXZOS+J9psTPqX
% xxxx iHPAknclOzwzLSEuZCU0lPx7IJUyaLrp1XmKmupaI0KHh84dY5fVBYpOIS932gZm4lD0KKhwIKWb
% xxxx gmptiSDm2tBUR94mgVyozCgBAhNs55amO55+h8mNTFfD80PN6m94BnKcqjt7wKef02noubFfATqi
% xxxx 4qBaUtW/RyHYaBbIpaSbyGakoprXLIHiGNmNaplz0NTBg1tzRDwHlv1LkveavvGYjct6FHs5NVtn
% xxxx hSPBDtKlFnHq8iBtRENrLSXbp7RqAmrwFfHhmK8ZmDL5TibLHA14eI7jk2Wivs7oYuAoyrrkg5jt
% xxxx INF7w1eytlZ/wyC4mRq3K5y7/C22aXuOttLt07lzYZvCWAxsRw+ySWLUUbiicHJl7kank+2sUVwG
% xxxx 8M2ZYmQoweueZuNgnEHAE+w8jDKGUkY5JaoQY8nnba0DBN6M9QXQ/R63TMw7bOqkANBmC2oEthzS
% xxxx 5ZBiLG++VnMYWtnqpP9/W8L4xIlV+rUQ4y9MQq8NqrMun8r/Q/Byfh6SX271T/xkkz/CpGv7SwQC
% xxxx tvmbnSPRFz6o4mGris+j1khNXZ221iz8YCmVK8NiMy5CO+n9ysf7/ddI/sh9b2KGd+NmHXxQ3kvy
% xxxx df3teJtHKnRNECgo5CUwTaRSoa1qK+0L6ReKm+eBywByGFTn0gjPVOIh0HvWyU4XpbGnEQFVb/Qz
% xxxx
% xxxx
% xxxx ---- S3.3.10.c Contest Data (Optional) - Encryption.

\paragraph*{Encryption.}
Write the contest data field as a concatenation of blocks

% xxxx ---- eq. 63

\begin{equation}
   D_\Lambda = D_{1}\parallel D_{2} \parallel \dots\parallel D_{b_\Lambda},
\end{equation}
where the $D_{i}$, $1\leq i \leq b_\Lambda$, consist of 32 bytes each. To encrypt it, \EG uses the same encryption mode as for encrypting secret key shares and the ballot nonces above. Therefore, \EG uses the public ballot data encryption key $\hat K$. A pseudo-random nonce $\xi$ is derived from the ballot nonce $\xi_B$ and the contest label $\Lambda$ as

% xxxx ---- eq. 64

\begin{equation}\label{eq:noncegen_contestdata}
  \xi = H_q(\HH_I; \mathtt{0x25}, \indc(\Lambda), \xi_B)
\end{equation}
to compute $(\alpha, \beta) = (g^\xi \bmod p, \hat{K}^\xi \bmod p)$. A 256-bit secret key is derived as the hash

% xxxx ---- eq. 65

\begin{equation}\label{eq:k_enc_contest}
  h = H(\HH_I; \mathtt{0x26}, \indc(\Lambda), \alpha, \beta).
\end{equation}

Next, a \KDF in counter mode\footnote{NIST (2022) \emph{Recommendation for Key Derivation Using Pseudorandom Functions}. In: SP 800-108r1 \url{https://csrc.nist.gov/pubs/sp/800/108/r1/upd1/final}. Note that the secret session key $k$ changes for every encryption because a fresh encryption nonce $\xi$ is pseudo-randomly generated every time. The second input to \HMAC consists of the byte encoding of the counter $i$, the UTF-8 encoding of the string $\Str{data\_enc\_keys}$ as the fixed \emph{Label} field specified in SP 800-108r1, the separating \texttt{0x00} byte, the UTF-8 encoding of the string $\Str{contest\_data}$ as the \textit{Context} field, and the 4-byte encoding of the length of the total key material output in bits.} based on \HMAC is used to generate encryption keys $k_1 \parallel k_2 \parallel \dots \parallel k_{b_\Lambda}$ by computing

% xxxx ---- eq. 66

\begin{equation}\label{eq:contestdata_enckeys}
  k_i = \HMAC(h,\bytes(i,4)\parallel\mathtt{Label}\parallel\mathtt{0x00}\parallel\mathtt{Context}\parallel \bytes(b_\Lambda\cdot 256,4)),
\end{equation}
for $1 \leq i \leq b_\Lambda$. The label and context byte arrays are $\mathtt{Label} = \bytes(\mathtt{``data\_enc\_keys"}, 13)$ and $\mathtt{Context} = \bytes(\mathtt{``contest\_data"}, 12)\parallel \bytes(\indc(\Lambda), 4)$. Each $k_i$ is a 256-bit key, and $\bytes(i,4)$ and $\bytes(b_\Lambda\cdot 256,4)$ are byte arrays of the fixed length of 4 bytes that encode the integers $i$ and $b_\Lambda\cdot 256$. Therefore, $i$ and $b_\Lambda\cdot 256$ must be less than $2^{32}$, i.e., $0 \leq i < 2^{32}$ and $1 \leq b_\Lambda < 2^{24}$.

The first two components of the ciphertext encrypting $D_\Lambda$ are
\begin{align}

% xxxx ---- eq. 67

  C_0 & = \alpha=g^\xi \bmod p,\\

% xxxx ---- eq. 68

  C_1 & = D_{1}\oplus k_1 \parallel D_{2}\oplus k_2 \parallel \dots \parallel D_{b_\Lambda}\oplus k_{b_\Lambda}.
\end{align}
The component $C_1$ is computed by bitwise XOR (here denoted by $\oplus$) of each data block $D_{i}$ with the corresponding key $k_i$.

Next, a Schnorr proof of knowledge of the nonce $\xi$ is generated by selecting a uniform random element $u\in \Z_q$ and computing $a = g^u \bmod p$. A challenge value is computed as

% xxxx ---- eq. 69

\begin{equation}\label{eq:contestdatachallenge}
c = H_q(\HH_I; \mathtt{0x27}, \indc(\Lambda), a, C_0, C_1)
\end{equation}
and the corresponding response value as $v = (u - c\xi) \bmod q$. The full ciphertext encrypting $D_\Lambda$ is $C = (C_0, C_1, C_2)$, where $C_2 = (c, v)$.

% xreqj {
  "section": "S3.3.10.c",
  "text": "If the Election Manifest specifies that Ballots record for a Contest any non-homomorphically tallied additional or supplemental Contest Data Fields, EGRI encodes their values using an unambiguous fixed-length encoding and encrypts it as specified in EG DS v2.1.0 eq. 63 - 69.",
  "sc": "" }

% xxxx UjgDAzDi5KFxNBA5CljcFaEEqjIUf01E3t+WsdEDlT/AfC4tviOIDoVgSjTYdTT9IMKtm1PLvew1
% xxxx Kqjq7Tdq338wvtHao6fiQVTlOTI5DeTUBNXXy7sfUJhCpwbC+z7GpX/YsY+5eAs+q10y59PngyIT
% xxxx DKbp02Gt0CrBLTqgLTKR4/HF3F+lSNMIJwhT64bkbtVdkYtNN/EZjt4On2LOgHEsYHXWWUMzPTHS
% xxxx 6e/5FMXsg0OU7gn/b70iTIlaPR4NlQqiAmXkLANEpuO7ifQy69hBPnQhsH8Ss2uCthLJ0bFdmKB6
% xxxx JYnBxtlG82FDjkkkmwOMVAZ6QbFq5E6xZlrVfpNXlY/CaM+q2onV2fgZxNIrDkKBDhpJDwDaJv2r
% xxxx 97ebSl3gcqYhve8msoHzfgAUsYPOsu1ws6ky3vrkvRCO3i6GZfe2T7V8aKmIhK2Skx2H2TnFKcbP
% xxxx 5U1RmpYccKOEBQQRekJb/gto7HbRfBD97xfvg2IhwHPFBbzVsTFZMp2r9XdlDw4BxwxCrXaInJ+P
% xxxx gpZb/ZI/W4o17wP2JaQBWeDALJYzKIHky9SFxw01xKt9a49ZvCDUPOSv9UhVNHrbJjyLNqwnrO6F
% xxxx VQYSr8KoU4i5Rya3A+xIzeWonGcE6fecPvCa6PO2tY8XBgqcxNIrwb8hD/m6PTcyQZnOmqtaZfw5
% xxxx xta6yfhWDVqVS9AR6eIOL8hF1yPtx9k9trGK5BssMAFVNUyUgZzQ0vYy51RVNylVbCvege1/tAXy
% xxxx
% xxxx
% xxxx ---- S3.4 Confirmation Codes

\subsection{Confirmation Codes}\label{sec:confirmationcodes}
Upon completion of the encryption of each ballot, a \emph{confirmation code} is prepared for each voter.\footnote{Confirmation codes may be omitted when ElectionGuard is used for post-election audits.} The code is a hash value (an output of the function $H$, which is specified in detail in Section~\ref{sec:hashing}) whose inputs must include the encrypted ballot and the selection encryption identifier hash $\HH_I$. Inputs to the hash may optionally include other information such as an identifier for the voting device, the location of the voting device, as well as the date and time that the ballot was encrypted.

The data that constitutes the encrypted ballot for the purpose of computing its confirmation code consists of all encrypted selections on that ballot. This includes a ciphertext $(\alpha, \beta)$ for each selection in each contest on the ballot. The number of contests on the ballot $B$ is denoted by $m_B$ and contests have a specified order defined in the election manifest file. Therefore, each contest has a unique contest index $l$, where $1\leq l \leq m_B$. The remainder of this section details the process for computing a confirmation code for a given ballot $B$.

% xnote S3.4 This section generates no unique or specific requirements

% xxxx r7danYMr/49tdg/pXXNgRH+0+u5ipyAbiBNxljvqnXvoAhhDDJAeUqhIK0kAO9vl89hMvQ8SJY4t
% xxxx Ot0ep+mxaaLp6BidvDqRI0FDqahDvtl1Qshl/j735UpjjAblHalaHbJ0BfLnPWFUh28KvNiXG22k
% xxxx knOkQyonEhkiaoS6ktB9LzGeC7nHn5oqHQeO220HxhTj9vfDcnxv6c+FvzVpD8pNAKs3pArQMaWD
% xxxx I2knZf2dzrsre5fn1NJW/rUFEv/n9tP1DkHk1krXvNjUZPkNmcq/4MFryncrRTtcylwFX41bNijY
% xxxx LX1x85s0SdfdkvZQEBvmA6rk3FOIAv9sUPcNXNAg4sa3iFbYwhfwtRpQWKtEHLTefZILl+9CeI0I
% xxxx ouI2lpor/1jRt05iC+xSiOYa28xC3HTN92cf3Lq/643mFRsIeTTPNkteowfw6HGrNVC9dfRvWr2C
% xxxx 39mAiNtYYu5IiR79FT5hBUcEEKUTam0oEq4G/lL1fcbUrSIMD5TCNLt4JSXNzlfd0FfK02RJO22J
% xxxx Z/m5+SKHV3WgQ2tR5aeSVxPLzwQ10+gKCv4wtNvnzXToZ/colaHq2gpRycik47ZSl6TrcyzDPAoW
% xxxx LuYp+mLE5RbV7TQOl+5fF68wUTlOWG/MN/PBCoaUmSO/gVWeiw+Fsf3SDm1yDSFYlbXytOiZLVI3
% xxxx DEgjtN2LLtDJqedHnboMxwBNqZpX3NysCfyR782i9NKRqtZ4UxaU3XvWCsXzLn/9v7a05wucHoW4
% xxxx
% xxxx
% xxxx ---- S3.4.1 Contest Hash

\subsubsection{Contest Hash}\label{sec:contesthash}
For each contest, \EG computes a \emph{contest hash}, which is a hash
value of an input that contains encryptions of all verifiable fields in
the contest. These verifiable fields include all selectable option fields, i.e., the choices made by the voters, and,
if the election manifest specifies any, all additional verifiable data fields such as the counters discussed in Section~\ref{sec:optionalverifiables}. In what follows, additional fields are treated just like selectable option fields.
The encryptions are hashed in order specified by the
election manifest file.  Let $E_i = (\alpha_i, \beta_i)$ denote the
ciphertext encrypting the data in the $i$-th verifiable field
($1\leq i \leq m_l$) of the $l$-th contest
($1\leq l \leq m_B$, $l=\indc(\Lambda_l)$).

The contest hash value $\chi_l$ is computed from the contest index $l$, the sequence of ciphertexts
  $E_1, E_2, \ldots, E_{m_l}$, and, if present, the encrypted contest data $C_\Lambda = (C_0, C_1, C_2)$
  as

% xxxx ---- eq. 70

\begin{equation}\label{eq:contesthash}
  \chi_l = H(\HH_I; \mathtt{0x28}, l, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_{m_l}, \beta_{m_l}, C_0, C_1, C_2).
\end{equation}
If no contest data is present, $C_0$, $C_1$, and $C_2$ are omitted from the input to $H$ in Equation~\eqref{eq:contesthash}.

% xreqj {
  "section": "S3.4.1",
  "text": "EGRI computes the Contest Hash value $\\chi_l$ as specified in EG DS v2.1.0 eq. 70.",
  "sc": "" }

% xxxx fRj8dlM2Lj2dHHbIftUuHjh4/2v3RejJrRQLv9CuXGOswZR29rwBXYhgGxDBePMDhSk6Kr3BD/z9
% xxxx YKjRRBfat9yoqvrxq7pVUY99xAyPpVWfSpxZdknOBad3S9H2VjzwxlJOQ4eXD6j2OOHvIHn2JhMV
% xxxx mDWQPwdKdFa35h/lysBTyGmvkOST1cwiiSV1zI3pVzEddNzpwvQuBRcnAQsjLGD3mWajXXY/f3dw
% xxxx zQGFXYY4f0W0Ba3ByqbaLR7tLm5Fb5eWt1NzffelupB+0kLxkEmd8ttf3qpwrM3pflLZgMRsgNnX
% xxxx psjfAlRfDAd5LgAj/G8mrl+m/yNqRsMtAuqf3BhV6moyKNZ7yvX9/licYUe00nNJI1mEUk+mBQEl
% xxxx lh4MPqvW3w7XIJ6kxBSOTum7nijfdx5dGO/ruVK8nCHcQLxbY4ELM4IX60mXvf0gCdstR4FFiH2Z
% xxxx 6mDyTbcN5fjUji+NFuE9KEYgGIOA1iY1xytEgm1txhFsJqundQ6//sM1JV9+6kF1e7m/3Dxi6OIm
% xxxx ZxOJYflt25XwNKfPwwh4keNeUC7+QiDEF33rCFnNv3Zgjjry8qGc6uDp7HBYVYr36Ow3tI5vnNuQ
% xxxx blAK/4BwnsjxNMZVIlKTJluN/wJA46WIuDq4lcgIPtH5bfqsO8J9D6EIGiR3r6rXtlR6a6NwR706
% xxxx rrXBSsR+B1ffR8pZ+8/pbJwwmZ4HCYo3W0iyoFm7i3HHqTgeAREUka1jJGAa55B3I431vFbJpvcJ
% xxxx
% xxxx
% xxxx ---- S3.4.2 Confirmation Code

\subsubsection{Confirmation Code}\label{sec:confirmationcode}
The \emph{ballot confirmation code} $\HH_C$ is a \emph{ballot hash} that is computed from all contest hashes as

% xxxx ---- eq. 71

\begin{equation}\label{eq:confirmationcode}
  \HH_C = H(\HH_I; \mathtt{0x29}, \chi_1, \chi_2, \ldots, \chi_{m_B}, \B_{C}).
\end{equation}
The input contains the contest hashes in the order of the contests as specified in the election manifest file. Besides the contest hashes, there is an additional input byte array $\B_C$, the \emph{chaining field}. The byte array $\B_C$ is $36$ bytes long. It is used to enable ballot chaining and in that case may contain the confirmation code of a previous ballot as described below. It can also be used to link confirmation codes to the voting device they are generated on.

% xreqj {
  "section": "S3.4.2",
  "text": "EGRI computes the Confirmation Code `H_C` as specified in EG DS v2.1.0 eq. 71.",
  "sc": "" }

% xxxx IaHsauNjquFPNohwLhRfeY8cM41TCL8PKNhjiAj2AUynhO1jyWJXqXe3e1U5fBppSdPgOoBnClJs
% xxxx DAn833CG2HHwK/o+5VUFfPaJQTQoYhk0/KKXgSp5mIgL42CeAaDZAd6DkZ8k3gC4EN3tu0XAJUwc
% xxxx 2Wb0G2UtybLYlC0aUQ54dICdoyg8E3RdcOPSKQ9qNsCpTVqpPU7yKanPsD7soUdHyIe+V06UpHPm
% xxxx vtmm6H7o1rlQQsDtUAhQv3AS0HL4FnW/UrujnD9CUYhq9E5rPsaJIVPT34cGbitMusfgDuC1gmdb
% xxxx +3Qilv+XKYkayVGUGYVhKZG6ZrJlSMBI7zwp18V5j7+9ZUt7vk/XOOjeyUc75kHS40jz8841sHuW
% xxxx kDEo/fYwIQH+RyBReePI6ZIgMwwg+ZxVvynqyIeiWGlPboNxU89M37QFaUu+/Z6d2GL7C1dwbhsf
% xxxx TBZRCfDUV3ykvjn6LsnZX57uT+5A+I4z6/szWUZlzfmVuBcjjp2qMdZc4Kv0cBx/WDMbscMSIgvm
% xxxx mT6uuNvE0EHjcp8abnl0KIPe9EaDOKCiL46mraGZsOBN/QJ3NnyAMcSTgWR6KXLaEqhz+fEBlrpM
% xxxx f0pxB47BZxuc2cyB6YwDV4Bs1/l84okvaQ8syEH9CnIItRw3/bZ0srMuT8pWHewJI83i1NRpVV/h
% xxxx OgOIILihfdPoAKtqMNqWbGSNMGJmFEbgQfkTrODNK881fSGq3Q8fLSGcCIdijpcLOhF7h0A54cmf
% xxxx
% xxxx
% xxxx ---- S3.4.3 Voting Device Information Hash

\subsubsection{Voting Device Information Hash}\label{sec:votingdevinfohash}
The chaining field is used to include information about the voting device encoded in a hash value $\HH_{DI}$, the \emph{device information hash}. The value $\HH_{DI}$ is a hash

% xxxx ---- eq. 72

\begin{equation}\label{eq:devinfohash}
  \HH_{DI} = H(H_E; \mathtt{0x2A}, S_{\mathrm{device}}),
\end{equation}
of a string $S_{\mathrm{device}}$ that may contain a unique voting device identifier or a unique voting location identifier and possibly other encoded voting device information or the time the ballot was processed as specified in the election manifest file. The manifest may specify that $S_{\mathrm{device}}$ does not contain voting device information. The string is hashed by first encoding it as a byte array using UTF-8. The array starts with a $4$-byte field specifying the length of the UTF-8 encoding of $S_{\mathrm{device}}$ in bytes concatenated with the encoding itself.\footnote{See Section~\ref{sec:stringencoding}.}

% xreqj {
  "section": "S3.4.3",
  "text": "EGRI computes the Voting Device Information Hash value `H_DI` as specified in EG DS v2.1.0 eq. 72.",
  "sc": "" }

% xxxx fsFbo/lsFuYHckOT7mrWt+YfFJr7g5nDO7o7HtZiFvDehYtPj1zt3pEt9vl02a0D9ynsZdpzF830
% xxxx /fsC1z4cl5F8zmIv6NAc67XVUcVR+1tNlUv2tZSQwXAccUspeXoajYTdI5yeyidwoDHs0VVyL04K
% xxxx KR98hU8qm19QC3RDIeIULFRMdtoOzEC1eDr1NzommmsASjDwhePKhBnScajYbO3AxCGKTQjXyavt
% xxxx pzSycaLLxLNVT7W9Uo/FUf+QkzZwmGxBvROO5ODcD/RDQIpolgtPU0F1m0AYRN/8gIRHPueCLGe6
% xxxx DwW6GEPyiQxBEP/5h65hktS9R/g1EtcbtY1Gw2pxnK1hHLAwvf2SsABhPju5GdNkf4eVr0dHCXO6
% xxxx P8s5iPlbt8Vky1WtEoCvUHCrNZBagR2VqRFGKuMdVwgqWhPU0NxbR5E2e8PztSXt8I89Mva2y3bX
% xxxx BarW2gOkKGYvbMVYLyucSvGo7boiZNGrv3pfPAWpnSplVDLdDLbn54Utd3jjlO7Zestr3CHS3m/h
% xxxx p5Ghtexsm0e+BCqQ9PIVkO3vuxzmWOzIJIdKgGxSygfa+XcEM3GaZq7v3YRdn1RNxaAFSna1Htmj
% xxxx xM+rF1gTbHGlsIB1CvOG2+yG8yA0yrD8UPQP0kemefQGycrawBTSLs/EOvVcZR0AlgdZzHreuw8S
% xxxx 77IoWQBD1TlpP/nSOF8VwVzdf2i+MicRccSVRyZOgOdyKJY5O7V9zgaWdc6wq/oy7w3vscaHause
% xxxx
% xxxx
% xxxx ---- S3.4.4.a Ballot Chaining

\subsubsection{Ballot Chaining}\label{sec:ballotchaining}
Additional input to the confirmation code $\HH_j = \HH_{C,j}$ of the $j$-th ballot computed on a specific device can be included. In its simplest form, this input is the confirmation code $\HH_{j-1} = \HH_{C,j-1}$ of the previous ballot processed on the device. Hash chaining can be implemented in different modes, for example using simple sequential chaining as above or allowing a tree of hash dependencies. This section only specifies the no chaining and simple chaining modes in detail, other modes must be uniquely identified by a $4$-byte identifier and specified in the election manifest. In any case, the chaining field $B_C$ is a byte array of 36 bytes. It contains the \emph{chaining mode identifier} in its first four bytes and has space for a hash value in the remaining $32$ bytes.

The benefit of a chain is that it makes it more difficult for a malicious insider to selectively delete ballots and confirmation codes after an election without detection.

% xnote S3.4.4.a This section generates no unique or specific requirements

% xxxx g2GFfgP8vJJZB2cQ9sY4yA0w5NRsamvtCmXvh+Hv9ez75/siWw8sIRCL+12CwfH3X+r0Aa2TIVaq
% xxxx AQNNtQtD+nemnug0j71Siy0NeLdTf2RLvrj/cA3NzgF3IDnQH9Tn9XuTq+BjX7IZhWMY1PpcCLk7
% xxxx DopIkVj0N7j40XEJHjgUHkWz/ixqAUsSiok+15Svdbm11ciDR5mB++vGedTmXAJ3AMzIAolVb2iK
% xxxx cUDYWmPXGGnJ7ConmQelZS7Tx70VjEhu94lWygCIxClVCaaTmnl600ApJrBHIf1hxEs4kweEF2Jm
% xxxx cKcwpDPLy7K9AGjgnEsWRXy/MHQ233uzRA1dECf2mRdBczMyTkH5lBX2TEOY1uGrCw7lLvKtY/dU
% xxxx FNUjYhU3KGLJxAARDZ1sLVAcdt9isA/7DjqorRPvSXiffVmk+PvzHvg4HNPIUB3tE7UKfwsxN6KO
% xxxx DbJetEnyKmpWheqw5TlC69eyaxI1ko4K60dkUUR5fv6ywe9VZRZKnLyn+V1dK07SeTWtIdMvKo9J
% xxxx 2+AxkQ4cEA3tcpL3ThQ2qDeWtsmJQeyh+NPsCySvaPE/b3a/9NPGcBxvb4u5ua183WRLP1S6IUl9
% xxxx r+pVMrkzY6CfmYFAuiWrFPekPUlAck5onN9vlgMsJ6jhLP6LsEf4N6APO8NGWbtaHTVq6dU9ZPQP
% xxxx 7v7Hy8WhFxcCyCg+Ep55VuNE5ov31Y3hRbvVwg6aqO3GX6Nl0J+AQ/N3UuJIqKcU/lgUPUl5X0pk
% xxxx
% xxxx
% xxxx ---- S3.4.4.b Ballot Chaining - No chaining.

\paragraph{No chaining.} The simplest chaining mode is the \emph{no chaining mode}, which is identified by the chaining mode identifier \texttt{0x00000000}. Since there is no dependency on previous confirmation codes, the remaining $32$ bytes of $\B_C$ are the same for every confirmation code computation. To include the voting device information, the chaining field contains the device information hash $\HH_{DI}$ and is set to

% xxxx ---- eq. 73

\begin{equation}
B_C = \mathtt{0x00000000} \parallel \HH_{DI}.
\end{equation}

% xreqj {
  "section": "S3.4.4.b",
  "text": "In the case of 'No chaining', EGRI computes the Chaining Field `B_C` as specified in EG DS v2.1.0 eq. 73.",
  "sc": "" }

% xxxx jLHQH/tFNP5vClDFXY7EuZcRhDSctUkkm2tjWjJgSmsruqm0ijEI9Kj7FmLlPDNvkxRwqltjoQ1/
% xxxx xOdGSE5UwYHrl1wABoHxLxqLGKrQ9x0ZUerq34YPGmIrvdwXLJjfYnw8yhJHkr2K403wndk/RsYV
% xxxx nU/T+z4Ax+cI7NgigNNdRw+TifVpReLKh4807dfZA+/+IvYr5RassP8aZXVTMPKMZ+xdaH0tEM/n
% xxxx Kfx6rycWB0yaCAUSbJB9VyG5o8hbDJisftgCTqDKRU+bM2NCKc/p/s3KDZx/TCGFnO1LLfolVbFS
% xxxx MUJF5gXsPUDhGAZ/RgRR2QZZhH04mOwlFO9O2qFKkAZ0KkMLSHvqLqpXsizlUi/oWWbVG0dve9Ee
% xxxx Ezy8C4LAaiVTu4sP26ZHZX0qaAtAQ4k10H+mxZG5tNLFiFEJF582DALW0tZkQWmrCVheavi1HYrW
% xxxx vK7dG8KsRl1e3bKwHPS0Qndlh7XewfrzK5OgUswgBS3RPabN9NhwVO3mZYtfGzR1VxyRrisuUHVP
% xxxx F4nTha8CCCtf/edww6tkrni7yUpZKjP9ROdnkMygPomHaoxlv3F9ncy12gXuwqmdjIp4Zqn0VpZd
% xxxx Sjiwy2E6B/nyaq70ITHMKhP0NmfO3tP0zEy0JRqHoMP8vJDQNA9ivXgWamAM8+9a/Pjut6s2JTd7
% xxxx CSHP0oob5UzpK01vFj2DEl0xgIsPAHZ4NbNFkTx3w4+NJW9vAle3qAOOQFVy0oDWnDg8MoLB8M48
% xxxx
% xxxx
% xxxx ---- S3.4.4.c pg. 43 Ballot Chaining - Simple chaining.

\paragraph{Simple chaining.} The chaining mode identified by \texttt{0x00000001} is the \emph{simple chaining mode}, where a confirmation code only depends on the confirmation code of the previous ballot (except for the first ballot voted on the device) and the voting device information. It is specified in detail as follows.

The simple chaining mode hash chain is initialized by computing

% xxxx ---- eq. 74 pg. 43

\begin{equation}\label{eq:hashchain0}
  \HH_0 = H(\HH_E;\mathtt{0x29}, \B_{C,0}),
\end{equation}
where the hash input

% xxxx ---- eq. 75 pg. 43

\begin{equation}
  B_{C,0} = \mathtt{0x00000001} \parallel \HH_{DI},
\end{equation}
binds confirmation codes in the chain to the voting device information.

The confirmation code for the $j$-th ballot when $j>0$ is then computed as above via
$\HH_{j}=H(\HH_I; \mathtt{0x29}, \chi_1, \chi_2, \ldots, \chi_{m_B}, \B_{C,j})$ and the chaining field byte array

% xxxx ---- eq. 76 pg. 43

\begin{equation}
  \B_{C,j} = \mathtt{0x00000001}\parallel\HH_{j-1}
\end{equation}
contains the confirmation code $\HH_{j-1}$ of the previous ballot (or the initialization code $\HH_0$ when computing $\HH_1$).
The chain is closed at the end of an election by forming and publishing

% xxxx ---- eq. 77 pg. 43

\begin{equation}\label{eq:hashchainclose}
\overline{\HH} = H(\HH_E; \mathtt{0x29}, \overline\B_{C}),
\end{equation}
using

% xxxx ---- eq. 78 pg. 43

\begin{equation}\label{eq:hashchaincloseBC}
  \overline\B_{C} = \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x2B}, \HH_\ell, \B_{C,0}),
\end{equation}
where $\HH_\ell$ is the final confirmation code in the chain.

% xreqj {
  "section": "S3.4.4.c",
  "text": "In the case of 'Simple chaining', EGRI computes the Chaining Fields and Chaining Value as specified in EG DS v2.1.0 eq. 74 - 78.",
  "sc": "" }


% xxxx GyikHTUfnpILjM6bLUDlRJo9L4QCcdlQsXZTz5m8b0hi2mg4wROvSotCKSvMUYlgSGqDC5cNxvJC
% xxxx lLWEWz4Mh5PmTnws0tz5t7+WdQhi16AKi3kTC7nRkfeNWHgOpMOSe8R6L2V8GNw9ge0e0eLv/ZhH
% xxxx bAVgqfOE48BM/8A8J5kLdXh0aLUxGfem2cMtWH3R+10socJ/5wSWcGimMbBGrqtDbwXhf1P1MBEl
% xxxx 0gcnDPAy3V4U3hGyYs/GP0Gt8PIf639TSIaCYbbWwnCq0iZOJvoMY5mGjQM+O73oPnO/gGczWT34
% xxxx utAmMSLJGPu79h98TIHHajqBYaSDEspRN/VVLcIvHl/+q6yVRFyOzCqsKSxaLeLJBlhjCMZtmK06
% xxxx fbxH0i3bCrGCArxE18NNaElupTeOfftt3knxxrsiAI0TlwjX+nAdZ73l+VF1qC9x/vzYKfpcXJ/N
% xxxx 5HJm6u4Q9GKdASRklvD48Uf3yp3gbzo5WnEDkwNf6yZVus8Z6VsOKjlbdPArhUmXyxhhKavn3Brt
% xxxx rqA+SZOq2N94m+VgsuEno9YbKzzXdzafHeRiP0Dt2eMjBgHUd5rOBRRAWiX/1fBRzndeUQOuDzLs
% xxxx qApP9YRynyALv/6276uucgOu/Afgw68/K9lijPkgMdfkEnKEqgn1j9piRYqpaP9vml8/s6u0a/XN
% xxxx NzbmPYweSYTtlDgd9y0SuP9wJvDcu5CUBF9IlfObvPAFNaQVrL3WYoHZOvkNLiuyAJm3JUE3UFWI
% xxxx
% xxxx
% xxxx ---- S3.4.4.d Ballot Chaining - Ballot casting or challenging.

\paragraph{Ballot casting or challenging.}
Once in possession of a confirmation code (\emph{and never before}), a voter is afforded an option to either cast the associated ballot or challenge it and restart the ballot preparation process. The precise mechanism for voters to make this choice may vary depending upon the instantiation, but this choice would ordinarily be made immediately after a voter is presented with the confirmation code, and the status of the ballot would be undetermined until the decision is made. It is possible, for instance, for a voter to make the decision directly on the voting device, or a voter may instead be afforded an option to deposit the ballot in a receptacle or to take it to a poll worker to be challenged.  For vote-by-mail scenarios, a voter can be sent (hashes of) two complete sets of encryptions for each selectable option and can effect a ballot challenge implicitly by choosing which encryptions to return (see Section~\ref{sec:pre-encrypted}).

% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI enables a method of recording the state of a Ballot as one of `VoterSelectionsEncrypted`, `Cast`, `Spoiled`, `Challenged`, or `ChallengedDecrypted`.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI refuses to decrypt a ballot in the `Cast` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI refuses to decrypt a ballot in the `Spoiled` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI includes in any tally operation only Ballots in the `Cast` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI enables decrypting a ballot in the `Challenged` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI refuses to change the state of a Ballot from the `Cast` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI refuses to change the state of a Ballot from the `Spoiled` state.",
  "sc": "" }
% xreqj {
  "section": "S3.4.4.d",
  "text": "EGRI refuses to change the state of a Ballot from the `ChallengedDecrypted` state.",
  "sc": "" }

% xxxx Jm880Y9GCgVCCKy8zyfBinou19IDeDe2JbJ1yZNVtU21i1w4EAbIkz0aWXeD9xYd0DddT7XR0QPl
% xxxx rE079bFuh02Yyb1CZM1dNwOS3zW19eEjBcCJotk7RFaOSN4gO7MiCNrsJTmqQIOZdrRRnHTL2/+a
% xxxx BfbAui16ovDsgFTxymdtsFd5e72XZ/t3/55zlDry+K5NlHFfnR2yIQGUBZRC2cdsdDcA1WsHEiQu
% xxxx Jt+R4rIi3LHIiM52u89JMjcfw5PoQ+k2KMgmjcnvZMS0AEhVwgJreqBj7O8BtvpL7PPP3v9mhq5G
% xxxx 1JxaRGPIRozU/9eHbJ7OfOqasU32OfxbfU3umcWDCHFJbNr3XJ8ZGmeX0hbVgZ5WgMuJuHSn8RVK
% xxxx kcmJUFeR7UY5Eg4ft3nXuydw0GpRSbfbC5hPWAagZA8+YblLy9WDjYOCN65UuS+8UVc7m4MS7d9T
% xxxx 5piVqwgM+YGvAhTuWWtkK7zjprR2sz1M3O5KCj8g6RHWvgmqSICVJQ+0mSjhpvlqXGKjqjQfCAPE
% xxxx UKB62F0nWAJzkyn1r7zJqNa1Y+f4fhuAcgOnlPLKaA0aBq4XtikY7A3Tg2iNvSsYkqQQxBvGoGYC
% xxxx Jqn9vfxAozu6sPeXMhsXgn5Yz4xaIswiMnXlusQGqNH9FFAUq554NDZu4u3VaTcVRhc3FtBTdp7o
% xxxx ZxY3TgxQY5gMMw3XrHfwfYvrRnNjPZEca9xXZgolqWQaeMsSkCaf95rkCWp4fWbYkVT3fpySm5Ms
% xxxx
% xxxx
% xxxx ---- S3.4.4.e.verif8 Ballot Chaining - Verification 8 (Validation of confirmation codes)

\EGverif{\veriftitleValidationOfTrackingCodes}{\label{verif:trackingcodes}
\veriftextValidationOfTrackingCodes}

% xreqj {
  "section": "S3.4.4.e.verif8",
  "text": "TODO: Verification 8",
  "sc": "" }

% xxxx Yz5a/Hs/OVr3/+2aI/agIQnSXekFZ0zJmELE0vpFNv8HeYngBzVR0OrHi9cMIbWTD6PS8HD1D0dT
% xxxx VYyjsOfDqnEjoC9TjNS8UmF3/USuljQoOAffmdz5/8gPeboGkBR7Y+e7J2u9RfjXrQ7VovS2beB5
% xxxx 9J/iUs9cqybk4tZ+jMnzMalaWRTwViqP4dxkEzHGWIJDLyF9dx+mvwZlgma3x9XjN0I2dDDVTIR7
% xxxx FCcTVZHMg71DR5aj9I51exvOR8kRTNrOhidewYGbH6CoPOn3vDSowLSbg7j4Nvd8DjvFtKEAJC32
% xxxx mp7rrfAoThAZb0LxyQU5It9jEXNxKyx6lt9WJL44HkC53KEHOsXqb8FO6rnJG79xQQPGdnW9jmoC
% xxxx wkovD2FScg1zXaoYCq6E9e2kdAKF1t77EYQiRVR6aCFnNx5/7N0tXDCMpZ6DZ3EtF/mWWpnUaNv1
% xxxx Al7VgFeaeXMkwLv3G+cxRnTQ3s+28fmadXUUH3hJJpVk062nLKI7HSZtNhxbi4hKVD42S6vVIWiP
% xxxx gHnkn1lMI1+Qw/6p9KWt3QeTD3KwsDYxQdJJNV0vwScHF6pswSZGEuGKYRQw1yadF3P/ZcVX3w3T
% xxxx ApLSSq4Zjse8fgpnFNt9sQIcULZbbTM6bIJwIcC4sECobT8eOESFE5Mk7j0y47yxXWcDGtkNHISc
% xxxx l8HTjWlLhjfZAUl8I3J1XIJSWi7cAy/vdKdrnll4jd+Al+5I17SN+04QoWVBKNz8vK3KRKMEpAIM
% xxxx
% xxxx
% xxxx ---- S3.5.a Ballot Aggregation

\subsection{Ballot Aggregation}\label{sec:ballotaggregation}
At the conclusion of voting, all of the ballot encryptions are published in the election record together with the proofs that the ballots are well-formed. Additionally, all of the encryptions of each option are homomorphically combined to form an encryption of the sum of the values that were individually encrypted. The encryptions $(\alpha_i, \beta_i)$ of each individual option are combined by forming the product

% xxxx ---- eq. 79

\begin{equation}
  (A,B)=\left(\Big(\prod_i\alpha_i\Big) \bmod p,\Big(\prod_i\beta_i\Big) \bmod p\right).
\end{equation}
This aggregate encryption $(A,B)$, which represents an encryption of the tally of that option, is published in the election record for each option.

% xreqj {
  "section": "S3.5.a",
  "text": "EGRI enables publishing all Ballots (with proofs) in the Election Record at the conclusion of voting.",
  "sc": "" }
% xreqj {
  "section": "S3.5.a",
  "text": "EGRI enables computing an Aggregate Ballot as specified in EG DS v2.1.0 eq. 79.",
  "sc": "" }

% xxxx WnyDmeXW6vuvPlOoWgpcvUxgjskd2d55vFgdqeZzcsDqN2gMEONOhcRWn+D4wwah4Ew+qZDPv2Vz
% xxxx O645D0KLUK3x5nUKUIS6L+OG032TIe1PciHZqbiEHzuJJ493+2of9qRsvureGeTth+8D44fKf93G
% xxxx 5rD4ckLQVBFm5fEL+flG/lSpZrKBlykeL8bzR0taTkL3XlEVXmARhvpiN+qSvQSdHgYILVxPLrff
% xxxx sGrDI7TDsNMXHu5ooOEYP1VYtMu/sc8kfSSHUKC1cLx0/5H++gLf0HO9ayYt5VXJerdI87CepJlc
% xxxx wTTGUh84XfXyd5lj1j8Jk7cIQIM4pzWd/bmCRM1bALn+npuI8IMIXzvPU3uoa93lH3SaxRLY0jXd
% xxxx +HgYh8KzLW7sScJzcMCPH3T0tW4R5TBjibk8oHZC4HOL98YwEXdtcCYZNTdOqbOtjrnBfh8IKR8O
% xxxx lZX+Ipvh2t13NoHhtJBvaVLycosViiIw0Q+FwLyJEppf3Op7HngDrncE+ydMIwqP3AwPDqJDb2Ho
% xxxx C0vecxNBuu6/3LCSFSf/PINIpaZ/ORUT3GyeOP7vrhBYaZwd+IDMLIx+Adu8DZ68+VV+pn9r9EY8
% xxxx RjC8fk5KYAjXbHXbota0k7NXIJ+GnjLeGBe7xihSZ7xqSjMqAnBV91KqoKVlsvqYMKEpxhO91iVR
% xxxx PLP7y7BYMJ6IpOQEKE9FpOIlkbvWxglMg2Krt3kJ39gcm0sQHhycS5PHnQgRfrRG/idNkmKO95QP
% xxxx
% xxxx
% xxxx ---- S3.5.b.verif9 Ballot Aggregation - Verification 9 (Correctness of ballot aggregation)

\EGverif{\veriftitleCorrectnessOfBallotAggregation}{\label{verif:aggregation}
\veriftextCorrectnessOfBallotAggregation}

% xtodo S3.5.b.verif9 TODO: Verification 9
% xreqj {
  "section": "S3.5.b.verif9",
  "text": "Every Ballot that fails to specify a Ballot Weight that is an integer inclusively between 1 and the maximum specified in the Election Manifest is considered invalid.",
  "sc": "" }

% xxxx KwUnxD6w4YFNxKdUL6uT33yDp0hr1oaoejzzSg4oHrYtnR89k4jFOoZBf5E1IBbOsX3is4vT4Fzk
% xxxx x9XbasNEvRIBI5lKshWYl3wM4RIYRbBKV+2dTGkV8Tm4Ci675+8FtuiMu6o39NDl2l24srTmrDg8
% xxxx zpFLaoH4k73QVc4caYGRDWCBny7CO3Y47ZXlJ43kSVtf0PlaZBi+Axhq7wDT5tbKPHnvqnYUj7ur
% xxxx sVRrBHDexGvKqT0XaKCBQb/qWYwo0/Mb6Y8ggfdnxrOvjRUdLMBrlK9PT6aSTMY2y7jmI+gJEmzt
% xxxx vD5AzyHroONB5M24fkNfwPthyW8wl/1OuMMgDqKE978RNjQelu77XwwvjBBnbYio1UQ4fQ+x+tYS
% xxxx gl3s9WW0lBAL6MI1c+fSGE6T3pOzAu+H3d7ZyRESrCNmoJ7xOvYvgAFV3sx5xwOmsqLdYSHNyf71
% xxxx Hxak5gotmWdVmc07Fhf/9ZwaFmJvwL0wlT3GfXeecPBoGgoJL9kakTmmemYcBQ8oEasCt3YpZfiF
% xxxx kJviB5p5cTFarKg0WSjpp+097gTZQ4MyOaXa0acN+ac1ptqXi2nxTEAQOP8I0OVjJC05uDtCLf6a
% xxxx 13JvERLizw9+W5bCK1eSo+bR6tLm/xWL95QQwDO0T1Yf0GafoGzb1lci0tZ6VH5Mq70/8em1d6Dg
% xxxx 84ryYdkOVsc3wlOtjRFZBJW+RvxeLPAwQCtd7TaMy9SbdzZKIAI3PqccmX2MfX/JGo/sJGdTX6Fs
% xxxx
% xxxx
% xxxx ---- S3.5.c Ballot Aggregation - Weighted ballots

In some applications, such as shareholder or stakeholder voting, different votes may each have a different \emph{weight} or \emph{scaling factor} $W$ associated with each voter. \EG can accommodate weighted votes if each encrypted ballot in the election record is explicitly associated with an identified voter and weight. Weights must be small positive integers to allow correct decryption of tallies. The default value of a weight should be $1$. The \emph{weighted} aggregation is then computed as

% xxxx ---- eq. 80

\begin{equation}
  (A,B)=\left(\Big(\prod_i\alpha_i^{W_i}\Big) \bmod p,\Big(\prod_i\beta_i^{W_i}\Big) \bmod p\right),
\end{equation}
where $W_i$ is the weight associated with ballot $B_i$. Setting all weights to the default value of $1$ results in the un-weighted case.

If weights are used, the equations in Verification~\ref{verif:aggregation} need to be adjusted correspondingly to include weights as above.

% xreqj {
  "section": "S3.5.c",
  "text": "The Election Manifest specifies a maximum Ballot Weight as a small positive integer.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "The condition \"If weights are used\" means the Election Manifest specifies a maximum Ballot Weight greater than `1`.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "Every EGRI API receiving voter selections for encryption receives a value for the corresponding Ballot Weight and rejects the voter selections if the supplied Ballot Weight is not an integer inclusively between 1 and the maximum specified in the Election Manifest.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "Every Ballot records its associated Ballot Weight.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "Despite the language \"explicitly associated with an identified voter\", EGRI does not represent the concept of \"voter\". If an external system is used to track an association between Ballots and actual voters, the impact on voter privacy and coersion resistance must be considered extremely carefully.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "EGRI enables computing an Aggregate Ballot from Weighted Ballots as specified in EG DS v2.1.0 eq. 80.",
  "sc": "" }

% xreqj {
  "section": "S3.5.c",
  "text": "When computing an Aggregate Ballot, the aggregation function must, using access to the full and complete Election Record information to that point in time, verify that every Ballot to be aggregated has never been decrypted, is not in a 'Challeged' or 'Spoiled' state, etc.",
  "sc": "" }
% xreqj {
  "section": "S3.5.c",
  "text": "If such a (decrypted, challenged, spoiled, etc) Ballot were somehow to be supplied to the aggregation function, it MUST be excluded from the tally, a diagnostic message emitted, and the offending Ballot identifier(s) returned separately.",
  "sc": "" }

% xxxx HsyM6KszK8nMhkLhnxPZWKIeb79fDe2M6aBtIUYLfjdkgenAFDB+TLEdQEBBVwJo44bWVs+1Spqa
% xxxx PKO1BCoDI0Dq6uKl3TTlcA0GrmTtraQw5Zm21KSIPlZrPNY4r9KjGzCeDTR7K+5MK+55fws0VtuV
% xxxx n3l7/57StGC+eL0TClImZlTdn1F5rNUfTSJuP9KQinxgB7i/POABTDNL+EOVMHZxJqyFjHJskyuu
% xxxx /1TGKqOMnt/KyLFEg6RRsWCzOGB8vWGzMTFbiIbqM6/pTQ93kESRvW64eYe7nHc7DW54DnC8LQjR
% xxxx ya3IoBUcSxEMvjpFORCNQdydRmEHmLoXebkKM2jYgud5RxlfmJWMLDCQATLUxbnVW2h7TpJigIw7
% xxxx VbX6dNyclg+liRmZON8Us+ot8AwDyXvsc2HAoPWQfmXtmf6m1A566a5Wib0iYBJTxaYsJyUk5DZX
% xxxx ynRCiU8WdYRODnuMB/sNqG1NUWyCKmmSHhvv5N2PmOyWGcne0QnI6Z0geZUPqPclRuHOScVYOz5P
% xxxx KeM5TMd6zusQVqP+Z/gBrOPrhsGabitGx1kWgMkF41MiJlMT+BVFd41CLUN8YsVDoLgme1WFj4Yp
% xxxx UXXhhf83SUvC/Vz091selUkZHkd3S1N9Tq+0Fwrm6ST5WcU0O30U95T0TwzRxVLU1cnkIw6lRvBb
% xxxx /rgfPcv0O5ZroMce8i9wRJ/Zi3i0S/UuZHf/7zphC5W4CdjrP3YD8HRH02pDU7XZKeqaRn53JpG+
% xxxx
% xxxx
% xxxx ---- S3.6 Verifiable Decryption

\subsection{Verifiable Decryption}\label{sec:verifiable_decrypt}

% xxxx 31a5h7tkbzqFTWhcW3yba7+0sNn7lI9Cwvy+tkM/xnWAcGPn8iYjvc0PcGwx18zg0gzPt9TPIwPa
% xxxx UxpAO/CeEbGKZevOGzj7v5x/7vPM65e/Qi6MnKaatPkDxveYbbT+5V+xcBHb+CRW0kH50ozE8aNx
% xxxx JE7hmLXsVcumWUbdUeH4eO8UpLOU8Mf3Y9HARGJ5fIc7Ebesk9NiOxsv6CrABanEmB6MX9V1Pro7
% xxxx SQrKlT6lXri9MYG9mhLz+82+CGOI+mXmkiO6Mnh9/e67W04Yn7eM/33b2N1Mcx/tfBmP1v5DDM/H
% xxxx av4Aiy9jmupOG2BvwyvQv84rmlJ/0gsqWOZCBbjDL68dNI9zQx8Viax3LIz08Mw2C8bnGxYvC9KX
% xxxx C1JbXjzVmZzUaUgdjIupnL5kgB+Wa1PS1nXNtKt6bGVvzj3jGCFAJXVVZiomGa55dhZHDjLjtJXR
% xxxx aOj24P+rGRsNJZj97FdXadEq709iqgRHHmAbannYZtsq/Cq7V54x8mPgFtxu/hD+JCp/IH9ad7Dj
% xxxx f7CXVsvvtNEf+AoRj2B+qQOsPF6kYHfgF06rvgQjib3Drxe5IpHCZtcRwFWyCAqMeXlIF/cvrNq2
% xxxx yvNglEm0cnj5yOpynhIvpr2TFCzrMwp37eJxhbIw+Chx2b3NwI9rP/a97wglalEJziI9NBP6CIBg
% xxxx ENwjOFdVLurExLyvoEXP+t0Y+v59kodGC6piRKelGVhfY+kYR0c+aspu+54Yw3KueFF72Z/9lGAf
% xxxx
% xxxx
% xxxx ---- S3.6.1 Preliminary Verification Steps

\subsubsection{Preliminary Verification Steps}
\label{sec:prel-verif-steps}

When the election administrator has populated the election record with
the sets of aggregated ballots and ballots marked to be challenged,
and prior to starting any decryption operation, each guardian must
verify that all the ciphertexts marked for decryption are correct.
This is necessary to guarantee that the privacy of the votes is
preserved and that the decryption data that is produced contributes to
the verifiability of the election.

In effect, Verification steps~\ref{verif:parameters},
\ref{verif:guardiansPK}, and \ref{verif:electionPK} have been
performed by the guardians as part of the validation of the key
generation steps.
%
Guardians must now ensure that Verification
steps~\ref{verif:extendedBaseHash},
\ref{verif:uniqueEncryptionIdentifiers}, \ref{verif:selection},
\ref{verif:selectionlimit}, \ref{verif:trackingcodes}, and
\ref{verif:aggregation} are successful, which confirms the set of
ciphertexts that need to be decrypted and their validity.\footnote{Guardians can perform these verification steps themselves or rely on parties they trust to perform these verification steps in their stead.}

% xnote S3.6.1 Josh 2025-03-19: The text "the election administrator populat[ing] the election record with the sets of aggregated ballots and ballots marked to be challenged" does not introduce a new requirement, this just refers to the process by which (Cast or Challenged) Ballots are added to the Election Record.
% xnote S3.6.1 Josh 2025-03-19: Though EGRS refers to "populat[ing] the election record with the sets of aggregated ballots", this simply refers to the set of Ballots in the `Cast` state, i.e., participating in a tally. There is a set of Ballots in the `Challenged` state ("marked to be challenged"), but they are not 'aggregated' and do not participate in any Tally (i.e., eq. 80 pg. 45). So really there is only ever a single "set of aggregated ballots" relevant to a specific Tally.

% xreqj {
  "section": "S3.6.1",
  "text": "EGRS enables a Guardian to review the set of Ciphertexts marked for decryption prior to use of their Guardian Vote Encryption Secret Key. Josh 2025-03-19: This will only ever include the set of `Challenged` Ballots and the aggregate encrypted tallies.",
  "sc": "" }
% xtodo S3.6.1 TODO: Presumably this ("enables a Guardian to review the set of Ciphertexts marked for decryption") requirement applies to any use of the Guardian Ballot Data Encryption Secret Key as well? -> xreq S3.6.1 EGRS enables a Guardian to review the set of Ciphertexts marked for decryption prior to use of their Guardian Ballot Data Encryption Secret Key.
% xtodo S3.6.1 Does EGRI need to determine whether write-in fields may actually be relevant to an outcome, or just always decrypt all write-in fields with every Tally?
% xtodo S3.6.1 Presumably, many Ballots will not have any write-in fields actually written-in. Does each Ballot record whether it has a write-in field written-in in a way that avoids the need to decrypt the ballot nonce during the Tally if write-in values are needed?
% xnote S3.6.1 Josh 2025-03-19: In theory, there could be a legitimate need to decrypt a provisionally-cast Ballot or other (say by court order), but such functionality is outside the scope of the RI.
% xreqj {
  "section": "S3.6.1",
  "text": "EGRI enables to communicate to the Guardians the set of Ciphertexts marked for decryption (i.e., challenged Ballots and aggregate encrypted tallies).",
  "sc": "" }
% xreqj {
  "section": "S3.6.1",
  "text": "Josh 2025-03-19: Multiple Tallies may be conducted for a single election.",
  "sc": "" }
% xreqj {
  "section": "S3.6.1",
  "text": "Whenever multiple Tallies are conducted for a single election, subsequent tallies should extend the current Election Record. This does not introduce a requirement for EGRI to implement any form of rollback protection.",
  "sc": "" }
% xreqj {
  "section": "S3.6.1",
  "text": "EGRS enables a Guardian to verify or refute that all Ciphertexts are correct prior to decryption. Ref: S6.2.3.verif4, S6.2.4.verif5, S6.2.4.verif6, S6.2.4.verif7, S6.2.4.verif8, S6.2.5.verif9",
  "sc": "" }
% xnote S3.6.1 Josh, Michael: The need for the Guardian's determination that all Ciphertexts are correct prior to decryption to be recorded in the Election Record was removed in EGRS v2.1.0.
% xreqj {
  "section": "S3.6.1",
  "text": "EGRS enables a Guardian to participate in the decryption of a set of Ciphertexts that both 1. belong to a set that has been marked for decryption and 2. have all been verified correct by that Guardian.",
  "sc": "" }
% xreqj {
  "section": "S3.6.1",
  "text": "EGRS does not assist a Guardian to participate in the decryption of any Ciphertexts which does not both 1. belong to a set that has been marked for decryption and 2. been verified correct by that Guardian.",
  "sc": "" }

% xxxx rM41NZFzdEFXAFnPslpErt082YFPJSzjcaE771vygwXXuHJphZiPxbgFVkGzlhGrBIHkSUPx/QrQ
% xxxx IAC+ohBhTJKHUeLEDLdIm3gtuN0Aov/zhbVrQILPPkQToMMySgDEojCN0Cqjxv7duPM2Yl+Ths+F
% xxxx 2giWSppstkY3eGnnAraHo7SbXYgPpFW/tWKtBnBU9mpSg26LGXxD6ZbgbvUY9ov/wZREFeJJJvft
% xxxx /5S2RP+6hmiq4kR7MHHfGX2tiaGe7JUJgMn/eanxUcwJIjlZk3QI00qdR0K8A8xBsAhMCkqanJbb
% xxxx Sxndroah1jN35gkzJtXNtIrC8hza/rUHBkeXtRzZ2KnZtXEzJCGMsIyILDfKueArq8jE7o7sEwlH
% xxxx GXI3i5p5wYhgw/q/1G2j5MN105JnEUcsqf54cIkmqHX92PpnJHCVeee0k6tTAXM+dyw/se6Vf8iX
% xxxx w1JqwbGCnqm4g0ZSUzeSqs7ttfr/RL/5vpnfGo56FsKjF1cTtc6lydGbj+mulOTr1sNJF/jFo92Q
% xxxx silx5JGRuwfdPhVBV01hj/F17/EkrwBv5/YyeIeZ+NgeR8qLVjaT6fpmAfSu4CAHx8kCtrhbxfVG
% xxxx mwezejKy9/PV1iP8lA9wld7UVSBR5vMOiVaSeUFV+AvvGhN2NI/X7aIsV0RD4RM8YnTQ6kYzaNex
% xxxx TJCVyyaiTACOAhLijHg3PRM2qWbfKCiVVYGpiWCK7u1LB6wL8toHzyDABV09SNhDO7RSWngraVAp
% xxxx
% xxxx
% xxxx ---- S3.6.2 Verifiable Decryption Strategy

\subsubsection{Verifiable Decryption Strategy}
\label{sec:verif-decrypt-strat}
To decrypt an aggregate encryption $(A,B)$, guardians work together in a protocol, where each guardian produces a partial decryption and contributes to an accumulated Chaum-Pedersen proof of correct decryption.

As long as at least $k$ guardians are present for decryption, the partial decryptions produced by the guardians are used to compute the value

% xxxx ---- eq. 81

\begin{equation}
M = A^s \bmod p,
\end{equation}
without ever computing the secret key $s$. This value is then used to obtain

% xxxx ---- eq. 82

\begin{equation}
T = (B\cdot M^{-1}) \bmod p.
\end{equation}
This $T$ has the property that $T=K^t \bmod p$ where $t$ is the tally of the associated option.

In general, this final computation of the tally $t$ from $T$ is computationally intractable as it requires computation of a discrete logarithm. However, in this application, $t$ is relatively small---usually bounded by the number of votes cast. This tally value $t$ can be determined from $T$ by exhaustive search, by precomputing a table of all possible $T$ values in the allowable range and then performing a single look-up, or by a combination in which some exponentiations are precomputed and a small search is used to find the value of $t$ (e.g., a partial table consisting of $K^{100} \bmod p$, $K^{200} \bmod p$, $K^{300} \bmod p$, \dots\ is precomputed and the value $T$ is repeatedly divided (or multiplied) by $K$ until a value is found that is in the partial table). The value $t$ is published in the election record, and verifiers should check both that $T = K^t \bmod p$ and that $B = (T\cdot M) \bmod p$.\footnote{For larger values of $t$ (more than 20 bits), Shanks' baby-step giant step method can be used as described in Footnote~\ref{foot:BSGS}.}

% xreqj {
  "section": "S3.6.2",
  "text": "(Ref: S3.6.1) \"EGRS enables a Guardian to participate in the decryption of a set of Ciphertexts that have both 1. belong to a set that has been marked for decryption and 2. have all been verified correct by that Guardian.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.6.2",
  "text": "(Ref: S3.6.1) \"EGRS refusues to assist a Guardian to participate in the decryption of any Ciphertexts unless they both 1. belong to a set that has been marked for decryption and 2. have all been verified correct by that Guardian.\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.6.2",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a Guardian to compute a verifiable partial decryption...\"",
  "sc": "ace" }
% xreqj {
  "section": "S3.6.2",
  "text": "(Ref: S3.a.f.c) \"EGRI enables a quorum of `k` distinct Guardian (Vote|Ballot Data) Encryption Secret Keys to form full verifiable decryptions of the election tallies...\"",
  "sc": "ace" }

% xreqj {
  "section": "S3.6.2",
  "text": "EGRI enables a quorum of `k` distinct Guardians to compute `T = K^t`, for every Contest (Option or Additional) Data Field in the election. as specified in EG DS v2.1.0 eq. 81 - 82.",
  "sc": "" }
% xreqj {
  "section": "S3.6.2",
  "text": "EGRI enables a quorum of `k` distinct Guardians to publish `T` in the Tallies of the Election Record, for every Contest (Option or Additional) Data Field in the election. Note: This is to handle scenarios in which the discrete log of `T` ends up needing more computation than the Guardian quorum has on hand at the time.",
  "sc": "" }
% xreqj {
  "section": "S3.6.2",
  "text": "EGRI enables the practical determination of the tally `t` from `T = K^t`, for every Contest (Option or Additional) Data Field in the election.",
  "sc": "" }
% xreqj {
  "section": "S3.6.2",
  "text": "EGRI enables the publication of the tally `t`, for every Contest (Option or Additional) Data Field in the election, in the Tallies of the Election Record.",
  "sc": "" }

% xxxx AJpUS1DAi571iitFgvff+1vR4/Sg4c77mTnq5zooRloWVwGCkYoDNFbtOGA6qJpn8skbBlw44iKq
% xxxx Lj98cBhT5QCNkYajeEsGIUOTGHLhPwf4psIHCN/gM0pXRSMqAWM1vBrNCH4FTEQORqwzjbjHaMUT
% xxxx sObwGnalx//oGVcm8BGVX2LUPymSuAHuaYYwcSrawVkOUahJnvcMfCW2meUcMUfODt/Ngido7CVS
% xxxx G6VqHyt6BFeHu5llWme3o77gBEuAVlQXgIIUK2H5Ak9FvKvxkKmVrKbYwytx82WHDICJOEbzieGX
% xxxx 5x6h3DgyIGfU2RHpbGAkkpaC+ZFDtywELDcq93jn9CpCsZCXAJ31QfiR1eFCIpWGeGB48aICOcPn
% xxxx BMCdehYeEHmnc//xURuy07t4G5p1x3WgiTNq/C2zsFiDxpONPN+IJcykLGoO5gNP6V1nB/HOlchg
% xxxx oGFT44QsAiBBp/Memn4Ul4KY2GyUtJEXcGtg3dhfLM4X/YyXAQVtNsV01uo96O9i1CArbC7+jRAh
% xxxx Dm6+ObzOIB703Dp2XrG6lmciubaMW0D9iYLn5Td83vOWbQ7lQMp2qNBxiZBZbMOOukajtme/enU/
% xxxx aZL3we8BzBdlca2CPNsWSZMmYhnlB3WDLUMyTIOzb87oFcEiEa9nrBSpLqpkVnq16W7P7ZXSgE9N
% xxxx Iu6OVh23+rHFJ9Wk1RwEWImFO4uWqqiDXiwVU24fpD3FctHhvjucZrJCnBVoUrSPkJFjOn5ueaqy
% xxxx
% xxxx
% xxxx ---- S3.6.3 Partial Decryption by Available Guardians

\subsubsection{Partial Decryption by Available Guardians}\label{sec:decrypt_missing}

During the key generation process (as described in Section~\ref{sec:keygendetails}), each guardian $G_i$ has received from each other guardian $G_j$ a share $P_j(i)$ of $G_j$'s secret key $s_j$ ($1\leq i,j \leq n$ and $i \neq j$), has computed its own share $P_i(i)$, and with all shares $P_j(i)$ for $1 \leq j \leq n$ has computed

% xxxx ---- eq. 83

\begin{equation}
z_i = P(i) = \left(\sum_{j = 1}^n P_j(i)\right) \bmod q = \left(P_1(i) + P_2(i) + \dots + P_n(i)\right) \bmod q.
\end{equation}
The value $z_i$ is $G_i$'s share of the implicit secret key $s = (s_1 + s_2 + \dots + s_n) \bmod q$.\footnote{Guardian $G_i$'s secret key $s_i$ is the constant coefficient of the polynomial $P_i(x)$ and therefore the implicit secret key $s = (s_1 + s_2 + \dots + s_n) \bmod q$ is the constant coefficient of the polynomial $P(x) = (P_1(x) + P_2(x) + \dots + P_n(x)) \bmod q$. The collection of the $z_i = P(i)$ are the shares for a $k$-out-of-$n$ sharing of the secret key $s$. It is important to note that this secret key $s$ is never actually computed; instead each guardian uses its share $z_i$ of the implicit secret key $s$ to form a share of any decryption that needs to be performed.}

Each guardian $G_i$ available for decryption uses $z_i$ to compute the partial decryption

% xxxx ---- eq. 84

\begin{equation}
M_{i} = A^{z_i} \bmod p
\end{equation}
that contributes to computing the value $M = A^s \bmod p$.

% xreqj {
  "section": "S3.6.3",
  "text": "EGRI enables a quorum of `k` distinct Guardians to compute `T = K^t`, for every Contest (Option or Additional) Data Field in the election. as specified in EG DS v2.1.0 eq. 81 - 82.",
  "sc": "" }
% xreqj {
  "section": "S3.6.3",
  "text": "EGRI enables a quorum of `k` distinct Guardians to publish `T` in the Tallies of the Election Record, for every Contest (Option or Additional) Data Field in the election. Note: This is to handle scenarios in which the discrete log of `T` ends up needing more computation than the Guardian quorum has on hand at the time.",
  "sc": "" }
% xreqj {
  "section": "S3.6.3",
  "text": "EGRI enables the practical determination of the tally `t` from `T = K^t`, for every Contest (Option or Additional) Data Field in the election.",
  "sc": "" }
% xreqj {
  "section": "S3.6.3",
  "text": "EGRI enables the publication of the tally `t`, for every Contest (Option or Additional) Data Field in the election, in the Tallies of the Election Record.",
  "sc": "" }

% xxxx EB8ffcy4p57Sn1sR5BJa1RskK5vgqREPRKDnFho9V5yLE3snlFKNi7qdworS58nF2gkHx4zTBUc4
% xxxx 7jioPP+a7UIb+UHStnycL2oBwdflE65MmsbK0WfqGQ5XDc8g1N7nDhBhL0O7K662V0pmWuE4Zu0z
% xxxx KZMGto3SvG9ajBpFrCrdwJWpzuAXRXON0no4M7aQAgG3PUeIEfPPZDI78t8tdWVGcAWDkIhAm/nz
% xxxx pfO29Cn8X0mtA5FntaJ5MhgUVdxe/CweXGur0irouClTBtZM5vAB10G28074oMAx7FoxQd4HG3g3
% xxxx +3iSaiRjR3SDOi7kUB34YUghmiVvttqayjn3C3MKewthrcHMkklnbcSwZH+Fz0eGi9byUtntHF4G
% xxxx 0JgeVKIVXTNSkVBMwZtsD/8kdL1Ejd72whUmh88ivRZCiqbnu1+P2GaAX6TbiUJmYA/66mCzUJt+
% xxxx kMnkI7GoDGnWBCdsM0aRRceOfVVNoqtBReBobC5ImCgWaYmW7/Bdj0v0VZ3rUPo/vgbPU6aA04Z3
% xxxx sSpnaToYhONC51Umo8dg2Uz9Ic6dYtVxet2tqYOiO6SNAwUtPklw/eMk1yTI6z7X4Pmh2YBAW3/2
% xxxx E53cYsdoD+NwTV95sFxximuil1niawDuOhqDGIn7PMzLzeqyG0mCEyO3Q/17fvVO5l1jZFiqckpA
% xxxx Z5UXKrMw0yWAd63Id8yshRs5HfJ6xe+2pZnz3/3RicUb17KV3TWaLH7bAjvu+pBvg3exKGqXbMKZ
% xxxx
% xxxx
% xxxx ---- S3.6.4.a Combination of Partial Decryptions

\subsubsection{Combination of Partial Decryptions}\label{sec:decrypt_combine}
The partial decryptions are combined to obtain $M$ with the help of the Lagrange coefficients that correspond to the available guardians. Let $U \subseteq \{1,2,\dots,n\}$ be the set of indices such that $\{G_i : i\in U\}$ is the set of available guardians. For decryption to succeed, a quorum of at least $k$ guardians is needed, i.e., $|U| = h \geq k$. All available guardians participate in the reconstruction even if $h>k$, i.e., there are more guardians available than strictly necessary for having a quorum.

The Lagrange coefficients corresponding to $U$ are computed as

% xxxx ---- eq. 85

\begin{equation}
w_i = \left(\prod_{\ell\in(U\setminus\{i\})} \frac{\ell}{\ell-i}\right) \bmod q.
\end{equation}
These coefficients are used to combine the $M_i$ for $i\in U$ provided by the available guardians to obtain

% xxxx ---- eq. 86

\begin{equation}\label{eqn:threshold_decrypt}
    M = \left(\prod_{i\in U}(M_{i})^{w_i}\right) \bmod p.
\end{equation}

% xreqj {
  "section": "S3.6.4.a",
  "text": "EGRI enables the combination of partial decryptions as specified in EG DS v2.1.0 eq. 85 - 86.",
  "sc": "" }

% xxxx oHG0FXjEAqXdccsyVpbvERsjLiO7+vgigETRTM1OthOkcGoiOvXzJ7Ra0kdwn944e2UzFe9HxIri
% xxxx b9o6xdD+kuvVHhEgBWAWLicfmar3AUOyfNosbkA01uqhxADMJlwxqPnr3eEV+5gonZOPwBMdOJ7W
% xxxx sLitGwe9QdmqIeZX88GRpwURTtFiL037byVQ+YroQ+WjoCrvZNLeeWPmnawvVtodOHDgM0f9RDVD
% xxxx e9Wo3XDheQY4QxKSQh3ds3l5Ve2KrNA9oypBgosZSnpDlHLbKafFBX9Oz7Yq/qkyMKGei0NrXI7d
% xxxx AmXiNkEB3WZqjxA9spzsOQcdXxsyVVj5ngTk7GAiNpvV/QdsRGxM66OMGj0M4z1yHLvp6Ipj/vrE
% xxxx CvavOMDT9DV6y5/XTSXEjzsc+Ii3voLnXTccA3M6+41u/wlvro+2JNvPzu1qC5YoRFOU4Xzm7HKO
% xxxx XJKFAgakkyvms5+isFUFHrPKN3G57TkT8fkRAhnGqDU68UyoF/9yIh6lfkOGwcjismxh9TNN1mzz
% xxxx ekC3vjHXcEkmB+18bf3xL9bwkcRZ/wHd+9lEu4lbGiwRt1R1teo5foPQtX02NzPR+KtOKxMswOC8
% xxxx GZw26YUuvivlSy4sXtc9um1J+UPEcrRYEGkvFdWxxw8Tmqdn7a0vq3HeD109L+IleOpW/SiK962s
% xxxx ZOWZnRCYUe0iw+DvNFV2DdDlsparLjBxkAgcJKK0Yg99ZBzlkzxfnKKIl8WQxiJUQZNPXwbkKI6U
% xxxx W5PicWQoi07hwL9eqeJR3dCtlGWBde8ZpDRMoOMEY/BXzFOoP6budbMYNIFM1yt9Elj7gP+wiN5h
% xxxx
% xxxx
% xxxx ---- S3.6.4.b.n3_6 Combination of Partial Decryptions - Note 3.6

\EGnote{The decryption $M = A^s \bmod p$ can be computed as shown in Equation~\eqref{eqn:threshold_decrypt} because $s = (\sum_{i\in U} w_i z_i) \bmod q = (\sum_{i\in U} w_i P(i)) \bmod q$. Likewise, a missing secret $s_j$ could be computed directly as $s_j = (\sum_{i\in U} w_i P_j(i)) \bmod q$.
However, it is preferable to not release any missing secret $s_j$ (or the secret $s$) and instead only release the partial decryptions that the secret would have produced. This prevents the secret from being used for additional decryptions without the cooperation of at least $k$ guardians.\vspace{2pt}\\
As an example, consider an election with five guardians and a threshold of three. If two guardians are missing at the time of decryption, the remaining three can perform any required decryptions as described in the text above. If, instead, they take the shortcut of simply reconstructing and then using the two missing secrets, then any of the three could, at a later time, use these missing secrets together with its own secret to perform additional decryptions without the cooperation of any other guardian.}

% xnote S3.6.4.b.n3_6 This section generates no unique or specific requirements

% xxxx t1+kBba/SblyHM9NI+NRT/u5GR/ISPUUSJvnBlfn+dzb/c6ves3PYXTCyU0u1nA1QpUJ9gW6/K2W
% xxxx pDNdaUfBs9j8q5cTSX9NDQNyhoX0ruwMSe91mBqwFvAf8GbWzrnAeBAC9QKqPs70Jfw3Syk5nRPI
% xxxx Se1339TxMCFjlrh5du+Yd//EicuTJVy7y/JcA51TTa4Hjn/jKk5hSevCWw9ZW2cs9L/Ya1OJ7FYG
% xxxx CpNORz1J2EWWgB8eClnrZCECvAcALTv1dgpO8w2T/+3MeShN1TXJBgtbE6/5a7J4UWu94qTgZyiO
% xxxx dSaElV2WiVvipIB/i0ExCIeEAWm9riFuS+QfUtEDhrvIjfwhZkBXYu5n0D9v1fxvE2e3rNDA7Rge
% xxxx 4+yccMCR6gsFuAO+99Y0HCNtYlezkmByBqxXMslNrY49GoWz6fss4nqhO3nIt9N02IqJLdFyl3Ey
% xxxx ObJCzixZvgl3szxtVXOQwOFyRMTnzLdD5f66Hobm3ggFETMnjdVbFSeChYRKPTGyLxoaxOHLwQyF
% xxxx AZJEuPakiGQDhP+CV3r4T3MbjhL39nQ+VCtSDwHcum8qYib98JNJFOAK1dAawJpEhUIFGkrrMwqX
% xxxx r3rIbpsd3IG51R23RoFYMJRnn1NOEUxV6xHGzbfXv8BcnWyR1HERUVkZx9bHZOagwwrkfPSEsYdb
% xxxx UbfXskMcDW3yQObk82GGzLM+7907zhEmh12HUyjZ1Ybxs2DiIsyBWodOilcmWJCLtswg37gAZWCy
% xxxx
% xxxx
% xxxx ---- S3.6.5.a Proof of Correctness

\subsubsection{Proof of Correctness}\label{sec:verifiable_decrypt_proof}
The available guardians work together to produce a Chaum-Pedersen proof that $M$ was computed correctly, which means that $M= A^s \bmod p$. The proof is computed as follows, for each option $\lambda$ in each contest $\Lambda$.

% xnote S3.6.5.a This section generates no unique or specific requirements

% xxxx ab7kaEqluqsKRL9Qjr3Qtd6JMe9lj4+GM5UzxoBEkiEb+UFXsGdxdBbNmYQqZwO2iWU/mqPBDCf9
% xxxx 6L+Xx8SbIPWS6rEkb5GXNlzKUKCHJO1+R38sAAAZ1Ut3XY18NHmFjX1g85Pr/XsAM2s+8/up2rcx
% xxxx nSxcO65btVYgWPO6aufDGyF//wdN/81GHy4zDfeGkZNUTFawcUc//3cTxE0MQAJfit4SBiK7ukdy
% xxxx uBzJdx0hhtzMZlTC4are8YB97UvzJA2Do3ySma9A+KIYPszhPDvQ//89zrRTHZ7uC5IdtQhbRwvJ
% xxxx FA2Uq/FBC7A1nbEL8JTwqVB8shAwI69UqdAbx5Xl8B8j60DM2WEgmimRQjmXaRjo33YMGRAXw8ty
% xxxx ih41uaTXO4YpqmboJtHAgDdaCA1RejcgmBo5EZA+YGhqzDsY2VE1MrM1CWCfi60vhrYPPpyf2Zhr
% xxxx UipZyEbiA4WQUVDNTJG//340yYRGONTdK7O82+S8w5QRvtBMU3KioyyYsFnnqW+OV/JhSbj2yTBv
% xxxx JuKyCpeVfp1X2D5iNUr/7DbHx2fHMdeLavYC0s/XGQY80vIrKsDsAIqpYRvO5BKhlYWWRMWoAB8p
% xxxx dtq1vakksXgu6uer6qtAp+ERY14nR0CvCzzQUbVih7mBuEWMMtdTF95in5X4YtIdctCtFnMMv8xl
% xxxx 0vf+TSyBHadyzlaXlCq6n/grb3r623TQYFxjJgB4mfaRAHG6RETvJIj0WqndXtm7xccGsIVJnP8f
% xxxx
% xxxx
% xxxx ---- S3.6.5.b Proof of Correctness - NIZK Proof

\paragraph{NIZK proof:} The available guardians jointly prove that they have shared knowledge of $s\in \Z_q$ such that $M = A^{s} \bmod p$ and $K = g^{s} \bmod p$.

\noindent Each available guardian $G_i$, $i \in U$, selects a random value $u_i$ in $\Z_q$ and computes the commitment pair

% xxxx ---- eq. 87

\begin{equation}
(a_i,b_i) = (g^{u_i} \bmod p,\ A^{u_i} \bmod p).
\end{equation}
Guardian $G_i$ then commits to $(a_i, b_i)$ by computing the hash value

% xxxx ---- eq. 88

\begin{equation}\label{eq:commit2commitment}
  d_i = H(\HH_E; \mathtt{0x30},\indc(\Lambda),\indo(\lambda), i, A, B, a_i, b_i, M_i, U)
\end{equation}
and, using the administrator as a mediator, sends it to every other guardian $G_j$, $j\in U$, $j\ne i$. Only after having received a value $d_j$ from every other participating guardian $G_j$, guardian $G_i$ sends the pair $(a_i, b_i)$ to every other guardian. Guardian $G_i$ verifies that the values $d_j$ have been correctly computed via equation~\eqref{eq:commit2commitment} for every $j\in U$. If $G_i$ does not receive $(a_j, b_j)$ from a participating guardian $G_j$ or if equation~\eqref{eq:commit2commitment} does not hold for any $j\in U$, then guardian $G_i$ halts the protocol and complains.

If none of the guardians complains, the $a_i$ and $b_i$ obtained from each guardian are used to compute the accumulated commitments as

% xxxx ---- eq. 89

\begin{equation}
a = \left(\prod_{i\in U} a_i\right) \bmod p,\ b = \left(\prod_{i\in U} b_i\right) \bmod p.
\end{equation}
This means $a = g^u \bmod p$ and $b = A^u \bmod p$, where $u = (\sum_{i \in U} u_i) \bmod q$ and $u$ is not computed explicitly.

The ciphertext $(A,B)$, the commitments $(a,b)$, and the combined value $M$ are then hashed together with the extended base hash value $\HH_E$ to form a challenge

% xxxx ---- eq. 90

\begin{equation}\label{eq:nizk_c_dec}
c = H_q(\HH_E;\mathtt{0x31},\indc(\Lambda),\indo(\lambda),A,B,a,b,M).
\end{equation}

The challenge $c$ is adjusted by the $i$-th Lagrange coefficient to produce a challenge $c_i$ for available guardian $G_i$ ($i\in U$) as

% xxxx ---- eq. 91

\begin{equation}
c_i = (c\cdot w_i) \bmod q.
\end{equation}
Next, each available guardian $G_i$ responds to the challenge $c_i$ with

% xxxx ---- eq. 92

\begin{equation}
v_i = (u_i-c_i z_i) \bmod q.
\end{equation}

An accumulated response

% xxxx ---- eq. 93

\begin{equation}
v = \left(\sum_{i \in U} v_i\right) \bmod q
\end{equation}
is computed and the decrypted value $T = (B\cdot M^{-1}) \bmod p$ is published along with the proof $(c,v)$ in the election record. Note that $v = (u - c\cdot s) \bmod q$.

% xreqj {
  "section": "S3.6.5.b",
  "text": "EGRI enables available Guardians to jointly prove that they have shared knowledge of $s\\in \\Z_q$ such that $M = A^{s} \\bmod p$ and $K = g^{s} \\bmod p$ as specified in EG DS v2.1.0 eq. 87 - 93.",
  "sc": "" }

% xxxx 6BE+WoxwSknD/O8hOTFLEmKUzoyJmSsuXFDXnSgg6ogXdENHI7REDMZwpd1GtsJmCyyz+eRKIx7a
% xxxx DxVkUFnvWlynS/Nj5WT8JPaAWdVwlVSGBTewtZor/8QjcPiVXlWprmOjDzrMbUpr5Taxcq/TTiLv
% xxxx WKe9p9Q2Sz6OtuUm0ZFKa7s88JAlvyB5D2CJCI8CENrlLKEvmi12ZQ6kkmrClXZbGLP4LqodXKFH
% xxxx yWOwno3aF+Ei6hhgwWjwOE+JTEIA7Bfv2BLYe8HlyrCwqbQOH200+INesrt6ymbatTSE1v9zDTbZ
% xxxx 9nnu0uSuYJ4YO5/VgMaPv2b2vjhO8jmfP6ggFvNB3dj7kd2R0YXnIRoc6Lo6izvap4/IJXHjk5rS
% xxxx gMXCEszmNRrYmTqlVgu/xbxw7WHnVmPQX5EgxaFyexdZ7IF5bCJpJnPLoVytlGxWh882ZJ7U2whq
% xxxx mGuJame5hMYP5u5zEzkq+n8Sl+R0cg/caSBQGY5MWdkU3SodvmlLu4WTSzls1+nt3vVbvteAN7W/
% xxxx rQSOx5Ma6yHHtOu4MunkhdjfIge3bKJsIyAbudoY9JOxycJ4tzjmm1mDk+L6Equ62rAOoz+DD8kB
% xxxx GK4hGT1aONwrt8emdEMzitzvIIgOfBXGmr3yEYJ52oK7hUOnZwmfXBLq/sacO0OP+Opq4mzmaFeH
% xxxx x1PW/f8vDSIuwMrAC7QYeQ588/3/z5UHI5PyM2R4H66l67yxjKnqOMQnqObAms/mofr3ami3CO5X
% xxxx
% xxxx
% xxxx ---- S3.6.5.c.n3_7 Proof of Correctness - Note 3.7.

\EGnote{\label{note:decproofindividuals}
Individual responses $v_i$ can be verified by recomputing the commitments from the responses, the individual challenge values $c_i$, the guardians' commitments $K_{j,m}$ to the coefficients $a_{j,m}$ of their secret sharing polynomials $P_j$ (see \ref{sec:keygendetails}), the ciphertext value $A$, and the partial decryptions $M_i$ as
\begin{align}

% xxxx ---- eq. 94

a_i' & = \Biggl( \left(\prod_{j=1}^n\prod_{m=0}^{k-1}K_{j,m}^{i^m}\right)^{c_i}g^{v_i}\Biggr) \bmod p,\\

% xxxx ---- eq. 95

b_i' & = (A^{v_i} M_i^{c_i}) \bmod p,
\end{align}
and by checking that $a_i' = a_i$ and $b_i' = b_i$. Should the accumulated proof be invalid, this mechanism may help identify whether one of the guardians produced an invalid proof.}

% xnote S3.6.5.c.n3_7 This section generates no unique or specific requirements

% xxxx uxL1zfcA/m1Q3hxXE+Kh7xz1hHLbE/llm8tcJAa+X+LviT9P//mGU+DvfFxoqdGrDcDpOUDKFlYD
% xxxx v1XzAsH5q7i0keY1w1srTkW+phgJXXByTMY9pplWF6qxbPrpQoB5MBsGrDz1HoVkznxTZzihd8k6
% xxxx BVufuag/oDm7jAO63MS6cnJ6YP0wSTtOplcZPGD/6UxFy+a7Q3CljtLRNOYWur2nIoZA3OlFd6H1
% xxxx nPVI18AHhmT7Gp4hO/LXAMtuO92QibMeUmFzoPdbQGxagCFM8snrq79fkjzagXcebKehSUyWtULP
% xxxx lKDutA5ysZtYIOqMvRPiKnwTrMwU/APtvH5vRpHQqolsy3tR9CiXGUNEftqztWmHrKFPXbu3hv/W
% xxxx 8TN3oPoUgh3HiklNoP1k2eXTJq6Vcecl+9bna5sKeR7c+LkL4PMykK5hlDmpoSSqVYeSGytFEwne
% xxxx 75VW9UileRKXeP4gLnVPHIduhH7zYt3m4A5/wKjlXOatFJ9M2wHLxwsMzWD/Nl32oo3/M8zLsfq7
% xxxx k2aQQK6CU7/rxV2sTeZJYudsE+QHmlW0zTPr+1h2TeUesp1qcKm4Q9RFjKsLj5rM0aAQecIUsqMr
% xxxx luIatPXVtO03zwIosfJsyOf5hB1VdhVdfmEspb5e483EdkDivSpmRfy9yToEXtCfmK2jGNT3S5aq
% xxxx dmmMBXR5RQEHVcYh7x1M0ZI51sIiAU+QUckNHfUW59eUwL0wvhpAeN3FGvZjPNDg45DQtoriBFlv
% xxxx
% xxxx
% xxxx ---- S3.6.5.d.verif10 Proof of Correctness - Verification 10 (Correctness of tally decryptions)

\EGverif{\veriftitleCorrectnessOfDecryptions}{\label{verif:decryption}
\veriftextCorrectnessOfDecryptions}

% xreqj {
  "section": "S3.6.5.d.verif10",
  "text": "(Ref: S6.2.5.verif10) Verification 10",
  "sc": "nyi" }


% xxxx BduXSUKrSk5OMKFqvYly5b+So3JDKpGodRB5UTp2GzTHynYaixBo3WHjK82P4dq0a03f9Np4lU4a
% xxxx 6fSnZYnzR+UsUARgaWdUlfp3XwUDQ64DRWahJgOCemxbRh5HUzT0dFPsfj4ZfZKl6gS6VSWXPMmf
% xxxx 2FG0DXIfSaBVP4Wp57GrPfvD1nC8I/XKg+VwfXtDDzKwhIpyNPI2q6vQ13horoVcPw9oIE9gNDSP
% xxxx PFpmG6y52cD7oarlYPD38ZiXbUNRKlWBlayX4T9kYDMIS7S+0tXzhSvur7TK2vBqxOVzfru14OwD
% xxxx mDUrbi0AdD5w7oCKIMUYjQZ5qLXggO/ShVZQsRBrNH7O0+NNSRKMYhEMM835H8F0Td0MQPjvC1JF
% xxxx g5P7pGmy+jE9d1NXzoB2vN52EkprvGNx2UUi21LY7DKvdFmUnvGVsdwF+ju508sxFg1tECtlOXzR
% xxxx PoBvvH2JsizowUixI8G30HyzsmGacC04OLfSKMgNFI0cekBm8yXybglZfVlwB8bnFULvFmWdzrKz
% xxxx JYDgym+PbtWM00IdNn0Y5HwPTt07K+ee2ju0soT0cEQJxLCG+Wsnw0Rl/jHk01MIOB4ogQ9ZY37g
% xxxx ai0V6oRQ9ttUSaSENdepASY+XSIFHtcZ1KYiRPY8Xo2qXtdrIRq6HhEVG2zQDMX/Q68y9g1v6tkQ
% xxxx S9PvN2TqlYOEXUeUB5S0qPMuMJFK14Zy6uU2DIf3OHXFhCwua96ElfKOMBYsRvpOtiEr+7xpT2ht
% xxxx
% xxxx
% xxxx ---- S3.6.5.e Proof of Correctness - Tally verification

\paragraph{Tally verification.}
The final step is to verify that the tallies contain the correct contests and options.

% xnote S3.6.5.e This section generates no unique or specific requirements

% xxxx McT4nlAKGA8SvX7ho4GcOPIAG/NfIqqi2/8veWa58i1Vq+aB3D8e5IRo48npuXMAA8KXi6lPtwdF
% xxxx oLg8MX6njma7J3scd5LAM5lkWXKZC9+yPLISulu/8+MCZ50BjZxjKpOKLC0VBK1a4rjE6r2OA65F
% xxxx f5H4npkDji+f/PgQi4bH6K8sOBhpxpuFwlMyCb0GmIp7ekUPsy/hbochJM1DHT33eV3Il2o3lPWl
% xxxx KuD/diCV+4CgEckHxh0kWcNI7HCiNBFcC4oOs7l27rohnWztG0GlarVe5ihxGgTo/kF60+jrwcIS
% xxxx F270MaPb13Y2LjJAnlA8ZLA+CCQmmq/vR6Tc9ftIGuyiroF1VT4vAMBhRus82H5aVuyZWzvl6Y0g
% xxxx Qf6y+2N+xg18WosxpDBuQ0Nbq4b1Gchlx9jS6mJAlx+sarEZec6pqp2c4v/8kf44q5o4NrMZZ0+C
% xxxx 9VtOMrzaxD85Tp9neZ2J8jaSqw36lpdxtiiTuYX4lvwRV6Z2/UwGnCMXlOZN8L0EM+1Pc5wdL/8M
% xxxx mVij2mySghrRMukczT/2clcfTSC7vy5EFA3TNwZGe4N+TUwE78OfVLGOFE9tlTfUjjvToJvsq35y
% xxxx TezRyqwVSQjPjqQHxKmpfxi3niaA6duKXFWYlQIqWv5ymQQXsTSAoqtvBI7vn0cwt0qZUdCjBdcZ
% xxxx UhyUKpmCHDPi+XPQIzEZnADrwTArx1BHvuYQOvr80MN19g3w9BmuEN4jRAWRbTOQC9MkyLOUyPAQ
% xxxx
% xxxx
% xxxx ---- S3.6.5.f.verif11 Proof of Correctness - Verification 11 (Validation of contents of tallies)

\EGverif{\veriftitleValidationOfContentOfTallies}{\label{verif:tallies}
\veriftextValidationOfContentOfTallies}

% xreqj {
  "section": "S3.6.5.f.verif11",
  "text": "(Ref: S6.2.5.verif11) Verification 11",
  "sc": "nyi" }

% xxxx KLyEbAZdTDbCD57FIK/4vzVx/owzW1nGYskuTgJUvZHDObV7rrVE2DzMzVKlfntXCSR9ZtrhwzjS
% xxxx wbnBBrlxgVt/o9TgDpjEbFRBKs1UpifEeljIV4fzTEuInA5xOUlLmrY29QCzDe4X9wHS2ZxKynQb
% xxxx AUOLtvKqlvX8LRXuChA/6Iq4I9CA8Jl6zK+1/yO4H2m0acAaUY/VaW8jNUFPt5+9gokunHkNI9NZ
% xxxx Poh6Gx9mgIiA/ORkBjA8N9X8JYXVT9FbO5zG/mtYDQOM2GYVPzzECSJK+v2VJnUljJXU6UFLogFT
% xxxx slR8Nra5pQV3TJKGzDysCC6JFQ/1/LnnrYQs5+nocyPZt6I2WGIffeN3kt7yNgXKgVqmN3iG+JuF
% xxxx CxQvCEck8XQ9Kv9OgXDFKudIbmBoTsJTfaNqhqdo+Sb4Y64X2ipc9d6QY++va56caL1AL2TqMXCF
% xxxx rgosb4bo5gIAj337hlbQrDfNv2gAMDHnXjCbyLzcfwbql6nJq8O1wSkNsIq46A60JVd3tlVJD8nB
% xxxx Sp41qFZUU3NHiBJHEljT9D+IimimEOepgnCK+zd2muLFAoZNoa1/qGG8RnEMWaSuI9a1VWDovY00
% xxxx kGUgJ/2FGxDC4ptRpOhl3NDl62SFISIhm6v06XlxxDScNC2lKz7E7uqhBMthmNEgURbAErTCm9Vl
% xxxx sXsP0yQ08i6AQ/5qzs26NJFvB5eKm6PHJkfK3yfJV4leDNl58DPCu/zsSUep+JoFfoB1RH8IAA9W
% xxxx
% xxxx
% xxxx ---- S3.6.6.a Decryption of Contest Data (Optional)

\subsubsection{Decryption of Contest Data (Optional)}\label{sec:decrypt_contest_data}
For each contest $\Lambda$, an encrypted ballot may contain a ciphertext $C_E = (C_0, C_1, C_2)$ encrypting contest data such as overvote and write-in text fields. The ciphertext has been generated as described in Section \ref{sec:encrypt_ext_data}. Such data may need to be decrypted if the tallies record a significant number of votes in write-in selections. If contest data of actual cast votes is decrypted, it will likely be necessary to use a mixnet\footnote{Chaum D. (1981) \emph{Untraceable Electronic Mail, Return Addresses, and Digital Pseudonyms} Communications of the ACM.} to keep decrypted contest data from being associated with individual voters.  Details of mixnets are outside the scope of this document.  The use of a mixnet may not be necessary for auditing applications.

Decryption can be done by a quorum of guardians similarly to the decryption of tallies explained above. However, before each available guardian $G_i$, $i \in U$, computes a partial decryption, it verifies that the Schnorr proof is valid, i.e., it parses $C_2 = (c, v)$, then computes $a = (g^v\cdot C_0^c) \bmod p$ and
verifies that $c = H_q(H_I; \mathtt{0x27}, \indc(\Lambda), a, C_0, C_1)$ according to Equation~\eqref{eq:contestdatachallenge}. Only if this is the case, guardian $G_i$ proceeds to compute the partial decryption

% xxxx ---- eq. 96

\begin{equation}
  m_i = C_0^{\hat z_i} \bmod p
\end{equation}
using its precomputed ballot data encryption key share $\hat z_i$. The partial decryptions are combined using the Lagrange coefficients for the set $U$ of available guardians to obtain

% xxxx ---- eq. 97

\begin{equation}
\beta = \left(\prod_{i\in U} m_i^{w_i}\right) \bmod p
\end{equation}


Again, the available guardians work together to produce and publish the following proof.

% xreqj {
  "section": "S3.6.6.a",
  "text": "EGRI decrypts optional contest data as specified in EG DS v2.1.0 eq. 96 - 97.",
  "sc": "" }
% xtodo S3.6.6.a "[write-in] data may need to be decrypted if the tallies record a significant number
of votes in write-in selections. If contest data of actual cast votes is decrypted, it will likely be
necessary to use a mixnet49 to keep decrypted contest data from being associated with individual
voters. Details of mixnets are outside the scope of this document"


% xxxx M5fDfSYBfjkVdiNrK0HKaWuR8Vw/lx57SgA5V9Eg7zmhqK23WGFjWIg9CXrk18Il3hOrTzhO6KGe
% xxxx eDf6hLHHfkeHu/fUhaHsqL/V9wehfBlFhCKpRe6/54qoj9SVCrkIK94PeqbYjtFgI/3TD+6xx00D
% xxxx Zv69mIyk4xcxnVNRX/UGOiPQ4yJYaEnpdCnXxaIvJg1FhVMnXxllwyV5btJlRoakjlgTx4qdDovD
% xxxx ES+IjP2CHNORhz4h6yDVnehLLlD0J6DdisxtbacjiO6M6NEwwnzKXb1LLiRPH4q7QQwU2H7MWUe9
% xxxx +zuw1719ileXu3Ah0Yezgl1d72QlhezgS2jRQXA57CvJE+d98gAK+GbM6gDtjHEhzfCF6aQf11DW
% xxxx evWPAgiEfXpy+A1OlXAaMX2uDY4q8oQOzyhI2p6kyYVvCal6WhfrBtWuH/ivZW83poT7PRnOv+Yx
% xxxx kvmAm3ZUH59g9kzOMyv+50R9vI3AH/P4N9prZSZVYLah3b3Co5E9Os4eGivs3+DAR5+6ofU17KHE
% xxxx sYsqIIi9oAkuBJQbauoz6NJzd/uWZFUuihkKVQ/XV1SKci8OlkxWPme9URvRRMoPA9EeCH2OMkUv
% xxxx 8hc43bev56oRHtZLl+pjgZBy+KgyRH43O+LeKZW25DiXRGBCrfvwKIOybgjomMhJQBdqOWJZ2cwK
% xxxx 9Mqx7/Fx2WzqJNaJ4fdeau3frGvnxpcA8Br+SIX2O8SPpxUgy86zhbIUbOTOd1p/pis+OnehIeHP
% xxxx
% xxxx
% xxxx ---- S3.6.6.b Decryption of Contest Data (Optional) - NIZK proof

\paragraph{NIZK proof:} The available guardians jointly prove that they have shared knowledge of $\hat s\in \Z_q$ such that $\beta = C_0^{\hat s} \bmod p$ and $\hat K = g^{\hat s} \bmod p$.

\noindent This proof is exactly the same as the one in Section~\ref{sec:verifiable_decrypt_proof}, where the ciphertext $(A,B)$ is replaced by the contest data ciphertext $(C_0, C_1, C_2)$ as follows.
Guardian $G_i$ selects a random value $u_i$ in $\Z_q$ and computes the pair

% xxxx ---- eq. 98

\begin{equation}
(a_i,b_i) = (g^{u_i} \bmod p,\ C_0^{u_i} \bmod p).
\end{equation}

Guardian $G_i$ then commits to $(a_i, b_i)$ by computing the hash value

% xxxx ---- eq. 99

\begin{equation}\label{eq:commit2commit_contestdata}
  d_i = H(\HH_I; \mathtt{0x32}, \indc(\Lambda), i, C_0, C_1, C_2, a_i, b_i, m_i, U)
\end{equation}
and sends it to every other guardian $G_j$, $j\in U$, $j\ne i$. Only after having received a value $d_j$ from every other participating guardian $G_j$, guardian $G_i$ sends the pair $(a_i, b_i)$ to every other guardian. Guardian $G_i$ verifies that the values $d_j$ have been correctly computed via equation~\eqref{eq:commit2commit_contestdata} for every $j\in U$. If $G_i$ does not receive $(a_j, b_j)$ from a participating guardian $G_j$ or if equation~\eqref{eq:commit2commit_contestdata} does not hold for any $j\in U$, then guardian $G_i$ halts the protocol and complains.

If none of the guardians complains, the values $a_i$ and $b_i$ are accumulated into

% xxxx ---- eq. 100

\begin{equation}
  a = \left(\prod_{i\in U} a_i\right) \bmod p,\ b = \left(\prod_{i\in U} b_i\right) \bmod p
  \end{equation}
and the joint challenge value $c$ is obtained as

% xxxx ---- eq. 101

\begin{equation}\label{eq:nizk_c_dec_cont}
c = H_q(\HH_I;\mathtt{0x33},\indc(\Lambda),C_0,C_1,C_2,a,b,\beta).
\end{equation}

Each available guardian $G_i$ responds to its challenge $c_i = (c\cdot w_i) \bmod q$ with

% xxxx ---- eq. 102

\begin{equation}
v_i = (u_i-c_i \hat{z}_i) \bmod q.
\end{equation}
An accumulated response

% xxxx ---- eq. 103

\begin{equation}
v = \left(\sum_{i \in U} v_i\right) \bmod q
\end{equation}
is computed and the decryption value $\beta$ is published along with the proof $(c,v)$.

Then decryption proceeds by computing the key $h = H(\HH_I; \mathtt{0x26}, \indc(\Lambda), C_0, \beta)$ and then the
encryption keys $k_1, k_2, \dots, k_{b_\Lambda}$ as

% xxxx ---- eq. 104

\begin{equation}
  k_i = \HMAC(h,\bytes(i,4)\parallel\mathtt{Label}\parallel\mathtt{0x00}\parallel\mathtt{Context}\parallel \bytes(b_\Lambda\cdot 256,4))
\end{equation}
with $\mathtt{Label} = \bytes(\mathtt{``data\_enc\_keys"}, 13)$ and $\mathtt{Context} = \bytes(\mathtt{``contest\_data"}, 12)\parallel \bytes(\indc(\Lambda), 4)$, and the byte array $D$ representing the contest data string is decrypted by parsing $C_1$ in 32-byte blocks as

% xxxx ---- eq. 105

\begin{equation}
C_1 = C_{1,1} \parallel C_{1,2} \parallel \dots \parallel C_{1,b_\Lambda}
\end{equation}
and obtaining

% xxxx ---- eq. 106

\begin{equation}
  D = C_{1,1}\oplus k_1 \parallel C_{1,2}\oplus k_2 \parallel \dots \parallel C_{1,b_\Lambda}\oplus k_{b_\Lambda}.
\end{equation}
The byte array $D$ can now be parsed to reveal the captured overvote, undervote, null vote data, and write-in text fields.

% xreqj {
  "section": "S3.6.6.b",
  "text": "EGRI computes NIZK proof of Decryption of Contest Data as specified in EG DS v2.1.0 eq. 98 - 106.",
  "sc": "" }

% xxxx x9MvXzy5oaVPP98AIPAsk7w+I6b8vD1NYSmTiKk+2EWZaRp6aP3XRHsyPVsz2DdCDGjswu7+Wrcu
% xxxx XK7cZbQlGzsRFn8oNIuaYkya0qa83CRkSh+zmW5modRXylbbsKSg59SkNkCCpai4ixt+Hqmo5Tuf
% xxxx 33gCGOXSeUboFga8+FuM+HfZYZnc1So7tLInTu8lbScW/OSryEZxDX09RBy4QfCfdSjxfoQyQCvs
% xxxx uI/umNXuJwuUJjZ3cXpoe0VyFGDlbjuoSj7IeqdNh9jbGuQkBte3TRTiO6wlLmf1FEjjo/fq37RZ
% xxxx vnSt7vnzNZcUfcxvEW1VPjzm4L9+5kHHaUiOnElaZCgIkyJ66CK+dRKKgEIvbWGQZtdaHPZgyxQE
% xxxx i5o0l35R+Er2HhkboDxeZTjsyF86vgm7ykVIaXJvUbvMV4exvlBiflZASrjIZdiiR/pxBfLJIseP
% xxxx xWKN+3j30oGViFogPjttcnGHYs4WaOjPQC9G+6rLSeEaP1pyGzIR75nbO8h+5bCnt73lo194GJXi
% xxxx PnF1IIfCBvNzbbByUJ0pzKub1YfPWKIGPvfgZSlfzzIZajC5ZpDvuKRJspW7LLdBbd3mErDGdxR5
% xxxx WVBzmGVZqRUMjDM5JFTRkTvtZPxXtP7DUE/HrWHJarMJSl6PN27LBadJMOWIbrOslY6ISOuGepUK
% xxxx lBS7QtkgCIIZa+V5SlntNDT+1WILa0DgG5xsn5AlgnNVx6K2Xuqge9AKirFuB2nJNKSaWMKqu1sF
% xxxx
% xxxx
% xxxx ---- S3.6.6.c.verif12 Decryption of Contest Data (Optional) - Verification 12 (Correctness of decryptions of contest data)

\EGverif{\veriftitleCorrectnessOfDecryptionsOfContestData}{\label{verif:extdecryption}
\veriftextCorrectnessOfDecryptionsOfContestData}

% xreqj {
  "section": "S3.6.6.c.verif12",
  "text": "TODO: Verification 12",
  "sc": "" }

% xxxx jd7YroDW7i4Kyx4czSoyaby3z90eFchEN5Ewre/6ud1tYakclhRUBWovzJuV4mYtK09NBFBDYEIT
% xxxx qr+JTtvT6dm6KThzdb9uN3kCwD2OsYkqE0RknCS6PwIzyLhxzEf8qiVZKgSSoXgpbsyIGBTVd4RA
% xxxx 8Urnd72/EKk8UAzJsaryk5VeGjvoQJELyZ5LcL/Hb8YOJM6ksFUZ7Ab8WgXqAwW2hdUF2SAsSFTy
% xxxx 80gxc20h10hxbUikfdQmAKL3+sGrUs/HbUxbGpAnyoDHck0A4zOLWu0bxjn96io7wjoZPAELrShj
% xxxx 0d3UsC9w3FoVJ6YEcGZxJPP/0kOrNPkc8iShYe1GNbDwasw47y6mgN1L4jt1m55/EVoZljF7cW/T
% xxxx ZcVaZgJU8B4pBQreiZlMUsNwGx+WLLagqHLFm4yLiJqZ3FCJtjP2FJxDM/5Lt5V6v/fLA5FkIQcd
% xxxx 6U7yPBMQCwmy1/dnAipybpTtzlsxZVtPZcjzalzqFt2Cqo+sPxEwGwvDiu5WW8yVko+9ctnplRBH
% xxxx CfGjVXcTbcyv7mc3HpYZcCy7kJBYLb1lU5cvt4Yr7q6NvGQfXGynGKrMA+A1t4GvnSdx1ZuU3ZNa
% xxxx dMUEKK2VnMQn5cyVXtJPL1AxnoEnLPe+7eT8E8XHlLsO1oZcgcge+w29vUGoXFspO5NfYrBjz0qd
% xxxx VU0lhdm43kwvFzok+DmxShrUCFFBWuJAQAM9YP3vICpnF8gldt5OJu+xBeS4YldMf9dvEuuXCHlx
% xxxx
% xxxx
% xxxx ---- S3.6.7.a Decryption of Challenged Ballots

\subsubsection{Decryption of Challenged Ballots}\label{sec:decrypt_challenged}
Each and every challenged ballot must be verifiably decrypted. Guardians could use their shares of the election secret key in precisely the way they do to decrypt election tallies. However, it is more efficient and makes it easier for a verifier if the available guardians instead use their shares of the ballot data encryption key to decrypt the ballot nonce $\xi_B$, which was encrypted as described in Section~\ref{sec:encrypt-ball-nonc}.
Once the ballot nonce is available, the individual encryption nonces $\xi_{i,j}$ that were used to encrypt each selection on the challenged ballot as described in Section~\ref{sec:noncegen} (or the encryption nonce $\xi$ used to encrypt contest data as described in Section~\ref{sec:encrypt_ext_data}) can be derived and published. The ballot nonce $\xi_B$ should not be published.

% xnote S3.6.7.a This section generates no unique or specific requirements

% xxxx EhwVcR/JP/q/Wk+Nzq6lX/lyjQQUbD0cJTEwtgTMELV3shLoxrpjuGO3X5xfYNKbOvFxaRA4oo+x
% xxxx AKIBFjDkCA5paCeYQdyGGUPHiIpiYv5WQ5RgaufBy2FJhUTsuUiycfXScCCH2dRzH+RjRc1LRZkd
% xxxx DL3h//3MttSA8wd6rWW+kBQ4jyMcRu3VbN5EPm4Rhfs6QHfGkPmmcOBGIg27NYVyvZAhFwET3xMn
% xxxx FK9rXV9hzdKs2OCNAnLfIhOadYT5+vSKIKJdz8b4iY7tx/ZxbAVii3W4WtrjSgDrDBJjM8AQlL3y
% xxxx QbtKGpkF25nP8FDqMMzMT3ZovdGwQbXMdQqzdaTg3nqmJO6iBfLdGuY6g1IJSf94+QgVqmV1v43p
% xxxx TdvM1I9fe7fIcKf8/qXBR2LWCv7PTodFDKQ5pQTCph0dTlA1/OPxmh6i4GTvZ74j1ArYxtgK5bu+
% xxxx 9eaJPht2434UC6q691Ss0L5gFsBKDH7EgEAYim/CkXA4UgJGL8/v26bUshDtcAZWP7mx9MovvYsR
% xxxx W95DC6oSx8Mgk7jipKODvob8MWAD1yGIBG7Peie1s9/Xi64mXMSkqxN5CQHetpq8ux8bugw2DzDI
% xxxx cilrIr0Z+q/5K/TO6fYyTYPPJIastx0Ythf7phnQed7/iFuSYiJis4133+6tGmtjfcLX8yX9X68r
% xxxx w53uaXB/5geDVEiNRPirMUzx7ZRaHX0Xn5Yy4nmUzahb0pQnE+zjhIjILoe92Y/DYle93TLyeBXN
% xxxx
% xxxx
% xxxx ---- S3.6.7.b Decryption of Challenged Ballots - Decryption of ballot nonces.

\paragraph{Decryption of ballot nonces.}
  Given the ciphertext $C_{\xi_B} = (C_{\xi_B,0}, C_{\xi_B,1}, C_{\xi_B,2})$, which is an encryption of the ballot nonce $\xi_B$, each available guardian $G_i$, $i\in U$, first verifies the validity of the Schnorr proof $C_{\xi_B,2} = (c_B,v_B)$. This is done by computing $a_B=(g^{v_B}\cdot C_{\xi_B,0}^{c_B}) \bmod p$ and verifying that $c_B = H_q(H_I; \mathtt{0x23}, a_B, C_{\xi_B,0}, C_{\xi_B,1})$ according to Equation~\eqref{eq:ballot_nonce_proof}.

Only if the proof is verified as correct, does guardian $G_i$ use its ballot data encryption key share $\hat{z}_i$ to compute the partial decryption

% xxxx ---- eq. 107

\begin{equation}
m_i = C_{\xi_B,0}^{\hat{z}_i} \bmod p.
\end{equation}
Partial decryptions from the available guardians are combined via the Lagrange coefficients to obtain

% xxxx ---- eq. 108

\begin{equation}
  \beta_B = \left(\prod_{i\in U} m_i^{w_i}\right) \bmod p.
\end{equation}


The ballot nonce can be decrypted by computing
$h = H(\HH_I; \mathtt{0x22}, C_{\xi_B,0}, \beta_B)$ via Equation~\eqref{eq:master-key-enc-of-ballot-nonce} using $\beta_B$
and from that deriving the encryption key via Equation~\eqref{eq:derived-keys-enc-of-ballot-nonce} as $k_1 = \HMAC(h, \mathtt{0x01} \parallel \mathtt{Label} \parallel \mathtt{0x00} \parallel \mathtt{Context} \parallel \mathtt{0x0100})$, where
$\mathtt{Label} = \bytes(\mathtt{``ballot\_nonce"}, 12)$ and
$\mathtt{Context} = \bytes(\mathtt{``ballot\_nonce\_encrypt"}, 20)$. The ballot nonce can be computed as $\xi_B = C_{\xi_B,1} \oplus k_1$.

The desired encryption nonces are derived from $\xi_B$ via Equation~\eqref{eq:noncegen} for option encryptions (yielding $\xi_{i,j}$) or via Equation~\eqref{eq:noncegen_contestdata} for contest data (yielding $\xi$).

% xreqj {
  "section": "S3.6.7.b",
  "text": "EGRI decrypts challenged Ballots Ballot Nonces as specified in EG DS v2.1.0 eq. 107 - 108.",
  "sc": "" }

% xxxx 5rDA6p2sc3OzajTYqrN+8Vn6TmfrY9Ih9ju3OXa8/py0IjhAYmfys2gsHCHj54n0DXFI9+5mQr/t
% xxxx WEH/renFsq/nB/JbQ2rURl1v3I2XTmCeb0FVnUyaw2HuesOTSXDHc4OJGkLxKpHITL4+oFwIbhrP
% xxxx vV7SmuoRXff0IFzas5Ey0Wv48W7vddw25HTIMzkyH3YfwD+/LyxHxRE3Fs7IAujea5yvcfrpCyMX
% xxxx W7M1GHIw4MJ4vnQ5npw1HJo7TPDyQMQmQPRBEW0neEJ9QvmcurVHUuIeyYPmjogSyM1UtD+5ruUV
% xxxx QztMa1HPY7ksuwLlX74dLWuafWvFKofSp0sA/W+CWs0EcwqRgJ/snN8JSDy3e+rKMXoOkanLTTFH
% xxxx xR53vmpdOy9UjKnDeQjaqyRHc9v5yX6eM+baw75fHHo03tAtM/gTJ87v356/8+YBaqND/hdPMJB7
% xxxx h63jL7FMnLn5C/GBxBdNdUVneIdFWER5O7d9B7HbCX9RLv305XM8OtCK/RKfVumtcA4swLk0oO7e
% xxxx 5XlzkQykAk31tFeYRypcvQfiTrY3nl9bHCSOiUSM9JwrgcBYSeeC/UU4xT2ga2lJicRg/njcbz+F
% xxxx DRyBUT6mz/7eQKG+DgMyaPVVV9TmE6XHAPSMgWjdvxUU0xnVhg3YvpvW3s1evWrcZnO9Ifs23BEb
% xxxx vAHKgd3AtTLHBVxOx5ySelnY9cOXzGHcur+yzafMLTdNsJrKi0wcU/L0o3MRI8EW+W1K9ntEGcMR
% xxxx
% xxxx
% xxxx ---- S3.6.7.c Decryption of Challenged Ballots - Decryption with encryption nonces.

\paragraph{Decryption with encryption nonces.}
An encryption nonce $\xi_{i,j}\in \Z_q$ that was used to encrypt a selection $\sigma$ as $(\alpha_{i,j}, \beta_{i,j}) = (g^{\xi_{i,j}} \bmod p, K^{\sigma+\xi_{i,j}}\bmod p)$ can be used to decrypt the ciphertext $(\alpha_{i,j}, \beta_{i,j})$ by computing

% xxxx ---- eq. 109

\begin{equation}
K^\sigma = (\beta_{i,j}\cdot K^{-\xi_{i,j}})\bmod p.
\end{equation}
Then, the small discrete logarithm problem is solved to obtain $\sigma$ as is done for all other decryptions of ciphertexts that were encrypted usind DPP vote encryption.

To decrypt contest data given the contest data encryption nonce $\xi$, one computes the value

% xxxx ---- eq. 110

\begin{equation}
\beta = \hat K^\xi \bmod p,
\end{equation}
then derives the secret key $h$ using Equation~\eqref{eq:k_enc_contest}, and computes the encryption keys $k_1, k_2, \dots, k_{b_{\Lambda}}$ using Equation~\eqref{eq:contestdata_enckeys}.
These keys are then used to decrypt the contest data from the contest data ciphertext $(C_0, C_1, C_2)$, where $C_1 = C_{1,1} \parallel C_{1,2} \parallel \dots \parallel C_{1,b_\Lambda}$, by computing

% xxxx ---- eq. 111

\begin{equation}
  D = C_{1,1}\oplus k_1 \parallel C_{1,2}\oplus k_2 \parallel \dots \parallel C_{1,b_\Lambda}\oplus k_{b_\Lambda}.
\end{equation}

% xreqj {
  "section": "S3.6.7.c",
  "text": "EGRI decrypts challenged Ballots from encryption nonces as specified in EG DS v2.1.0 eq. 109 - 111.",
  "sc": "" }

% xxxx 6sADjZeAY3GSvubdRdS6ROZPmscWR2bOKL2D98ZniXyB2JUgo8TxWQc8H0+E0VRoltg08VScz43M
% xxxx Aq8T4Qgns0s87ohCVuiwxi3NkRwMVQW+7tWy37hFVf1Zga4M8q1/SPd2zByxPSHi6Yr7cdfqK1Lv
% xxxx ObH+VeT1xHNutjBISycldbLhDo6VZEIAbfEFiXrjD5du569X48/xXMpZvAUBdXr8gB4a3iJVXbpx
% xxxx cqSkeHuNvX8CTGyG3iPwAMYc0xN1AYacOqTy1Xhf2lBIEIyUywMy44sR9iEakLLaLRFsIS/ax/KG
% xxxx +jH6CoE/lEiXSV6NiGZrpbE6IukLaW6pMti1/OPy2gnqvBVHpEUKdSa7P2PZM8krX0wrXwABD5s0
% xxxx ELAoT9BkbTcFWKz+X/EblcqUwo+pp5mu6b1fMG4JXgJX6g8yqo/veX5HmeKONOohj4+MF9/MSICI
% xxxx CWiimDRzeAK4QYZ11YZHrcB+ouJWya4Kz/tB+KPkpV9PeCb0Ver51LAj226xcRGs3GM40O5Sw6Nn
% xxxx AptN2w+ipR/Nt1BcZPkz4Lfqw8N9edzfKvnyYhw49cO1Pc5NbcqmMssIpTs+7GfnO+4pXYbp1TEr
% xxxx AEGX6SV2Rgysx1wS4Aj46PnbVk4YNb/MH5YIahOuwMUWhlXmAQD+GUiz1qXKtWuGBYFpuwuky7GI
% xxxx nA6eWwE9zAPLspRBybnmS5bwj80Ry2UqxBPdJjD1MXc4+UDZOVWe9GRBEHrkUYs2qhT1G+CE/uiC
% xxxx
% xxxx
% xxxx ---- S3.6.7.d Decryption of Challenged Ballots - Verifying decryption with nonces.

\paragraph{Verifying decryption with nonces.}
When the ballot nonce $\xi_B$
that was used to encrypt a ballot $B$ is decrypted, a
  verifiable decryption can be produced by deriving the
  encryption nonces $\xi_{i,j}$ that have been used to encrypt the selections, then
  publishing these encryption nonces. When specific selections or
  contests are challenged, as it is common in the context of risk
  limiting audits targeting specific contests for instance, the
  publication can be restricted to the desired subset of encryption
  nonces, improving the privacy of the votes (this would not be
  possible if the ballot nonce were published instead).  This
approach can drastically reduce the amount of computation required of
both guardians and verifiers.


Specifically, when possessing encryption nonces $\xi_{i,j}$ and the corresponding
selections made on a ballot, a verification application can repeat the
vote encryption process as described in \S\ref{sec:ballotencryption}
as follows.
\begin{itemize}
  \item Using each available encryption nonce $\xi_{i,j}$, it recomputes the selection encryptions as shown in Equation~\eqref{eqn:encryptvote} of Section~\ref{sec:selectionencryption}.
  \item It derives the contest hashes as shown in
    Equation~(\refeq{eq:contesthash}) of Section~\ref{sec:contesthash}
    using the selection encryptions, which are either recomputed when
    encryption nonces are available, or are given when the encryption
    nonces are not available.
  \item Finally, it recomputes the confirmation code $\HH_C$ via the contest hashes as described in
    Equation~(\ref{eq:confirmationcode}) of Section~\ref{sec:confirmationcode}. If the chaining field is not the byte array consisting of only \texttt{0x00}, more information must be provided to the verifier as specified by the chaining mode, see Section~\ref{sec:ballotchaining}.
\end{itemize}
If the resulting confirmation code matches the confirmation code provided to the voter, then this is verification that the confirmation code corresponds to a ballot with votes for the indicated selections.

Note that confirmation codes {\em do not} include any of the zero-knowledge proofs of ballot correctness.  So a verifier does not need to reproduce these zero-knowledge proofs.  Only the actual encryptions of the selections must be regenerated and confirmed. As such, the success of the verification process described here {\em does not} guarantee that a ballot with a given confirmation code is valid: the valid encryptions must be accompanied by valid zero-knowledge proofs of ballot correctness.

Also, $\xi_{i,j}$ or $\xi$ values that are inconsistent with recorded encryptions {\em do not} mean that the selection encryptions or contest data encryptions encrypt incorrect selections or contest data: they may only reflect that the ballot nonce encryption was incorrect. This, alone, would not prevent a correct tallying process, should the ballot be included in the tally.

An election verifier must confirm Verifications~\ref{verif:challengedDecryptWithNonce} and~\ref{verif:challengedballots}.

% xreqj {
  "section": "S3.6.7.d",
  "text": "TODO: Decryption of Challenged Ballots - Verifying decryption with nonces.",
  "sc": "" }

% xxxx 2X65qF/D1IYu0sVHUjdxxYQ6wgtpVUDjxMbJkILTunCXqIKMxOB6xcOZBrr9f29tC05Dh4cES6NC
% xxxx YbbjgWnFzstoMVngA8AY01QOaPdZPIYk1QhYOmcCiiO51zKCZma1N+mFmu7J4f7pgOKfWwaKYqmL
% xxxx yIgFVejoMyeSWLbWu/LFuUP8wiBaNv5nzFig6MFxJjqjz2f+avp1GqwUxMBvj23N9Vjnjwfdqvgo
% xxxx b2d9qKsZR+4RPq1zeLp5w9fXQa5hRQ0VTUD/jIQw7OBlJBQTBOmO7Q1VOPH460Z4m/iWnmh/ScvC
% xxxx sDiLr7fFTB5IiaQYdNl/S6+9Gf2bAUWsEnPZP8qCrK1XGiLyU1j0RDH+EdBdj9Xkv3T5kWighmFs
% xxxx e/uzhctY0XaioE6Fr+40Sf51zwCyYxHUAYSL1j4/VrqdcaewRC07P3MvpXlvdbgUkO2sme8QM80n
% xxxx pAK7jBLebvRVTJBN6cP8CPsQi3HCq3Pps4KO4n9cu+/08tc4tLd1QxinrZaykBMq+MDUQDbAHw/d
% xxxx 2GB/6DqUPy1kfDXR4LHu2b5bk+CnxCAbDJKx9trEzsO9k44ao2VuTLftElSl4WcxvWGTkV/QGR/F
% xxxx g4jLSCcT/UASBqubLyzjqpREz5oDstp1Ioon4BsaTWos50zBBddOzTaDZ5HwoQRXaeKInFaYbhp6
% xxxx 83YgOXYta6BKRPzR/eHzb6mFS5ehV0IkSf2wHZMsb2lwA5xg1e/uVZl25zYCB8cFK+VxvW55vpbQ
% xxxx
% xxxx
% xxxx ---- S3.6.7.e.verif13 Decryption of Challenged Ballots - Verification 13 (Correctness of decryptions for challenged ballots)

\EGverifBallot{\veriftitleCorrectnessOfDecryptionsChallengedWithNonce}{\label{verif:challengedDecryptWithNonce}
\veriftextCorrectnessOfDecryptionsChallengedWithNonce}

% xreqj {
  "section": "S3.6.7.e.verif13",
  "text": "TODO: Verification 13",
  "sc": "" }

% xxxx EnwKITdQA9v1/Cclii7FSqEH0ryx4g4/3Xs3is3PMSDH6qhH2CeW3dsFoar0Jf5nUBTcpewHXMNr
% xxxx 9PBgIGp5hi1s4vHpW4GGdCUHcYhEVm4C10mZ/rzReknEK1SwCjD5X8wBisg9X4ulj19NF+ESqG6/
% xxxx R+apDGCpzTU5kd0wY83LrHqrHY2YGJ9WPDl2TqhXNWudKk181ihuTNEI0TkHioc14Oo+UqUkW5RP
% xxxx 96AIuS4GJOe+lVL+/Kr1aJvlYUnjElv1XCMu97anyWCiSbdryM0keBPEZ/JgPWtLGS8AMhvlqp0U
% xxxx HoHjj54be568gJANtOfNPqYlP/Xj9VpFgUGc+94MGUFAhItPi1clUeiq89NCF5Bst4SEfJYxywAS
% xxxx 8/FN7XmDD6QPngq7IuEjFY0/JDrTsm0iL6ocgVKECDcylEaELWELxpLXss/xXYWxvze+IXDT4w8v
% xxxx 4By8KaWq1j5JS93Z6PmFQVYh66NDLaRUQN73kOEmDNQcEVA9DLMNzqjvS/q3PqNOOaLAaIxWSzuf
% xxxx cmwPmTrFK1aHCyLYGsgId020jnfo46Bx5RaKUD96pRKl6V6wLG/NFL8+/yFu4oJBjFN2Gckt6WxK
% xxxx YT2JekBOWJYbIyQ/5fG6fO5gN5C+O21Rc1j0QyUZ/ihISGAm5BgJzdpj4tlKyfH3yFKhPGcu2F7b
% xxxx JcCDICiQ2fYyaj6/NcqYKpUzwrNeJKp8dGigb4Fa22m9ZYFz6U4r37P25GfxhLHf4vFBZqC9fFuA
% xxxx
% xxxx
% xxxx ---- S3.6.7.f.verif14 Decryption of Challenged Ballots - Verification 14 (Validation of well-formedness and content of challenged ballots)

\EGverifBallot{\veriftitleValidationOfContentOfChallenged}{\label{verif:challengedballots}
\veriftextValidationOfContentOfChallenged}

% xreqj {
  "section": "S3.6.7.f.verif14",
  "text": "TODO: Verification 14",
  "sc": "" }


% xxxx qBY20ZelV2suSuqDhBxhH4yXmnSzlZjB9rHUhu9NaqWB9bBoztISa03uQMsZrh/QJHvsqLfXO/IU
% xxxx bdGwN9qONFQvpr4UUCO5MULF52rds9okMoll/GPCe/U0izwmRl/gRrMZZw+OLqhfOJCjqvJq8zSK
% xxxx I7akzy/EGSDGgtJ2rZuYaOu1ea+TEKusPagTgyTt4TPSlsicGwkv8wCC0yK4vYxFWdc8NDmrRkbb
% xxxx s3vxUQ+wZdQUo3edBmQdY4sAt8aJYWJvektHxCFJA6jkFI+tmj66kgZhLMeeswOFz0OHES3xpxZm
% xxxx 8uTSX8DxK0KKN7AQAPi8eLw9ayLZBPThTukIhGJqhV7vqayjqy2avck0CSa8ZNhaU8j9XliN+etc
% xxxx i8sq5jct3XQ8RR8iaCqVhMMfT/Q5w/kcbpA+9tHROq7UNTRw8d2+oYvxGUqEmKZAD9W7vF1snpxM
% xxxx vD8DgEo0p+jbIWIHgql4UXXP7Ce5vkI7rX3csh4d7+RA3BkBzAAIASLRFZCl1fztrI57TPf/hNsx
% xxxx kObHZcSg+l8rPU2UH9sVhLyVDI831D/YTwNKItYkXeDLPCg/CAW9bGyfgELswasoC4O5VFpBwABr
% xxxx XmkCZILtN+9LMBjPH2XNAnYwGzLt9FgIC36cfN6RuJrI58TCG8E+4yRjjwII0ra9b4o7ls8Ntwlt
% xxxx SoicHVH4RYxFfs7jyIXrTL79biWYkHM1NGjuRzfZUCZUovZJ3tSmDDHps4Je5QR9oXEp8SAJoXz+
% xxxx
% xxxx
% xxxx ---- S3.7 The Election Record

\subsection{The Election Record}\label{sec:electionrecord}
The record of an election should be a full accounting of all of the election artifacts.  Specifically, it should contain the following.
\begin{itemize}
	\item Information sufficient to uniquely identify and describe the election, such as date, location, election type, etc.\ (not otherwise included in the election manifest).
	\item The election manifest file.
	\item The baseline parameters:
  \begin{itemize}
    \item primes $p$ and $q$ and integer $r$ such that $p=qr+1$,
    \item a generator $g$ of the order $q$ multiplicative subgroup $\Z_p^*$,
    \item the number $n$ of election guardians,
    \item the quorum threshold $k$ of guardians required to complete verification.
  \end{itemize}
  \item The parameter base hash $\HH_P$ computed from the parameters.
	\item The base hash value $\HH_B$ computed from the above.
	\item The commitments from each election guardian to each of their polynomial coefficients.
	\item The proofs from each guardian of possession of each of the associated coefficients.
	\item The election public keys $K$ and $\hat K$.
	\item The additional public key $\kappa_i$ from each election guardian together with the proof of knowledge of the corresponding secret key.
	\item The extended base hash value $\HH_E$ computed from the above.
	\item Every encrypted ballot prepared in the election (whether cast or challenged):
	\begin{itemize}
    \item The selection encryption identifier $\id_B$,
    \item the selection encryption identifier hash $\HH_I$,
    \item all of the encrypted selections on each ballot,
    \item the proofs that each such value is an encryption of either zero or one (or more generally, the proofs that these values satisfy the respective option selection limits),
    \item the selection limit for each contest,
    \item the proof that the number of selections made does not exceed the selection limit,
    \item the ballot weight if given---if no weight is given, the weight is assumed to be 1,
    \item the ballot style,
    \item the device information for the device that encrypted the ballot,
    \item the date and time of the ballot encryption,
    \item the confirmation code produced for the ballot,
    \item the status of the ballot (cast or challenged).
  \end{itemize}
  \item The decryption of each challenged ballot:
  \begin{itemize}
    \item The selections made on the ballot,
    \item the plaintext representation of the selections,
    \item proofs of each decryption or decryption nonces.
  \end{itemize}
	\item Tallies of each option in an election:
  \begin{itemize}
    \item The encrypted tally of each option,
    \item full decryptions of each encrypted tally,
    \item plaintext representations of each tally,
    \item proofs of correct decryption of each tally.
  \end{itemize}
	\item Ordered lists of the ballots encrypted by each device.
\end{itemize}
The election record should also contain the encrypted contest data when such data is available.

An election record should be digitally signed by election administrators together with the date of the signature. The entire election record and its digital signature should be published and made available for full download by any interested individuals. Tools should also be provided for easy look up of confirmation codes by voters.

The exact organizational structure of the election record will be specified in a separate document.


% xreqj {
  "section": "S3.7",
  "text": "(Ref: S2.b) \"EGRI enables production of an 'Election Record'\"",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record is not a static fixed format. Different information is added and modified at different times.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record format must support appending new and updated information without invalidating signatures made previously.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record format must support inclusion-by-reference (eg a Ballot ID and hash value) of batches of Ballots. Rationale: For all but very small elections, it will not be practical to hold all Ballots in a single file. Neither will it be practical to place every Ballot in a separate file in a single directory.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records any information necessary and sufficient to uniquely identify and describe the election, such as date, location, election type, etc. that is not otherwise present in the Election Manifest.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the Election Manifest",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the Fixed Parameters `p`, `q`, `g`, and `r`.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the Varying Parameters `n` and `k`.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records `H_P`",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records `H_B`",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Guardian `1..n`: a name or label",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Guardian `1..n`: the polynomial coefficients commitments",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Guardian `1..n`: the polynomial coefficients the proofs of knowledge",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Guardian `1..n`: the Guardian Communication Public Key",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the Joint Vote Encryption Public Key",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the Joint Ballot Data Encryption Public Key",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records `H_E`",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the selection encryption identifier $\\id_B$,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the selection encryption identifier hash $\\HH_I$,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: all of the encrypted selections on each ballot,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the proofs that each such value is an encryption of either zero or one (or more generally, the proofs that these values satisfy the respective option selection limits),",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: for every Contest, the effective Contest Selection Limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: for every Contest, for every Option Field, the effective Option Selection Limit",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: for every Contest, the stated and effective selection limits applied to each contest,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: for every Contest, the proof that the number of selections made does not exceed the selection limit,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the Ballot Weight as originally submitted with the Voter Selections",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the Ballot Weight already applied to the Ciphertexts",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the Ballot Style index,",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: device information uniquely identifying the device used for encrypting of voter selections to produce the Ballot",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the date and time of the ballot encryption (as reported by the encrypting device) with no more than 1 second granularity",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the confirmation code produced for the Ballot",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `Cast` or `Challenged` state: the state of the ballot `Cast` or `Challenged`",
  "sc": "nyi" }

% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `ChallengedDecrypted` state: all the information included for the Ballot in its `Challenged` state",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `ChallengedDecrypted` state: the selections made for every Contest Option",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `ChallengedDecrypted` state: the decrypted plaintext values of every Contest (Option or Additional) Data Field",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `ChallengedDecrypted` state: the proofs of correct decryption for every Contest (Option or Additional) Data Field and/or the Contest Data Field nonce.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot in the `ChallengedDecrypted` state: the date and time of the overall ballot decryption (as reported by the decrypting device)",
  "sc": "nyi" }

% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: some identifier uniquely identifying the Ballot Decryption Operation",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: the set of Ballots \"marked for decryption\"",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: the hash of the ElectionRecord at the point the Ballot Decryption Operation was initiated",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian: the Guardian Index",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian: the date and time their participation was initiated",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian: the hash of their view of the ElectionRecord at the instant this operation was initiated",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian: device information uniquely identifying the device used for their secret key operation",
  "sc": "nyi" }
% xtodo S3.7 The Election Record records for every Ballot Decryption Operation: for every participating Guardian: for every Ballot in the `Challenged` state: the partial decryption of the Ballot Nonce
% xtodo S3.7 The Election Record records for every Ballot Decryption Operation: for every participating Guardian: for every Ballot in the `Challenged` state: for every Contest, for every Option Field, the partial decryption
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian:",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation: for every participating Guardian:",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation:",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Ballot Decryption Operation:",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every set of Ballots in the `ChallengedDecrypted` state:",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every set of Ballots in the `ChallengedDecrypted` state: for each Guardian participating in the Decryption: the Guardian Index",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every set of Ballots in the `ChallengedDecrypted` state: for each Guardian participating in the Decryption: the date and time of the partial decryption",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every set of Ballots in the `ChallengedDecrypted` state: for each Guardian participating in the Decryption: their partial decryptions",
  "sc": "nyi" }

% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: identifiers of the set of Ballots in the `Cast` state",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: the encrypted tally (eq. 79 pg 44)",
  "sc": "nyi" }
% xtodo S3.7The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: the partial decryption from each available Guardian?
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: the full verifiable decryption of the encrypted tally",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: the tally exponent",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: plaintext representation of the tally",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records for every Tally: for every Contest: for every (Option or Additional) homomorphically-tallied Data Field: proof of correct decryption of the tally",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records information uniquely identifying each device used for encryption of voter selections to produce any Ballot",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records an ordered list of the Ballots encrypted by each device.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "The Election Record records the encrypted contest data, when available.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "EGRS enables the Election Record to be produced in a format suitable for digitally signing.",
  "sc": "nyi" }
% xnote S3.7 Josh 2025-02-25, 2025-03-18: All Administrator Key operations are out of scope for EGRI: xreq S3.7 EGRS enables the Election Administrator to digitally sign the Election Record.
% xreqj {
  "section": "S3.7",
  "text": "EGRS enables the Election Record to be published in a format suitable to the needs of Verifier applications. For example, a directory of files accessible via HTTPS supporting efficient random access.",
  "sc": "nyi" }
% xreqj {
  "section": "S3.7",
  "text": "EGRS enables the Election Record to be published in a format suitable for archiving or bulk downloading by any interested individuals. For example, the compressed .zip and/or .tar.gz formats.",
  "sc": "nyi" }
% xnote S3.7 Josh 2025-02-25, 2025-03-18, 2025-03-19: All Administrator Key operations are out of scope for EGRI: EGDS pg 56 "Election Administrators" is plural, but a single Election Administrator is referred to everywhere else a procedure is described.

\pagebreak

% xxxx VxGNBA5Pt0/vKoLlJidUH+VQtl037T7IsgNJ9kWkbfYyiyyy7Gw35ed3QUj1FhehQ6hDLA4KkWLc
% xxxx APm5Ql5qv357QHKQR4VZGvADcqGR3TkEbr+jHorZmXdOzDM+7zMjIcXdeKuPhqN5sTs5D+JeXaWg
% xxxx 8Wnpim8bug8NFgIZsaQJ8HlmIlHx2DMY/7ANuaXpQ5zYoqjMQ3gqeE5Klvg/8XN2CSYtWkM3DF3Z
% xxxx RoGveov4qdAzOv+TgewsT9i1ttU87+rLsNh9uaGEayvBrR7Z/ZOuihfNzeKZ/9WUyJHS6Gr6Q4XF
% xxxx JDVUpBmLjt1r/6MjvmzsfnTTdWfaLYqShk66D8W1mE6HvB0W0aAps7hn8Znnq2Vh4JRooz86MSCE
% xxxx 3oPEiLQ7mj8CZr/j8nAXxLSLjhsHkOk6bueZM1LbH+Z2Etme1MWZU+QVELXriA2g3YQPD02QcdRc
% xxxx m5WFAcr6dET94oPK0O/uiXDVFAhENdxDgmdwGnUII23RZ4AB51w/Gif1QiCSel0MTN7VESULZ4xy
% xxxx +DoklKW5IqAtHpQrrLBqijBEAHjtsRiSGBZ1cjt0r6Spg40bu2ge0ymrNWnjBMu2QGabXLSdrp7S
% xxxx /Ndx3ROWBlGCeOiv8reNBSATfMo+h6LFVOf8VsUqnPPYEUwtltdMOr1gy4ZjevwHJCDzw4Hw1Alm
% xxxx Jg9KIsXD13JpkJSqe794Isw4/Nn7fgokjfN0PzPLO8HpOvEPfMd/jFANitENxU+hvE9CaDq4ILX0
% xxxx
% xxxx
% xxxx ---- S4 Pre-Encrypted Ballots (Optional)

\section{Pre-Encrypted Ballots (Optional)}\label{sec:pre-encrypted}

In typical use, \EG ballots are encrypted after the voter selections are known. However, there are several common scenarios in which it is desirable to perform the encryption before the selections of a voter are known. These include Vote-by-Mail, pre-printed ballots for use in precincts with central count or minimal in-precinct equipment, and back-ups for precincts which ordinarily perform encryption on demand. Ordinary and pre-encrypted ballots can be tallied together so that it is not revealed which votes came from which mode. Support for pre-encrypted ballots should be regarded as optional and may not be included in all implementations of \EG.

With pre-encrypted ballots, each possible selection on a ballot is individually encrypted in advance; and the selections made by the voter indicate which encryptions are used.

\EG requires two applications to support pre-encrypted ballots: a \emph{ballot encrypting tool} to provide data to enable printing of blank ballots and a companion \emph{ballot recording tool} to receive information about selections made on pre-printed ballots and produce data compatible with the \EG election record.

As Section~\ref{sec:identifier} shows for regular ballots, each pre-encrypted ballot also has a $256$-bit selection encryption identifier $\id_B$ that is chosen uniformly at random and a corresponding identifier hash $\HH_I = H(\HH_E; \mathtt{0x20}, \id_B)$.

% xreqj {
  "section": "S4",
  "text": "EGRI Preencrypted Ballots enable the vote-by-mail scenario.",
  "sc": "na" }
% xreqj {
  "section": "S4",
  "text": "EGRI Preencrypted Ballots enable the \"precincts with central count or minimal in-precinct equipment\" scenario.",
  "sc": "na" }
% xreqj {
  "section": "S4",
  "text": "EGRI Preencrypted Ballots enable back-ups for precincts which ordinarily perform encryption on demand.",
  "sc": "na" }
% xreqj {
  "section": "S4",
  "text": "EGRI enables ordinary and Preencrypted Ballots to be tallied together.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "When ordinary and Preencrypted Ballots are tallied together, it does not reveal which votes came from which mode.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "The Election Manifest contains a configuration setting indicating whether Preencrypted Ballots are enabled for that election.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "If the Election Manifest indicates Preencrypted Ballots are enabled, EGRI allows to produce data necessary to print Preencrypted Ballots. Note: Referred to in the EGRS as the \"Ballot Encryption Tool\".",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "EGRI refuses to generate any Preencrypted Ballots unless the Election Manifest indicates Preencrypted Ballots are enabled.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "EGRI allows to record Voter Selections made on Preencrypted Ballots, if the Election Manifest indicates Preencrypted Ballots are enabled.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "If the Election Manifest indicates Preencrypted Ballots are not enabled, EGRI refuses to record any Voter Selections made on Preencrypted Ballots.",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "For each Preencrypted Ballot generated, EGRI computes the Selection Encryption Identifier `id_B` as described in (Ref: S3.3.2.a).",
  "sc": "nyi" }
% xreqj {
  "section": "S4",
  "text": "For each Preencrypted Ballot generated, EGRI computes `H_I` from `H_E` and the Selection Encryption Identifier `id_B` as specified in EG DS v2.1.0 eq. 32 (Ref: S3.3.2.a).",
  "sc": "nyi" }

% xxxx n42hCbTCP22segXf3a5WwiDvFRC5yAeEJM2HMWZViPDf4xu42v4IN+gck4yRtVFWjblyoAemJcNz
% xxxx pznY53vE6xa4sgVDH9jZGnOjLGeT7KjvG7SVUfxNVfJpvhSgdNzn1FDydJ/P4MO6BvpGJuRBi5VG
% xxxx BimeqAdxC8L7CCMtutFrTN0aTzVBgMa3FrtFnOP+rsWqmzJHjqR3bzwtOo/ojH/kf3EMUJ5UX9j7
% xxxx uvY1Iq9d8RQehi2g2OKr9QawKtfaUeQAir1j4jNgZmpQGD6kcuqW0ziCPDDOzXhRVoORmK8SrcNW
% xxxx yYZMJ7c+pIhCHVUUPRjvsGbCG/Dbwvuz8kWfn/VzBXDFsAoFu3EhUoGFa0mdSoNx4GTBSsswA7/3
% xxxx Nu4u0gAKoas786Ej610gaE0rzfkrjuK8c1c96mCnFg3LHo5/n1aRTb2hZjNg5zRVn9QipULyY3cj
% xxxx QmuM4ecOxQZSf40x7F3uNbJJsHPZHaLISPsh1vDmtJA0xVApFuF9Z7vaLQK7yghPysv280cwNstd
% xxxx i947KkxOgXwbfhCgl3pnBtoFOHiWJz3/RwIjIa7VHB6sq6MuuBrTw1zSbEVVNirHLWeRUToHrAzh
% xxxx vmQdqSVboZFPI3mzKPoLBmXEq+9qodkgYJCaaQtjTbHuASPFPQNL8XO8qmVJ+IsBTPdhb7KzqiSL
% xxxx bL9KxJtc6MipqYa+iRdF+nWoUqZkNNYOh3qmahXvK+Qb/6IgmKpQXW11XcEfGPm0Ps859dQ3a5n2
% xxxx
% xxxx
% xxxx ---- S4.1 Format of Pre-Encrypted Ballots

\subsection{Format of Pre-Encrypted Ballots}\label{sec:preenc_format}
Each selectable option within each contest is associated with a vector $\Psi$ of encryptions $E_j$---with one encryption for each selectable option within the contest. Selectable options in a contest have a unique order determined by their option indices in increasing order. Let $i$ be the position of the  selectable option in this ordering (not necessarily identical to its option index).
In its \emph{normal} form and for a contest with $m$ selection options, this vector

% xxxx ---- eq. 112

\begin{equation}\label{eq:encvector}
  \Psi_{i,m}=\langle E_1,E_2,\ldots,E_m\rangle
\end{equation}
includes an encryption $E_i=(\alpha_i,\beta_i) = \Enc(1; \xi_i)$ of one in the vector position $i$ associated with the selection made and encryptions $E_j=(\alpha_j,\beta_j) = \Enc(0, \xi_j)$ of zero in every other position $1\leq j \leq m$, $j\neq i$, where $\xi_i$ and the $\xi_j$ are (pseudo-)random encryption nonces. For example, the vector $\Psi_{2,4}$ associated with selecting the second option in a contest with a total of $m=4$ selection options is $\Psi_{2,4} = \langle \Enc(0; \xi_1), \Enc(1; \xi_2), \Enc(0; \xi_3), \Enc(0; \xi_4)\rangle$. This corresponds precisely to the standard \EG encryption of a vote for the same option. There is also a \emph{null} form $\Psi_{0,m} = \langle \Enc(0; \xi_1), \Enc(0; \xi_2), \dots, \Enc(0; \xi_m)\rangle$ which is the same form except that all values are encryptions of zero.

The principal difference between a pre-encrypted ballot and a standard \EG ballot is that while standard \EG has a single vector of encryptions for each contest, here we have a vector of encryptions for each selectable option in each contest (generally including the possibility of an undervote in which no selections are made). Another difference is that while a standard \EG contest encryption can contain multiple selections, each vector of pre-encryptions represents at most one selection.  However, in a contest where a voter is allowed to make multiple selections, multiple pre-encryption vectors can be combined to form a single contest encryption vector with multiple encryptions of one that precisely matches the standard \EG format.

% todo S4.1 pg. 57 QUESTION: Mentions a "vector of pre-encryptions" and "pre-encryption vectors". Are these the same thing as a "vector `Phi` of encryptions"?

% xnote S4.5 pg. 63 EGRS states that verifiers must verify that "All short codes shown to voters are correctly computed from selection hashes in the election record", which implies that all "short codes shown to voters" are published in the Election Record.
% xnote S4.5 pg. 63 EGRS states that verifiers must verify that "All short codes shown to voters are correctly computed from selection hashes in the election record", which implies that all Selection Hashes are published in the Election Record.
% xnote S4.5 pg. 63 EGRS states that verifiers must verify that "selection hashes in the election [are] correctly computed from the pre-encryption vectors published in [pg. 64] the election record.", which implies that all pre-encryption vectors are published in the Election Record.

% xtodo [S4.5 pg. 63] "For contests with selection limit greater than 1, the selection vectors published in the election record match the product of the pre-encryptions associated with the short codes listed as selected"



% xreqj {
  "section": "S4.1",
  "text": "pg. 57 EGRI `Preencrypted Ballot`, for every Contest in the BallotStyle, for every Contest Option plus an additional null selection, computes a vector `Psi_{i,m}` of length `m`, where `m` is equal to the number of Contest Options and `i` is the Contest Option index. Note1: This is captial `Psi`. Note2: Although `m` is denoted here as a subscript, it is not an index into a second dimension.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1",
  "text": "pg. 57 EGRI `PreencryptedBallot` computes `Psi_{i,m}` for `0 <= i <= m`, where `m` is equal to the number of Contest Options, `i = 0` corresponds to the null vote, and for `1 <= i` `i` is the corresponding Option Index.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1",
  "text": "pg. 57 EGRI `PreencryptedBallot` computes `Psi_{i,m}` when `1 <= i` as a length `m` vector having an encryption of `1` at (1-based) position `i`, and encryptions of `0` at all other options. Note: This corresponds to non-null vote cases.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1",
  "text": "pg. 57 EGRI `PreencryptedBallot` computes `Psi_{i,m}` when `i = 0` as a length `m` vector of encryptions of `0`. Note: This corresponds to the null vote case.",
  "sc": "nyi" }

% xreqj {
  "section": "S4.1",
  "text": "pg. 57 Note: EGRI `PreencryptedBallot`, when encrypting ContestOption vectors `Psi_{j,m}`, the encryption nonce `xi_{i,j}` is derived from `H_I` and `xi_B` as specified in eq. 121 (Ref: S4.2.1).",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1",
  "text": "pg. 57 For each Preencrypted Ballot generated, EGRI computes `H_I` from `H_E` and the Selection Encryption Identifier `id_B` as specified in [eq. 121 pg. 61].",
  "sc": "nyi" }

% xtodo S4.1 pg. 58 "in a contest where a voter is allowed to make multiple selections, multiple pre-encryption vectors can be combined to form a single contest encryption vector with multiple encryptions of one that precisely matches the standard \EG format."
% xtodo S4.1 pg. 58 QUESTION: How are they "combined"? E.g., are these multiple encryptions combined such that there is still a single vector `Psi_{i,m}` for Option `i`, or are there additional Option vectors? Note: [S4.1.4 pg. 63] says "For contests with selection limit greater than 1, the selection vectors published in the election record match the product of the pre-encryptions associated with the short codes listed as selected", which seems to imply they are multiplied.
% xtodo S4.1 pg. 58 QUESTION: What about when the effective Option Selection Limit is greater than `1`? Do all possible assignments within the effective (Option and Contest) Selection Limits require distinct Selection Vectors and Selection Hashes? E.g. say a Contest has two options and the Contest and Option Selection Limits are all `5`. How is the selection vector constructed which allows the voter to apply a value of `3` to Option 1 and `2` to Option 2?
% xtodo S4.1 pg. 58 QUESTION:  How to these "multiple pre-encryption vectors" map to "the j-th selection vector" and "the k-th encryption" referred to in [S4.2.1 eq. 121 pg. 61] to derive xi_{i,j,k}?

% xxxx 9EdEGzv+kNb72YaKJRNdgBmeX2pEPgfQNREEONW65eeCKz5lHJcd8xQYTXIRjy29R5lRmYLI9Won
% xxxx FaBqfdisptALRMr2FwXFnJXKpgkmtsyC29ls0aVIeGJlvhS4aK8DBvw0AwI26F+DpnJi2p0vpu2S
% xxxx +/XwqMFdSyahwYop0RwDRrTz7gB5UobRjb7K2XvWZnsOyaBiBKIU5COzJ2Y5eCu7TL8eeDmmOUkz
% xxxx FktklIxVO++lV0MBISg0vWof7Wd01Ph6+DWATZgkfmEljE1qKvR7wx+HD5gLqgWm7FI+5Sqv2JWW
% xxxx F452bRROB2PO+58cYvXzo1llbRNuaMS8+yG7+DKp3CXth/d0wUg7J40STpvdyFDMG8uD6iE02HyV
% xxxx iAw9Di6m/em82NthGufbN/nzXib9aFgoLzy2v/JtwzRSQimeZ/1Mjy6WNez26jOz5EB86f5Z0Jrg
% xxxx i2Ecz3CdflPnnWB/2on8IqrXFwBmGSBrCmCszQQIdjjlgH7bvYr9YjLTdLQLqWYyz63MQD/rjuz5
% xxxx H1teBxoFB27gFXc3f3PR+ypgoXKbKcEwasW0VEbfFvh1Yz0ABXS6NRekixjajYDIAhhZvLmhkh4T
% xxxx lfIcCao6UmyxZRT4Xw32UUDXJ6pBhvArqSfgBEb8HP8aKFYx7CnIPB9W4QN5RnaVypPC0Nc7sSjK
% xxxx G0lFB5rYj26VhNuF+uSdGxu5Lbc+ED9A3iT7q3XT1zC4hmDKaUf6CtzlnouuV5zA/fxF4Sd1iDv7
% xxxx
% xxxx
% xxxx ---- S4.1.1 Selection Hash

\subsubsection{Selection Hash}\label{sec:selectionhash_pre}
Each pre-encrypted vector of a pre-encrypted ballot is hashed using the \EG hash function $H$ (specified in detail in Section~\ref{sec:hashing}) to form a \emph{selection hash}. For all selectable options, i.e., for each option at position $i$ in the contest with $1\leq i \leq m$, the hash value $\psi_i$ of the selection vector $\Psi_{i,m} = \langle E_1,E_2,\ldots,E_m\rangle$ is computed as

% xxxx ---- eq. 113

\begin{equation}\label{eq:selectionhash_pre}
  \psi_i = H(\HH_I; \mathtt{0x40}, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_m, \beta_m),
\end{equation}
where $E_i = (\alpha_i, \beta_i)$ is an encryption of one and $E_j = (\alpha_j, \beta_j)$ is an encryption of zero for $j \neq i$.

% xreqj {
  "section": "S4.1.1",
  "text": "pg. 58 EGRI computes the Selection Hash `psi_i` for a single Option `i` according to [eq. 115 pg. 58]",
  "sc": "nyi" }

In a contest with a selection limit of $L$, an additional $L$ null vectors are hashed to obtain

% xxxx ---- eq. 114

\begin{equation}\label{eq:nullhash_pre}
  \psi_{m+\ell}=H(\HH_I; \mathtt{0x40}, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_m, \beta_m),
\end{equation}
where all $E_i = (\alpha_i, \beta_i)$ are encyptions of zero and $1\leq \ell \leq L$.

% xreqj {
  "section": "S4.1.1",
  "text": "pg. 58 \"In a contest with a selection limit of L, an additional L null vectors are hashed\" \"where all $E_i = (\\alpha_i, \\beta_i)$ are encyptions of zero and `1 <= l <= L`.\"",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1.1",
  "text": "pg. 58 EGRI computes the Selection Hash `psi_{m+l}` for an additional L null vector according to [eq. 114 pg. 58]",
  "sc": "nyi" }

% xtodo S4.1.1 pg. 58 QUESTION: S4.1 pg. 57 designates the "null form" explicitly as `Psi_{0,m}`, but (eq. 114 pg. 58) refers to them as `psi_{m+l}` where `1 <= l <= L`. How to these multiple pre-encryption vectors map to "the j-th selection vector" and "the k-th encryption" referred to in [S4.2.1 eq. 121 pg. 61] to derive xi_{i,j,k}?

% xxxx jTeCITq1n0zJGFogu+fkDQSDH07EdLlCSSUQIt3X50Tj/lBesQG4xhFSFtYY0IsIV+nT56IMMtLJ
% xxxx +8FqpHP6BmsN6Jt10YwMrcz4aOzwZwEk+RIZnQLgsaBTxg9CaOp2hvzBJCfQWLvW7QvvVImrgGh/
% xxxx Lak1P1lATd2/5PexzaHP4lBoaRgxdd3QVRLRkTf7f+/PofDC7xv9eqoxWGot57+xXcnQNukXTED9
% xxxx poyr9kQLoOK5Z9Htc7A/yh3Euh7D4CTU91Vq5WpVLX3Gcpy3+VMquTgq0ozfC7Kqy8lHoXK0+mEr
% xxxx FTkbK/HxMck6sLCdKkpm6I1w6HvEw+gOFDXmkQtJUX1OoYvFUcDaXz+JNA4T1bUKZHJLYm1kui68
% xxxx xonYg2zyElu+7tZWu0lGFifddG9VuhybxyfmzGNJ9ycvspasRZ2WkvS76r2cmKsY0kW81hbmCgs8
% xxxx mvk2vIrCkEi3gicQPms1t0T8BZkgTUhOl35bwlJzrfRcG3wACxHSmN6T5ASaw4opmn5DwGl4JZMJ
% xxxx Elag2awHtO5bO8BSCWHrjEYbWew+a5fEWgNSGAlSczUhZT1XkYHo5S74txvz2AKvWEKNtyepW5NG
% xxxx gVuquD1Pc1ukZM/vPA6u6+fGyeCYnLl+wHlS75eo7XcBU8pxA5ocSRDmKIoio/sMc4e5u6Q2xlcI
% xxxx XAshp4zgwUNgMk7SkbszLR/GGTc/mSZImtH7jW4z2BoSZFcIRE2B/8O/SUGViXgT1IAQ8CDhL3+L
% xxxx
% xxxx
% xxxx ---- S4.1.2 Contest Hash

\subsubsection{Contest Hash}\label{sec:contesthash_pre}
All of the selection hashes within each contest will ultimately be hashed {\em in sorted order}\footnote{It is critical that these selection hashes be sorted in order to purge the information about which hash is associated with each selection.} to form the \emph{contest hash} of that contest. Each contest on a ballot has a unique position determined by the position of its contest index in the list of contest indices in increasing order. The contest hash for the $l$-th contest (with label $\Lambda_l$) on the ballot is computed as

% xxxx ---- eq. 115

\begin{equation}\label{eq:contesthash_pre}
  \chi_l = H(\HH_I; \mathtt{0x41}, \indc(\Lambda_l), \psi_{\pi(1)},\psi_{\pi(2)},\ldots,\psi_{\pi(m+L)}),
\end{equation}
where $\pi$ is a permutation that represents the sorting of the selection hashes. This means that contests are \emph{not} hashed in the order given by the contest indices, but instead $\pi(i)<\pi(j)$ implies that $\psi_{\pi(i)}<\psi_{\pi(j)}$ (when hash values are interpreted as integers in big endian byte order).
The sorting is required so that the order of the selection hashes $\psi_1,\psi_2,\ldots,\psi_m$ does not reveal the contents of the encryptions that are used to generate the hashes.

% xreqj {
  "section": "S4.1.2",
  "text": "pg. 58 EGRI sorts all Selection Hashes in a contest prior to their use in the computation of the Contest Hash.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1.2",
  "text": "pg. 58 EGRI computes the Contest Hash `chi_l` according to [eq. 115 pg. 58]",
  "sc": "nyi" }

% xxxx j5h3I8BdNrGsOuQVIXvGbuSkZTKEm3sRsAZsZVu2NrXr2+q5LGxb6ix4icXEVB24voXfKFdzM6Xe
% xxxx Epr+iTexH3KIO58lsxWzJ4U65IGvmLxQxR4dsLCt0GlgyoUTOh1XX9GzdbN0na2ZwI2anRHTz4q8
% xxxx GWBp7kmpvejD3WdbAQZUrhTxgqnGoZLMzLPyBbECtxzHhwWGJ8pPnmsL/rYYOisJRD+VfMIHW1RW
% xxxx XhI99m/27ipxmu8hEXXI1/ZEvGEryVgMgQ8zkRJc0Mw4HwD1PSx0ruUUG8FmU4uD/eTogfnCanN8
% xxxx xgkI3GUt/MSWgfl6HYFxKb38mbUlVJxgEPSy9yJAXzc7qpuz3r9TKJTOyrOeSaU2JT8vd8+ODRRg
% xxxx 3uyZYHeOAp4AZ1nbtCb1DJtCRuyfN+4NoThQpG5qXFdE5ylAAYN+/m5SgrbZNYLXHq1UMUk2eGQu
% xxxx mA9QfJhBi4JhlpVNttVEWxCJsTXgrZKQu7JIFpkivBkLAs4CRisldAuA4P7JWvqj7oKpwv3nHWYW
% xxxx Qp4t4dw5lNBkXCwNBX4uKF5IfKeSrO1omQ5DWinxYFFvGZtlCvTPEM4Si4i0djb2ACAh5OAc64o7
% xxxx HcPwgVIs77agJ6hd/TB59yCSJeXtYsvZ5VY4s0WtnKSaN+ytoLstUVh8CYdYhVzRMWRd2fbMhB20
% xxxx rFlIEY4WSfqdsOrsCVHSjp3qSvuzZGHUcw7pBym/60xibMoUC9LWuBV0p7egAfOpQk8ZmZsYzEyU
% xxxx
% xxxx
% xxxx ---- S4.1.3 Confirmation Code

\subsubsection{Confirmation Code}\label{sec:confirmationcode_pre}
While contest hashes for pre-encrypted ballots are computed from selection hashes, which differs from the standard scenario for \EG described in Section~\ref{sec:confirmationcodes}, the computation of confirmation codes aligns with the previous case. The \emph{confirmation code} $\HH_C$ of a pre-encrypted ballot is generated as the hash of all the contest hashes on the ballot in sequential order. If there are $m_B$ contests on the ballot (in sequential order specified by their contest indices in the election manifest file), its confirmation code is computed as

% xxxx ---- eq. 116

\begin{equation}\label{eq:ballothash_pre}
  \HH_C=H(\HH_I; \mathtt{0x42}, \chi_1,\chi_2,\ldots, \chi_{m_B}, \B_{C}).
\end{equation}

% xreqj {
  "section": "S4.1.3",
  "text": "pg. 58 EGRI computes the Confirmation Code `H_C` according to [eq. 116 pg. 58]",
  "sc": "nyi" }

% xxxx j0+H1aVE8xlhhsiazsiMIsZNNJmm1VfPvIHbekzrqtkNsoTGNWUE0PeasL0bPJi0otp+eA5C4bOC
% xxxx rpx6pxNqegvgFxi7Gp4VoKbw9KRcdiYAsp3zPCpvEtT5aCGEIoJsgs7HZPjZeLvzP1Nx33SfeWe1
% xxxx EQWMPEtaaPTESm6WR9esLNNIJXZt3OtQm8pcsTThk2CALU5mW8udHCqwqJmZ/Bzngk1BTpWERKnZ
% xxxx Y3ikMdUGmRCuizSvz4jjITc644eI/w2LDWuHBIqXJmnZd5dKzwbp/0uaMyrLvZiySQmzu0LrjCLZ
% xxxx IhobdPf87CjMJZSx+NGXdbRoWrRJhgkQ8zB/1k3dfJ31avk3AlkMfTXmPwE1CeSr6l3Up9tHkjMq
% xxxx ujN8Cyhi+1eNM5+v/4Rq+7lukrVRE3UAUZCXRE3ymezicnCSRILtNddDjWjHoPa2+zcPqvLRgD+8
% xxxx GtDHhxsyNg6qb3kBHAJY56RH2MOS06tT0bCfofgOi11HrL4CeF5Gs84ISZ0W9qBp8ugBEdoZfdjq
% xxxx 47Co9iTxl48ldBQeJ+aGtKRCr0hTIygAerauBi1jdDjkCklBpgey9QoIm6C+6jCtv9LLU4Xryehj
% xxxx +PNGKyGeSfOGk3dClZVf1xSqUtEQm/SaL7Tie6c5nj16Hp9qxgdUHHd4waXFbQek4FXKyGYFPuJU
% xxxx M93EwppzwNObomE7Y8My67fwLEp43ZtPE+tDhEZLptQN6JGYX2Ha4hTQ2+6fkrUPr66dFZRdel4d
% xxxx
% xxxx
% xxxx ---- S4.1.4 Ballot Chaining

\subsubsection{Ballot Chaining}\label{sec:ballotchaining_pre}
Use of the chaining field input byte array $\B_{C}$ is the same as described in Section~\ref{sec:ballotchaining} to enable ballot chaining on the device generating pre-encrypted ballots. In particular, if simple chaining is used, the chain is initialized with

% xxxx ---- eq. 117

\begin{equation}\label{eq:hashchain0_pre}
\HH_0=H(\HH_E; \mathtt{0x42}, \B_{C,0})
\end{equation}
 and the chain is closed with

% xxxx ---- eq. 118

\begin{equation}\label{eq:hashchainclose_pre}
\overline{\HH} = H(\HH_E; \mathtt{0x42}, \overline\B_{C}),
\end{equation}
where $\B_{C,0}$ and $\overline\B_{C}$ are defined as in Section~\ref{sec:ballotchaining}. Note that the device information hash $\HH_{DI}$ is computed as in Section~\ref{sec:votingdevinfohash}, only with a different domain separation byte, i.e.,

% xxxx ---- eq. 119

\begin{equation}\label{eq:devinfohash_pre}
\HH_{DI} = H(H_E; \mathtt{0x43}, S_{\mathrm{device}}).
\end{equation}
Likewise, the hash computation for $\overline{B}_C$ has a different domain separation byte as well, i.e.,

% xxxx ---- eq. 120

\begin{equation}\label{eq:hashchaincloseBC_pre}
\overline\B_{C} = \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x44}, \HH_\ell, \B_{C,0}).
\end{equation}

A pre-encrypted ballot's hash will typically be printed directly on the ballot.
Ideally, two copies of the ballot hash will be included on each ballot with one remaining permanently with the ballot and the other in an immediately adjacent location on a removable tab. These removable ballot codes are intended to be retained by voters and can be used as an identifier to allow voters to look up their (encrypted) ballots in the election record and confirm that they include the proper \emph{short codes} as described below.

% xreqj {
  "section": "S4.1.4",
  "text": "pg. 59 EGRI computes Ballot Chaining values for Preencrypted Ballots according to eq. 117-120 pg. 59.",
  "sc": "nyi" }

% xtodo S4.1.4 pg. 59 EGRS says "A pre-encrypted ballot’s hash will typically be printed directly on the ballot. Ideally, two copies of the ballot hash will be included on each ballot with one remaining permanently with the ballot and the other in an immediately adjacent location on a removable tab. These removable ballot codes are intended to be retained by voters and can be used as an identifier to allow voters to look up their (encrypted) ballots in the election record and confirm that they include the proper short codes as described below."

% xxxx z8LboWuM08TMiQukJQTMBWvt3Z/KeRhX8cf/08UZvFUaaW4G3cmt8uNGqt8vy4fcryEeLn0aBEBb
% xxxx 0j7gBuR4R7834NH/H4fKqOJpsQZYPPyYVExqFe6L7OUwAm2Che6qXQfhMJwLnLzqezewRQEbLp14
% xxxx A6bdM6Am2uoAeFUaJjwwlE5rH5FXZutt7rS7sOihL5XsA3h7Dz6DW4XlBcQAprBAE5XVHdzVwsn8
% xxxx jFTeMbYKxW9UWQPtiWw1MIt2tabMz+eEmfcinInFZj1o08ZTLPZOIEh/nRXvY4WkKNWTmKoVtwNe
% xxxx FoCwTukKwb2LjCSWvRwaWbsH/hCRHUX+c2Q4XMS0z7iRZK/Zm6Tv2lUna2c+KVavzumOQ2kOp4C1
% xxxx gJPcG0sFH5zKQQH/poiMx/C0yyYQ0l37Uvhtwksg8JfBlx8+5s9ZreEsqwgdu/5wJRmlRZJDDL3k
% xxxx 9CQzLmZtFdx76JyhY7z0QhJXXqIXxj6meKKWWP/GwtZIjmJYxXqFxvudO6gRaRVhedi/TokyhlNf
% xxxx Md/ClI9aSDAx92Jgw4MFQ+BGlUA9O25E8gb4I+i8DbEzD65uIzJZH+SXSH+ELdvJHgJNsv1Y8HdM
% xxxx vIJSuV6czhpJntaxMwNG+3wUy3c/5Y/zyKtWwqTFOc+5LqMs5qTnqNHjQDcRUFLYBbGgWIT6Ba0w
% xxxx oH/wXg0eJMlOLS9OQWwSCHifwomENi2BRq9frXe2SPZjCMyrtiABvUiMIrKlGzeHMOLAtRth4zlF
% xxxx
% xxxx
% xxxx ---- S4.1.5.a Short Codes

\subsubsection{Short Codes}\label{sec:shortcodes_pre}
In any instantiation of pre-encrypted ballots, an additional \emph{hash trimming function} $\Omega$ must be provided.  The hash trimming function takes as its input a selection hash, and its output is a \emph{short code}.  As an example, $\Omega$ could produce the last byte of its input in a specified form.
 For instance, a short code representation could be a pair of hex characters, a pair of letters from a 16-letter alphabet, a letter followed by a digit, or a three-digit number.  The size of a short code does not need to be a single byte, but this is a convenient choice.  Different vendors or jurisdictions might choose to distinguish themselves by using their own preferred short code formats, so the details of the short code format are intentionally left open.  However, $\Omega$ must be completely specified in the election manifest so that a verifier can match its functionality.

The hash trimming function $\Omega$ associates each selection on a ballot with a short code.  \emph{The short codes on a ballot need not be unique.}  However, it is required that the short codes within a contest be unique.  If there is a collision of short codes within a contest, the ballot nonce should be changed to generate a new ballot.  When a pre-encrypted ballot is presented to a voter, the short codes associated with each selection should be displayed beside the selection.  If the ballot is cast by a voter, the short codes associated with selections made by the voter will be published as part of the election record.

% xreqj {
  "section": "S4.1.5.a",
  "text": "pg. 59 If the Election Manifest indicates Preencrypted Ballots are enabled, EGRI requires that the Election Manifest specify unambiguously the Hash Trimming Function `Omega` to be used for all Preencrypted Ballots generated for the election.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.1.5.a",
  "text": "pg. 59 EGRI provides one or more Hash Trimming Functions.",
  "sc": "nyi" }

% xxxx xX0HHbXqHsdqUeVCC4TH1mUvcSAWQ11Bd8jB46s65bDTVVvMAOz8Cx11RvGVBXfFva/+VX5iEOaE
% xxxx p9IkAaN46vfm6/Vk8w1vf7Rr1FSbp585RcRtFL+cXMA+HadfNIHB3jh8IVFHGNoPnSNYVNKBJxBk
% xxxx RzlOcQw3p8hazVEcvsXXDUYues5cbtlGRLv0nJm+kbbU8sLa5h+B7e+2n03TK29N01JHJ4tvO/On
% xxxx OUN0hSwCquxziuA6u5KGcf4Rw5N5dNSkm4nvuQQRO59gArbcNmCCzHoHzgKE1/1hRx25LZxzKQ46
% xxxx fU9kLypah/DrahfPV7Bqgo+v6+/RIwOiVtw/7HcwMed1LxjhwpWZ5O/0/TXLjvkjEKkbt/CeN9KR
% xxxx VDU3VbGcc0aXkJRxTqEUUloBMLmcQEZf4298iy5aqglN8wW81gS4eKM6pKhPCRizp9ipsY8WKGbB
% xxxx 9s8FosMpAMw2fVJBP20h550igf+YFiyEiSm3kdtDfKZD892rlctEv4DjLLib1GqOsnvi+8qT6iV2
% xxxx NEbaRa9DjiVrCEQwj7MFThD7zVmd7rt8K6FEooUlHPSbphTk7RJA3/JpJY+X7AK2QZKUNiHWZxup
% xxxx o+GefvMsL5VEKVYoAnhQwKsE9hN2STVB0PM0BsJ3LISIUpiY2CHvw93UqQNmUXPNGKXZwL43aC+p
% xxxx C2maBSoMCMxWnFhT7Wax3rPrazptCyY99yPy10j7zI+I/a9b/nk+a0sDT/nwrou1fJ6pM0H62LT/
% xxxx
% xxxx
% xxxx ---- S4.1.5.b Short Codes - Undervotes.

\paragraph{Undervotes.}
In addition to the short codes for each possible selection, short codes are provided to indicate undervotes.\footnote{It may not be necessary to print undervote short codes on ballots.} A short code for a null vote is generated from a vector of encryptions of zero.

% xpage ---------------------------------------- pg. 60 -----------------------------------------

In a contest in which the voter may select only one option there will be a single pre-encrypted null vote and associated short code to indicate that the voter did not make a selection in that contest.  In general, the number of null votes and short codes for a contest should match the selection limit of the contest.  So, for example, a contest in which a voter may make three selections should have three null short codes.  The short codes corresponding to the selections made by each voter will be published in the election record, so the use of null short codes allows the election record to not reveal undervotes.

% xreqj {
  "section": "S4.1.5.b",
  "text": "If the Election Manifest indicates Preencrypted Ballots are enabled, EGRI provides short codes to indicate undervotes",
  "sc": "nyi" }

% xxxx OaGSNNG9m1hfAj0WnaxIkkwKuzpTlJgzZd0Zd0Z3FyBYerR0TEBWvqarS2AlEKITdjGICi7D11Wa
% xxxx ilnQfT2pNOM1Ph2EOpsTYHbzSl/FFg5b3fKE5YtTZPD0AoDbZQvjAWBsLKymalyWMW961Rtu1r7b
% xxxx m7QdY3qCIUdCfyDDWYrDwUSRqnHGUzXK7aw0cfd5PIM1Qid+6fdHWJPEUzRYCUEhneIouzQD8ctm
% xxxx aQU+5Tef7BxENh5AZZ1r/r8nvNpnYHCMy79ympnS8Z6H8j6r3ing+yvAnmb8MI0OFAO5F+ORZsZg
% xxxx 0/oFZ8hp1H6oGlh0d0d0GunDYdAEbNZ97qYSx/k3OPKnjhNyq2OVWfhKkQSp2q2k2XNz0/w1sWjn
% xxxx 5OlNS2yQCh4nHS+25l2j7IQ3Wt+vnBJPAV6eB4XkSMLcDFrbc/uqAgGSc7eTgxB4x/GB6qF+MF9i
% xxxx yJgD7+hqQwuySWhLKuSv4O9gw6GXXRALVa7/Ix16zA1iSFqHfiWE6iZlSUCx15FgrjS67gt9orTU
% xxxx MTyZgTfaiiKHrsE2dU/wPGtbNXR8HqrMoyKuRB/UhLHQxwBqqLiKuMdVCSInDckNEmgRajcVMkKi
% xxxx UxXVnOR6Huw24cYlzzVWQzVXNdMb0FVtJOcGVYdrmEATkdmNeY7ZWsYdfJENkL+DRWmgUypxL3p/
% xxxx nsw6Pie/EUaGXObzNH0J5mrsiJ9uGrDxgp6ORWBwaDMn0t7d+8oONOzXCk3OflWKf3mTvGNzonHu
% xxxx
% xxxx
% xxxx ---- S4.2 The Ballot Encrypting Tool

\subsection{The Ballot Encrypting Tool}
The encrypting tool for pre-encrypted ballots takes as input parameters
\begin{itemize}
    \item the election manifest,
    \item a ballot style index,
    \item the cryptographic parameters and the election vote encryption key $K$,
    \item and a nonce encryption key (usually the election data encryption key $\hat K$).
\end{itemize}
The tool produces the following outputs---which can be used to construct a single pre-encrypted ballot.\footnote{Note that it will likely be desirable to construct a wrapper that can be called to produce data for a specified number of pre-encrypted ballots.}
\begin{itemize}
    \item An encryption of the ballot nonce used to encrypt the ballot, encrypted using the nonce encryption key,
    \item a selection hash value for each possible selection in the ballot style,
    \item for each contest, additional null hash values corresponding in number to the contest selection limit,
    \item a contest hash for each contest computed from the sorted list of selection hashes and null hashes for that contest,
    \item and a confirmation code consisting of a hash of all of the contest hashes on the ballot.
\end{itemize}

The encrypting tool operates as follows.

First, it samples uniformly, at random, a $256$-bit selection encryption identifier $\id_B$ and computes the corresponding identifier hash $\HH_I = H(\HH_E; \mathtt{0x20}, \id_B)$, just like for regular ballots as described in Section~\ref{sec:identifier}.
Then, it generates a 256-bit ballot nonce $\xi_B$ for the ballot and encrypts this nonce with the nonce encryption key provided as shown in Section~\ref{sec:encrypt-ball-nonc}.

Next, for each contest on the indicated ballot style, an encryption vector is produced for each selection within the contest (see Equation~\eqref{eq:encvector}).  This encryption vector is deterministically derived from the ballot nonce $\xi_B$ and consists of an encryption of one in the position corresponding to the selection and an encryption of zero in all other positions in the contest (see Equation~\eqref{eq:selectionhash_pre}).  Additionally, one or more null vectors consisting entirely of encryptions of zeros are produced (again deterministically from the ballot nonce) as in Equation~\eqref{eq:nullhash_pre}.  The number of null vectors should match the selection limit $L$ of the contest.  The selection hashes and null hashes (computed as described in Section~\ref{sec:selectionhash_pre}) are then sorted numerically and hashed together (in sorted order) to produce the contest hash as shown in Equation~\eqref{eq:contesthash_pre} in Section~\ref{sec:contesthash_pre}.

Finally, the contest hashes are themselves hashed sequentially to form the ballot’s confirmation code according to Equation~\eqref{eq:ballothash_pre} in Section~\ref{sec:confirmationcode_pre}.

% xreqj {
  "section": "S4.2",
  "text": "If the Election Manifest indicates Preencrypted Ballots are enabled, EGRI provides a \"Ballot Encrypting Tool\" which operates as describedin S4.2",
  "sc": "nyi" }

% xxxx xmOcQP2/ugIjermaAIpF5NCc/XhwQS5K//Bqh2Kpnt/ViWVO3j6FR20+bGypa977Ewwu7ViLoakf
% xxxx dNbQbpYClpFJSgXB63Q01I7foGWe2HsYB+kNR47w5xsyumHs3QOPUFMPmxRY1uo/f0BR+yXt0cdO
% xxxx +jCD/f7ncxwQrmcBwUgwbYu5aOH/1Y4k+/tTI11E4DkNPIOAPlXBbhSggXiP9r912cBoCg0ezqZh
% xxxx BDq2oP6KkyfWbhZ/G/ErJUp21BvXM7+9pFzmwhPks4TQ6X04fMxCeTdE+SgzTFvrC+KbMLDmhKJy
% xxxx uYl1a+SVBhaSqgrtpECbhbZaF62mAUKxs3l6TOe+cKNvgDkUkGRQ+3LmCPUyQj99Ne8xA3ZdQycE
% xxxx hMbRlG1AO4ybwaOekxVRxRpAa5sSGndT3PYR6bq+46d93LDNYBVjJIUYG7SZoFyyFSGZaQBhqHyV
% xxxx JpktwiDRb8FZ9B7ZxIu5f/ckWW9Fyg9PLqBCojoPLBxB5C1YFEDc/whNulfs+JnnqeOiojcFOP3e
% xxxx dy7tBppq5ZNyqRfgpcJ93M1Gdp5N7EZPmTcgBnStJZGnjSqlhcuPPbP14uQwd3EGf2e0s7fAK2pP
% xxxx izLH2JIyJ/DkgArMmXXQlHPAKWiSVw2gRoRI38spyArTQ3xLJzh7PQEeJbJXEnekvFERRC+rGU2h
% xxxx VOf9qztWq7XtnqO7EEVqbu1TvENLkaA6DutbLviOJ89oj+n6FzECGwKgx+UUYNHb70eLTvWHfKSa
% xxxx
% xxxx
% xxxx ---- S4.2.1 Deterministic Nonce Derivation

\subsubsection{Deterministic Nonce Derivation}\label{sec:noncegen_pre}
The process of deterministic encryption is guided by the ballot nonce $\xi_B$.  Following the manifest discussed in Section~\ref{sec:manifest}, each contest has a unique index $i$ and, within each contest, each possible selection has a unique index $j$. The nonce used within the $i$-th contest and within that the $j$-th selection vector to form the $k$-th encryption is

% xxxx ---- eq. 121

\begin{equation}\label{eq:noncegen_pre}
  \xi_{i,j,k}=H_q(\HH_I; \mathtt{0x45},i,j,k,\xi_B).
\end{equation}
Note that the nonce $\xi_{i,j,k}$ will be used to encrypt a one whenever $j=k$ and a zero whenever $j \neq k$.  Note also that some of the selection labels will represent null votes.  If labels for null votes are not included within the manifest file, the sequence of indices should be extended accordingly.

The output of the encryption tool includes the encrypted ballot nonce (computed as described in Section~\ref{sec:encrypt-ball-nonc}), the selection hash corresponding to each selection on the ballot (including nulls), the contest hashes, and the confirmation code.

% xreqj {
  "section": "S4.2.1",
  "text": "If the Election Manifest indicates Preencrypted Ballots are enabled, EGRI produces nonces deterministically as described in eq. 121",
  "sc": "nyi" }

% xxxx x7Hxj7/owx7uEGQ6UF95Uq4SMLmn2yNcQ774Ob5MpwW7IZ5flIXMgYcYLFsXDK7EuHqBZRXRhMrI
% xxxx Cs7t97hqoD6NTv90JxFVQH6ruzi6hRH32juxBwBsaGkYvy5W4WMr36EUC++nvvA+HVhV6ecD9s57
% xxxx PED0lzuUz7rJkkZoY97DY7ca91mku4t3fT8vAx7/Oe4Nih0ee34dL/nRl3Y+xwp1N/t7Wf1SdWB/
% xxxx M8aQVEAsV/NgOIET1SAhdbNExE9K9z0AcXdnQBkMjei9esGrasTrikYpf53BW+GG/m+HvbSH1V1f
% xxxx XKhl3khg0SnkkXlco1tFc3wF8tyKeTutvpWSxf6IYjOCXO8D+a2VAuXbKy+HYkyKzoaCPpgB1gBa
% xxxx OtgqI5mq7OkHaB85BQqIWXHAkw1O5QkE2G874ZImudEExxwent8XRkZdUWQL/sYYbOGFNVJ+5vPm
% xxxx VOoS8km8KHC2jNNlHUqSdETjZpPw7gJgsTRX+dsO2420L/x4AZAAYkAa3VQDDnuUkhfXcxUJr2xG
% xxxx fyKKkN+kjfGZJ2r5xC64qPJLuLbafHX6cSum+cIOMd0uunIyO25YPEsM/WOlwNFc5h9aGY5lP3WW
% xxxx G49CIMmjJ7TF9wGDlSXFHuLKtGN06Ho5oFZPctW6dBYuFrXj4kzJURqlgz+hXpt7pXMnoOUFrv1/
% xxxx xumLXxn4D6WLsIPcqVguAvL/JpR0eXae+p5WFmTPoXPH5jvrwv5thrtf1p46qQANcQDp4dgWKhTg
% xxxx
% xxxx
% xxxx ---- S4.2.2 Using the Ballot Encrypting Tool

\subsubsection{Using the Ballot Encrypting Tool}
It is the responsibility of the entity that calls the encryption tool to produce short codes from selection hashes.  This must be done in a deterministic, repeatable fashion using a hash trimming function $\Omega$.  As suggested above, one option is to use a human-friendly representation of the final byte (or bytes) of each selection hash.  Another would be to use an ordinal integer to indicate where in the sorted order of selection hashes within each contest each selection falls.  (For example, if a contest has four possible selections, the integers 1, 2, 3, 4, 5 could be placed beside each selection – including “none” to indicate the sorted position of each of the five selection hashes.)  This flexibility allows vendors to distinguish themselves with different ballot presentations and for vendors and jurisdictions to choose presentations that best accommodate their voters.

Unless the short codes in a particular instantiation are quite long, it is likely that there will be occasional collisions of short codes within a contest.  It is the responsibility of the entity that calls the ballot encryption tool to ensure that no ballot is produced with a short code that is repeated within a contest.  If a collision is found, the caller simply discards this ballot data and calls the ballot encryption tool again.  The caller may also choose to discard ballot data if a short code is repeated anywhere within a ballot or if two short codes---within a contest or across a ballot-–-meet some definition of similarity.  The caller is free to discard data and obtain a new ballot pre-encryption as often as it likes.\footnote{Note that a malicious encryption wrapper could bias the printed ballots by, for instance, only using encryptions in which a particular selection’s hash is always numerically first within a contest.  However, a malicious wrapper already knows the associations between the selection hashes, the short codes, and the actual selections, so it is not clear how a malicious wrapper could benefit from creating a bias.}

% xreqj {
  "section": "S4.2.2",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "" }

% xxxx Pz317QD9auw2OXxFusLOFyQznC+MGX/y9xUYRF9AeIY1O5XoeDihVt5hXCX+nFXPJGUctQL7LzMz
% xxxx +rngtE/GtC1sLyiXjHC+juTCLOEdNtI4ZXbH1qRXImWZ3MhSDKZ8FCii6JvrbaPXhCzQYzTLyo4p
% xxxx 76S6hvyjdPRWHCT6Pu1LXIm+Cntql8UziTC2r6tD0cfwj8454TtMF0HWES+cOLO8tRFFbQlKwIDw
% xxxx dGJgSUJ2fKn37Oc1dHkpwxopTjtmZ4rjM4awQLFDFXFVnI4jLkAZKS0xBdoe+ziTFaIXsxHmombt
% xxxx UX1DdKfM5wvmtUxGTFhYbF9UhJlMMZURRo6JRpyoh1L62Mj2nlRKMdpo34+u4sahvIK4qL+fl/YQ
% xxxx FEjV8xBe0bDt28I+RAGAQDmzrpSLmo1IC9/UHz5jXv2yjIP4R+7STehj6trdJWSBtE4TdEfDlJSs
% xxxx lQG9njKCI+rgx4ZjvYo3vVvgfwXVIQisHymvLbt4/Fk5gDWXwsts++apDXZ7pvjE0BegxbnsZzJz
% xxxx 7dXKxWDKD4kAjfUxtTJji6deceZl/46taFrNJIwl8AA18cGFuHe0WHPSHidSkuOYh+eQD89QYaTJ
% xxxx 8eAhuznAzuDjg1HO9Ec+4IHTCUzunGEl+vFmebLhqVYYQuweQ+pTJeqUZ/q4d40vCJh3l5SlV1Zw
% xxxx WoNnAisWGcgX8hJI7S9MJlbIBwmaxcKWq6baIdWgkObxq+od8ZVgutcICxxdTpPNEw6FoyBA9Wet
% xxxx
% xxxx
% xxxx ---- S4.3 The Ballot Recording Tool

\subsection{The Ballot Recording Tool}
The ballot recording tool receives an election manifest, an identifier for a ballot style, the decrypted ballot nonce $\xi_B$, and, for a cast ballot, all the selections made by the voter.  The recording tool uses the ballot nonce $\xi_B$ to regenerate all of the encryptions on the ballot.  For a cast ballot, the tool then isolates the pre-encryptions corresponding to the selections made by the voter and, using the encryption nonces derived from the ballot nonce, generates proofs of ballot-correctness as in standard \EG section~\ref{sec:proofsballotcorrectness}.

Note that if a contest selection limit is greater than one, the recording tool homomorphically combines the selected pre-encryption vectors corresponding to the selections made to produce a single vector of encrypted selections.  The selected pre-encryption vectors are combined by componentwise multiplication (modulo $p$), and the derived encryption nonces $\xi_{i,j,k}$ are added (modulo $q$) to create suitable nonces for this combined pre-encryption vector.  These derived nonces will be necessary to form zero-knowledge proofs that the associated encryption vectors are well-formed.

For each uncast (implicitly or explicitly challenged) ballot, the recording tool returns the encryption nonces that enable the encryptions to be opened and checked. Releasing the individual encryption nonces instead of the ballot nonce enables selective decryption of specific contests only as explained for the standard \EG case in Section~\ref{sec:decrypt_challenged}.

% xreqj {
  "section": "S4.3",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "nyi" }

% xxxx mnBOLPI02IjMrlwPS3T/ScPyJmHN02530SnGVu+DnhuzLuj0Ek6b8DpMOJu+LQbNvdgUTqu8RibA
% xxxx cRcgA3cd0ipTIv+LcPLDaSdvRXNXMXUJYP7s4nl9YnXM02kOJbYrxE/jK8owfSq6dzUW3MaJpGsI
% xxxx tu2AJ/ASheV3rwvfI8LJR6ciOrmzpaTQI1FRQxEP39bXmuDYc1mZPaGbfZWPhb5T6aD9IyTmBj2F
% xxxx yB0UA377t+8DFJHzT1/EZMCAHz/ZFu9T7VPiThBUFvn1NPwb77A+X1TOS+zh2sJPvSJV55t+4PGY
% xxxx dpyT5zW704hJkqt0u6na/ryyRp31khONvRJ3p4It8wv6hoJtiJkAx2mqt0JDjgndgNycR3J83cS8
% xxxx gw9mVtyS0BnTuAC/nR/jjAD8Wz/6TU50zpY+teLGuv75H5XfL5NKPmNufTp9koxoj69l2iEZRTQe
% xxxx JCxDZjmQmqkeJKAQd2Ud3TLLvI4ddD7TXreqVjI9Sr62MhCh2PijHGAH5BkVHB+CO3NhzxRCCl2G
% xxxx 7ZS/I/wVbp2uc35zcbBDQZTabvIPm4KxV2wKNUncCZbOsUsduqMKAVC7YAG9JXR69uDy9ydjXTLF
% xxxx JEaOmxyhlMqXzeGci/Py+PEadwJm3MsR0NRJMXmrvNH1paysASxyv04pOzEdJZMk+YQYlmlU//3w
% xxxx vd9Y9gzYtXXX/zICkTRqzuJUOUHyLhpnwQAUYKhUo6EhHruiP9qf1sJs/Eako5cQlxGAY8wsMUgn
% xxxx
% xxxx
% xxxx ---- S4.3.1 Using the Recording Tool

\subsubsection{Using the Recording Tool}
A wrapper for the recording tool takes one or more encrypted ballot nonces and obtains the decryption(s) by interacting with guardians, an administrator, or a local database and then calls the recording tool with each decrypted nonce and ballot style – and for a cast ballot, the voter selections.

If the ballot is a cast ballot, the wrapper then uses the hash trimming function $\Omega$ to compute the short codes for the selections made by the voter and posts in the election record the full set of selection hashes generated from \emph{all} pre-encryption vectors (whether or not selected by the voter), the full pre-encryption vectors corresponding to the voter selections, the proofs that these selected pre-encryption vectors are well-formed, and the short codes for the selections made by the voter.

For an uncast ballot, the wrapper computes the short codes for all possible selections and posts in the election record the full set of pre-encryption vectors, selection hashes, and short codes for each possible selection.

% xreqj {
  "section": "S4.3.1",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "nyi" }

% xxxx 9C/MqAxXErpZT85emeyVF56U+7rSXTkn41RheROPog+v8tNEGlDbLK2pZ/dW8SCgtx+vdcNeaBCz
% xxxx 6YmBsGd05UKOUcHWx990YVETHZrgu8IthMnHTiupG2VXT4nphSVtNkI57GFFnOaMJW9wEN3DuBvH
% xxxx 44kRjdldW+2kTNZNfIKgFuirsPJRJtqVDu8yP+pGM/a/dzRlNHu3IGv7suz30RcZJyKY5P+QszlM
% xxxx WbV6JvunBo1ByX4ncSjS7/VTtR+53xMVSpI00+39vqoN06yNIMAZTlyPOpn4uLiYF+9O83ULrqAy
% xxxx 2YtV/p44Bcdx9BMoGhiW3tw27t1XKOr7mrxxFR92SBEzHxMOr19dCL6r9rlJ8JklweP/Tvjx62dl
% xxxx J6XwIMknT8D6DhUqmG6Aw5eiphIWvlkZDIkSVwYzzhDWIno72+79QySPXu7DmHcfFFf8A83hTKYN
% xxxx r36u+UkVir7zE7Gyrpkl51jc4x5dT4T6bxvTaQsYT8tvxkFEKevPjEOdNU6JvJ3VH3szF4ZtXniM
% xxxx 5B3ZNyt2pTpEk5KtjldC5dySVGL/iOMVsbVFL8+2IVTH3+UoLsbdKBYeeHx4U0i/AmxNBJ+n5/m4
% xxxx 2BYicq2m/TjptBRmFs5E6vqLUxXkLcf1IwxTmnACc/dD+E+qq9v9sPws8m7be79Yz2Fn4Xk7PWrV
% xxxx dFrp64qQIeJXAgrit7FBRsiK8fJKCxHqjz2sXmCQ0OkPixta6P+FEltnpQG+vut29p7UsEn4vRec
% xxxx
% xxxx
% xxxx ---- S4.4 The Election Record

\subsection{The Election Record}
Selection vectors generated from pre-encrypted ballots are indistinguishable from those produced by standard \EG.\footnote{Pre-encrypted ballots in an election record can easily be distinguished from ordinary ballots.  However, ordinary ballots and pre-encrypted ballots contribute to the same tallies; so, no information about which votes came from which mode is revealed.}  However, the election record for each pre-encrypted ballot includes a significant amount of additional information.  Specifically, for each cast ballot, the election record should contain
\begin{itemize}
    \item the standard \EG encrypted ballot data consisting of selection vectors for each contest together with all the standard associated zero-knowledge proofs that the ballot is well-formed,
    \item the selection hashes for every option on the ballot (including null options) – sorted numerically within each contest, and
    \item the short codes and pre-encryption selection vectors associated with all selectable options (including null options) on the ballot made by the voter.
\end{itemize}
Note that in a contest with a selection limit of one, the selection vector will be identical to one of the pre-encryption selection vectors.  However, when a contest has a selection limit greater than one, the resulting selection vector will be a product of multiple pre-encryption selection vectors.

For each uncast ballot, the ballot nonce for that ballot is published in the encryption record.

While the basic pre-encrypted ballots are identical to standard \EG ballots, their con\-firma\-tion codes are computed differently.  Unlike standard \EG ballots, pre-encrypted ballot confirmation codes are computed before any selections are made.  The confirmation codes on pre-encrypted ballots are computed from the full set of pre-encryptions.  This is the same whether the pre-encrypted ballot is cast or not.

% xreqj {
  "section": "S4.4",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "nyi" }

% xtodo S4.4 pg. 62 refers to "every pre-encrypted ballot listed in the election record as uncast". QUESTION: Does this imply that every `PreencryptedBallot` generated is recorded in the Election Record?
% xtodo S4.4 pg. 63 states that "For each uncast ballot, the ballot nonce for that ballot is published in the encryption record." and [S4.5 pg. 64] refers to "every pre-encrypted ballot listed in the election record as uncast". QUESTION: Does this imply that there is a point during the tally process at which generated-but-not-cast `PreencryptedBallots` are no longer accepted? If there are multiple Tallys taken, then it seems really important that this only happen at the final Tally. Someone who submitted a PreencryptedBallot that was somehow delayed in the mail probably does not want their Voter Selections made public.

% xxxx lVdyMZdyAOpd1zyYFpBuTb4STnEWYnKNPzN+2kL6sH7RIZr6IBVJuzapSrt6PXlB5rXaf6jb2k67
% xxxx 3NAbIXDNMm1jFsvEdqtRMWDGWUlb5dEVl4v6HKvg+nYP3/zBuOfsN1wxYJ3ucXIUgjvhTdhpn3FC
% xxxx UxMqti1qyO0zKaNmbJxcMAACYi75+6RsP7v6f7znITseh8tsOyycAx0zPDwSWtKKTkDg2K4V1SYV
% xxxx bcAggXZch21NRxwcuIv6T2Fs0w2hezOgItbPFD38oxHTgBfE+4ciY/n704lJjS+6VZG4zQtz5adZ
% xxxx HZq6kxpH+dH3YhyT+fKx/11Fb7iqDQIquhMRG55egA4XQHUmvm9dXOQU8vNBVStC9UscZq0D1owF
% xxxx tvqp+3TTnjmfc/BBbUI5+2zeMDb7zHsLK6oStQU0gylIJs+omQ1S/TSRoHZazq3mcvnaBiL5K/5S
% xxxx 6KOyweWP30v9LQ8x29ZOHNSfMmokZg8obBUsmPqMMsPM8DDzDfrmRf7Yt0WQspgwxD0NYy5uNjqW
% xxxx rCyPdiK+zDZ5gxe8+1lURIZSmbR1n2prtvpGd4IOTt3YtLy12jk4zFuaiyaS0+nfA6tHjise17C2
% xxxx hPMklm5P7o0z4mYf7hhQuX14mGcVswxKg9M1C1iGxKmpoeHJWQuBn2hYgc9P5mLcLf2Aq0/SzSkV
% xxxx 5C4Z/zln5MSNb1ShlWYV53yMyOo40V7BSaJvjBPTg61bZHt2c733yeFl8YqundCQW9mkqsWTFCFX
% xxxx
% xxxx
% xxxx ---- S4.4.1 Election Record Presentation

\subsubsection{Election Record Presentation}
The presentation of data in the election record should be cognizant of the fact that there are two very different uses that may be made of this record.  Individual voters will want to look up their own cast and uncast ballots and to easily review that they match their expectations.  Election verifiers will want to verify the cryptographic artifacts associated with individual cast and uncast ballots and check their consistency as well as the consistency of the reported tallies.

It should therefore be possible for voters to see, in as clean a presentation as is feasible, the short codes associated with selections made on their cast ballots and the short codes associated with all possible selections on uncast ballots.  The presentation of uncast ballots should match, as closely as feasible, the appearance of the physical uncast ballot as this presentation would facilitate comparison between the two.

For election verifiers, all of the cryptographic artifacts should be made available for verification.  Verifiers should not only confirm the consistency of this additional data but also that this additional data is consistent with the cleaner data views made available to individual voters.

% xreqj {
  "section": "S4.4.1",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "nyi" }


% xxxx E5uW8hXnsIxbmyuPN8/Xm09WMCTVQ8TkfSt1bSb5fM9r9DiS5FEXot38mduB2kwmL25sInb0DQWt
% xxxx 4f2SaAw5RHHfC8quxGjmb/W1iCZ6cteWsEl4gI7Yi6j+HZekwdRcyHY7i1tj2sDjrDe4uiojpclF
% xxxx pUZjjzKzLGgc0aRgX9MyJ9HRbjQB2fBkGmsgWqFh8aB2JqYX0thRPIiqJe1QDL/mHlDzpc2O4PDD
% xxxx EePsDyyb2dWR5o0L9nHmvDbHudj6QmyFYSGktRMkn4/+zWVQS3IwtZrzHEA0Zod7cRuFCVZRzrLE
% xxxx u0YXDquFJC/ntGg2kcD3XaCIvcDc06fODyCWqhn2rrlmDcmVaeK9iFabUGdPaj/41ChIHXlEFg99
% xxxx hROZEgp1Mp54tLk+OucxssWIRWDQigewj74WnW32pqZSTrmP8JcufvqZBIcevWnlqNRYgeBKY/R7
% xxxx +k11EwR6W3xUNouUQpM7+Eqchfno/9LhRMYNOkn38HfpmxZh8xkIcGtye+J9TgcUyZz2EVEshPbS
% xxxx hJNjRiCxtMhMPsyoBk2HwNLo0tzekukitmaL3j+1TgmJoEmcr+SQwnc7hKZQLVrf/TUitqIVn7wG
% xxxx gJ2cK1bzG40cZcSMSkiGbLvYSmKOJyfzsE2QVzycRTfoDe2BvYQtuewd1LYwLTnVu5ftEbz/23B2
% xxxx tNzj8RBgCnYAwzQ8+iCrYGNbo+WEVkDnU7i6nN02pP+iXRKooCMasSpdGLXyqyjcFHJN8pHZdEL9
% xxxx
% xxxx
% xxxx ---- S4.5.a Verification of Pre-Encrypted Ballots

\subsection{Verification of Pre-Encrypted Ballots}\label{sec:verification_preencrypted}
Every step of verification that applies to traditional \EG ballots also applies to pre-encrypted ballots – with the exception of the process for computing confirmation codes.  However, there are some additional verification steps that must be applied to pre-encrypted ballots.  Specifically, the following verifications should be done for every pre-encrypted cast ballot contained in the election record.
\begin{itemize}
    \item The ballot confirmation code correctly matches the hash of all contest hashes on the ballot (listed sequentially).
    \item Each contest hash correctly matches the hash of all selection hashes (including null selection hashes) within that contest (sorted within each contest).
    \item All short codes shown to voters are correctly computed from selection hashes in the election record which are, in turn, correctly computed from the pre-encryption vectors published in the election record.
    \item For contests with selection limit greater than 1, the selection vectors published in the election record match the product of the pre-encryptions associated with the short codes listed as selected.
\end{itemize}

The following verifications should be done for every pre-encrypted ballot listed in the election record as uncast.
\begin{itemize}
    \item The ballot confirmation code correctly matches the hash of all contest hashes on the ballot (listed sequentially).
    \item Each contest hash correctly matches the hash of all selection hashes (including null selection hashes) within that contest (sorted within each contest).
    \item All short codes on the ballot are correctly computed from the selection hashes in the election record which are, in turn, correctly computed from the pre-encryption vectors published in the election record.
    \item The decryptions of all pre-encryptions correspond to the plaintext values indicated in the election manifest.
\end{itemize}

This means that an election including pre-encrypted ballots must be verified with the following verification items:

\textbf{Verifications~\ref{verif:parameters}, \ref{verif:guardiansPK}, \ref{verif:electionPK}, and \ref{verif:extendedBaseHash}} pertain to verifying the election parameters and key generation. They remain the same, independent of whether pre-encrypted ballots are used for an election or not. As indicated in Section~\ref{sec:overview}, these verification should be considered optional for an independent verifier.

\textbf{Verification~\ref{verif:uniqueEncryptionIdentifiers}} must include all ballots in an election, i.e., if pre-encrypted ballots are used, this step must verify uniqueness of selection encryption identifiers for the full set of ballots, including the pre-encrypted ballots.

\textbf{Verification~\ref{verif:selection}} must be validated for all selection encryptions on all ballots, including all individual selection encryptions within the selection vectors on pre-encrypted ballots using the appropriate option selection limits.

\textbf{Verification~\ref{verif:selectionlimit}} confirms adherence to selection limits and must be validated for all contests on all ballots, including contests on pre-encrypted ballots with the corresponding contest selection limits. In addition, if the contest selection limit is greater than $1$, the selection vectors that are published in the election record must be validated because they may be accumulated from several pre-encrypted selection vectors with corresponding short codes. Therefore, \textbf{Verification~\ref{verif:PreEncryptedSelLimitGreaterOne}} must be validated.

% xreqj {
  "section": "S4.5.a",
  "text": "[TODO: Pre-Encrypted Ballots]",
  "sc": "nyi" }

% xxxx dVP7xv3oUAQxL/n+OH8Ht3gJCRpcqDT9UQKf85/cCYbfUZPuuFhtqvtpFU4ISKilkYGzD8637/Dp
% xxxx btx6+XlEtLJdESxgO4sknVXRUPOf3bqb4mLf82+fpbrKhBii9Lqtf3n3i9lw2fBEuMzcFglVb9Ua
% xxxx 4lLIzxT+rIaUuMK5AbD46hHv3cwOzsH+4CTetigPJK5Kuc7lNDNcRqXHWvNgt8XNvdbSnC75LeBv
% xxxx rRqfjkcEQt1daE2sS5L90iCqsXpPdnKJZwzg0qc1Qhmc1337w2GsesRObQdPrpMMJKYdtE8eI0gU
% xxxx i3RgKHXsl+9uV6xt+d1GGkRiJdBa39n3QDhY3qlKsy1uS9NPvUCT0P3ow9Q9dWkBJ6uNjkWjyyV7
% xxxx 5q8wqTtuiCplAUoGyVhweNbRw+b6Ex4Unc8VkKHIqDrJ1y3Nh4KHPij0eB+pXEPrbDV8jeW32ZAL
% xxxx gtP8hYtvs6wbTnSWRrvbEi9zzOQyYy7JBUzzy3rhNb4ddt5i4LYKTKmuExcwjXCj9m6aUatkjqdC
% xxxx LELznSMK5+mJHdiPoiNLFLZ3Su2TGqQNPfZufYRBsCDmgNuQCK5N9gl/uJDzyiGAlrcCrXP1FIEi
% xxxx ooqSZ+eEzL1UJinPOablUXjZ28bz7nb14KNs2W226xjDzTUPxYMyLKcq7PurZKeJ4Dh28lbhL3AX
% xxxx BUiFWmt7JP1LGWJv4RBInpfAYYmCEv/t3bY+3pt33FmRuGWBCyZ32xK4JKdp+wM8U56Vbxbig0uG
% xxxx
% xxxx
% xxxx ---- S4.5.b.verif15 Verification of Pre-Encrypted Ballots - Verification 15 (Validation of correct accumulation of selection vectors)

\EGverif{\veriftitlePreEncryptedSelLimitGreaterOne}{\label{verif:PreEncryptedSelLimitGreaterOne}
\veriftextPreEncryptedSelLimitGreaterOne}

\textbf{Verification~\ref{verif:trackingcodes}} is only used for regular \EG ballots. Confirmation codes for pre-encrypted ballots must be validated with \textbf{Verification~\ref{verif:PreEncryptedValidationOfTrackingCodes}}.

% xreqj {
  "section": "S4.5.b.verif15",
  "text": "TODO: Verification 15",
  "sc": "nyi" }

% xxxx 7doDbEmrgh7Ts9N43gvWAMSGX11deoNHqdNwzocUvSxUsM4g5HSLpYdQFZf/6wr/R+CT/0YlOYoB
% xxxx xovYbIJfTaTdl7+807kT+6Xh1StaLBhbxvNokLCNZbhyluktAFXF/z/4W4FdiDmN4AwIVf97qrPl
% xxxx +zG9RC4exCXCy0dChtdWBuvBePr4Yahew02hHv/sm8DGbmmfwuiM0V7HwaSWNh1V1ekgKsUnp2XU
% xxxx cqoN5cwzpRux3nkf3zFBmQstDZjO4j60fsQ4oOxLBqozVak+F3Yd+XwnOq3hrOE0qK1ChROmJ3Zh
% xxxx ULZ4EPqG1XT1pDPaurqWxs8g6muVLRSVQot/yNrbSl3lavI062wuwii6l7NIVb1ftGdQjdU3EVYE
% xxxx Iulz2oWwCIz564gDOvnBXzDQUVPOdiUaFVSzIMuqXkbJlpHUDILZCK7Kref1A4WGCWpEaebFiJhD
% xxxx XwpQDRWgrD40WdrLFcIbd6El7CYonTmxwo93MFax2HCg4vjj3fsHZBnSDKLhZuZRght0iDqP0Yc3
% xxxx WolYNLcwgctOv0k1Q538Dt/VGyUlPkvHL/8VO2NZeMB40UEZ43Wi2w5Kh9v8+z32snN16uqSJGIh
% xxxx YsvzAS6+vihFPVDI8YjJBTTsSoxPxIwpXTvl3SllwLkEam1eTjZA1jBBGoOJ73Mr8Brr1G7fb0dV
% xxxx tNQ2jZ3jKBOAhJsj3ZNF9E4LMEcmI9l8QT+k98nwJauEBmEdBs0H+TClHu36w9ASIX+bSYnPWSFd
% xxxx
% xxxx
% xxxx ---- S4.5.c.verif16 Verification of Pre-Encrypted Ballots - Verification 16 (Validation of confirmation codes in pre-encrypted ballots)

\EGverif{\veriftitlePreEncryptedValidationOfTrackingCodes}{\label{verif:PreEncryptedValidationOfTrackingCodes}
\veriftextPreEncryptedValidationOfTrackingCodes}

Additionally, for all pre-encrypted ballots, an election verifier must validate the correctness of the short codes on these ballots, i.e., it must validate \textbf{Verification~\ref{verif:PreEncryptedValidationOfShortCodes}}.

% xreqj {
  "section": "S4.5.c.verif16",
  "text": "TODO: Verification 16",
  "sc": "" }

% xxxx 1lNQL/tm1vj1bs0D+HydbF3W6J40WtT84/Xri/qF8dl/y4gHpUMGvdjQpOhxzZWT8t13kAAMjOtp
% xxxx ZuFq3LHEY706/nGDpbnGeKskqJprEKbkb79rXA6qsiK9wzQY78I3y6oVaYu3NjXwvH97DeVfFdsd
% xxxx JqbFujhN5XO3I2mD/6cj6YCD5/7KqmkxDIZIer8G2917R1jvGfYxJJFK4aC52FWAeQzlwbUiekxe
% xxxx TXFgRZQjIUnCwp2YH4gOsTV98BP9cmG5eLn4Po2DFwknmYSTD+zgKtZMITa0NH6cMuN8xb8DaRYM
% xxxx QBQYFVIQTOzPrg2IXcFCcTamTduaJ5NCFYJ+2hkKayFHLksB27b4LBh6GyvUucqZ9sIeRkB0krzR
% xxxx W+EbqBAiznUBQifoK2hvdIdYAZvUhy2fNqcerrgcDpLJLRINeyP9BsU09QuyMrxs7hQQVA7hyVPS
% xxxx PWfM/csbmLB5Plp/oK+OvjRKn3IlEEW9d650Z9P1XELmvNWk6UA1AleF0qm2O8dJ84CAz2xqURt9
% xxxx oOffNW2wGQ0KoyxN7BhsOGaD1ruXeGK/um2Gem0doCWXS6rq8GgVuy29ckBLllfhBseEjystU24q
% xxxx u/YwVChY10pY8r7KdpxhIFSzy/hW0Ir8sWSMJh9pqtUjI4Gf9wsucIol1aPeKrYqOKSJydd9OSAt
% xxxx 58B4JTp06ns8d6LrHnc5yI6UTLHWfworSKbYfJNmysuTdtAcdPB40mRpkxrHld7SD1AVuWkolsg+
% xxxx 9IBEhTC8Ug8ma1a33fWu9HSvslNR2Td40TYE1gBcrv7Fa6f4Z7cJq2j364Ann5ov5jkGHYCspWin
% xxxx
% xxxx
% xxxx ---- S4.5.d.verif17 Verification of Pre-Encrypted Ballots - Verification 17 (Validation of short codes in pre-encrypted ballots)

\EGverifBallot{\veriftitlePreEncryptedValidationOfShortCodes}{\label{verif:PreEncryptedValidationOfShortCodes}
\veriftextPreEncryptedValidationOfShortCodes}

\textbf{Verification~\ref{verif:aggregation}} of correct aggregation must be validated for each option in each contest including regular and pre-encrypted ballots.

\textbf{Verifications~\ref{verif:decryption} and \ref{verif:tallies}} validate the correct decryptions of the tallies and the correctness of the tally contents and must be performed for all tallies, including those comprising accumulations of regular ballots, pre-encrypted ballots, or both.

\textbf{Verification~\ref{verif:extdecryption}} is not validated for pre-encrypted ballots because contests on pre-encrypted ballots do not have encrypted contest data.

Finally, uncast pre-encrypted ballots take the place of challenged ballots and their decryptions are ``opened'' by releasing the encryption nonces $\xi_{i,j,k}$, which are derived from the ballot nonce $\xi_B$ via Equation~\ref{eq:noncegen_pre} after it has been decrypted as specified in Section~\ref{sec:decrypt_challenged}. \textbf{Verification~\ref{verif:challengedDecryptWithNonce}} is replaced by \textbf{Verification~\ref{verif:PreEncryptedValidationUncast}}. And to verify well-formedness of the uncast ballot, \textbf{Verification~\ref{verif:challengedballots}} is replaced by \textbf{Verification~\ref{verif:PreEncryptedValidationOfContentUncast}}.

% xreqj {
  "section": "S4.5.d.verif17",
  "text": "TODO: Verification 17",
  "sc": "" }

% xxxx rDRK3b+a6aCUEwy+JaZrURjmZONc+pbh7F2Adx0Wl6L1v0vxvj8ZHt27PR04ReZsbozQ4tva/kIj
% xxxx Rpv+ypm3N++fdCQfVkpd+uj31NDu+pqgrd7vgSSqTOP1PONL9uv7ZjnNflhUNrxIrpfekqqDsz7d
% xxxx s7cAb36KX5EtHL9hpobd6g3nOk1ey78IyNXSooQOBfK2LzX7a0rPKYyCQXgXktDSJUTopIP84PpT
% xxxx v6ZAUvsqsX54AXqRYdycRGPaGOnrUlyxub0ZjgKnH6UiuB/3/noVLn22WeP/hSvSszNS/5KDWcHY
% xxxx Ezbc5lX5JqIlitpVa+MphQ45dF81IyAA+EtfWk6qe3RRgFtvqiDPsnOeqlW2HHt0Gxs0HzE2vcta
% xxxx ndSFXog447UMNbx2SvTSP70fosJLJyExt4x7EQkTAQNCBVvGGVjs35b+hMxw9prB73fS6cmaehkq
% xxxx 1W3xrBWlKcWxRvWKKCXEosrf/VmugtfKVxE3emlvnq7KUz9aJMke7+mFDrU+Oim30/u35v4oXoT/
% xxxx 5uoiUU+XZQeUjp1NlT1FQ7lKcMteTTB7a2XgxykvqHAagEpan+Ncs5VahCV+4QWWbgvUhgqA7I/q
% xxxx o4MOvHEFUhNMQhFoPeY5DNWQtAMQipPkRR9sVJ3r8VKkDtFDF9hnyGtYJXjlq5u0j6Uxn1SgnlUb
% xxxx 1MsKsjcZrU3S8XKiEqXmGyIN7fOGq02IVjtwxmwruDeUSJkCrKkfu7mMJ9gKjJlod+MjIBB1Ybyk
% xxxx
% xxxx
% xxxx ---- S4.5.e.verif18 Verification of Pre-Encrypted Ballots - Verification 18 (Correctness of encryptions for uncast pre-encrypted ballots)

\EGverifBallot{\veriftitlePreEncryptedValidationUncast}{\label{verif:PreEncryptedValidationUncast}
\veriftextPreEncryptedValidationUncast}

% xreqj {
  "section": "S4.5.e.verif18",
  "text": "TODO: Verification 18",
  "sc": "" }

% xxxx NplCiQY5VUFya5VeoOBdBAFQq7f4QBxSZKA8z/Vizwnt4VdrUJ9ghxCTw1a1wQU2sFKjRvabHp5k
% xxxx 54P8yt0MHbrBUZ54qsEsunxIsfsZmJtaLm7Gb9RGJMlWy0WQ/ep9HNH3UIyOpwYe1H+Rd6X8k3yZ
% xxxx MLRE9h85iEG22XFhAFx4akIHouVUU8drKIEg48a/dnawpNHsOfDsAdfXikBu024Pe4do2mLoKbOt
% xxxx anIiZWDzsnapoVpMnMXHp+w/QUdIEgUVsKo3x5z6rKWEsJeYp9RMxRhjtPEOfLafWg7q8fbazogE
% xxxx Wj3fG44XntyYRcf/gYUx3l3dW+lpLlCAKm4u8Zyuo6wQWh1QxjavZpfkk4CpA2yUV4zEEf42mCgc
% xxxx DDS8Ah1JUgcn3LwpiXzs8NFDDy+60SnD0Zf1DIEpwYDNkR6dyWiMGhM0dAN1WQOdWs6HmnqJMfZC
% xxxx mZ/8TjHW+ys5XZZRx/SKDSLwNB55ZxTSUed9H0BpIrfaDmEmB32QtQVo/ldnSOguaWfO192YsSNV
% xxxx Bd3nKHK2loeQu6/H1Ee2hsSnWygM9hxrYmMvqxqg3C+0tM282GgJ0pOuBTIshEoAKvRXVyEx+fth
% xxxx dtDHN41jU/gOhNtdAawz7vO7oYTq+5ekqOylrLvKk+5KLCVrDc3ekluG8lhfxR3M2OE4tASk7c+Y
% xxxx qcwJcYkQE8gHvQRfvGM7wJ/WMyzpE2dLVk0SVYxF64y05FbyqhgGy9ctxmqWNfRKnsHMwRT3CeRZ
% xxxx
% xxxx
% xxxx ---- S4.5.f.verif19 Verification of Pre-Encrypted Ballots - Verification 19 (Validation of content of uncast pre-encrypted ballots)

\EGverifBallot{\veriftitlePreEncryptedValidationOfContentOfUncast}{\label{verif:PreEncryptedValidationOfContentUncast}
\veriftextPreEncryptedValidationOfContentOfUncast}

% xreqj {
  "section": "S4.5.f.verif19",
  "text": "TODO: Verification 19",
  "sc": "" }



\pagebreak

% xpage 68 ---------------------------------- page 68 ----------------------------------------------

% xxxx C/eUiBaWgFcCJQRPr8Cd4w1bFmUgHog8EzUQ+zuYMBQcK/q82sZvQtlvP0RUXlGlU4beM066P6eb
% xxxx xeMb7qID1yHuT/OfJSDS9K9I08WhCC/cprRXdVk768TTBTaxWXo5g7FX3qzh6R4YIT4W5mRiTL+r
% xxxx b23eN37NTaRCX2GeQow3s98h+bROZUhm/6Qiyqe6Ea1TFQMxfvTIIKaAPJ1szZdCRbV8R/vCD+K0
% xxxx RO29WTIM4JuypoaDKtcOB7eyIWwfUaz711KIIuLaWaMuwzFk2ivPUtE6pIK40IiK+hqQ/trc/qCf
% xxxx w37/SrZmqP3mHnyz+os6CweByg5DYMRKX2VkIMr6xomFdkmdNfI49DgvsUdeczZTCn7Y1HUplaN+
% xxxx k4DTPtGB4kFIRFWZ3qDbwUAmIXC5l7HnlSJly5+vjnCE0F7DNrgvgYSuxauDvRwHv1ELM+CUWTdV
% xxxx Vi5x6PeH6a5J4ml/QqMsb1qmn+UCQab8C9Deq+a8tIueLYCcvVWA7pa75lVi+7nYvGXqkWRHCR3H
% xxxx Wm7le5w+UuUt/nHcmlj9mJORvReIOQYCjOVLGB4suNBbWpb9MVMUsqYaR2E15IGuHWnp432WJjFy
% xxxx lHbrWcu/QCS8FaVxq2yukZ9QbUW9dRDxIuCTmk4VEhGOQBZTQIQOPCTwwtrpQx0mU3IB0mbG6al8
% xxxx 6Gm/NSXZ7GmoIJ3SCdYG2fta4VOmUE0X4rDfiQE2hxGdMG3LYiCHj8+NYl2hLpYric4Neb1CINlW
% xxxx
% xxxx
% xxxx ---- S4.6 Hash-Trimming Functions

\subsection{Hash-Trimming Functions}
To allow vendors and jurisdictions to present distinct formats to their voters, the details of the hash-trimming function that produces short codes from full-sized hashes are not explicitly provided.  However, to facilitate verification, a variety of possible hash-trimming functions are pre-specified here.

\begin{itemize}
\item \hbox to 3in{\bf Two Hex Characters\hfil} $\Omega_1(x)=$ final byte of $x$ expressed as two hexadecimal characters.
\item \hbox to 3in{\bf Four Hex Characters\hfil} $\Omega_2(x)=$ final two bytes of $x$ expressed as four hexadecimal characters.
\item \hbox to 3in{\bf Letter-Digit\hfil} $\Omega_3(x)=$ final byte of $x$ expressed as a letter followed by a digit with $\{0,1,\ldots,255\}$ mapping to $\{A0,A1,...,A9,B0,B1,...B9,...,Z0,Z1,...,Z5\}$.
\item \hbox to 3in{\bf Digit-Letter\hfil} $\Omega_4(x)=$ final byte of $x$ expressed as a digit followed by a letter with $\{0,1,\ldots,255\}$ mapping to $\{0A,0B,...,0Z,1A,1B,...1Z,...,9A,9B,...,9V\}$.
\item \hbox to 3in{\bf Number: 0-255\hfil} $\Omega_5(x)=$ final byte of $x$ expressed as a number with $\{0,1,\ldots,255\}$ mapping to $\{0,1,\ldots,255\}$ using the identity function.
\item \hbox to 3in{\bf Number: 1-256\hfil} $\Omega_6(x)=$ final byte of $x$ expressed as a number with $\{0,1,\ldots,255\}$ mapping to $\{1,2,\ldots,256\}$ by adding 1.
\item \hbox to 3in{\bf Number: 100-355\hfil} $\Omega_7(x)=$ final byte of $x$ expressed as a number with $\{0,1,\ldots,255\}$ mapping to $\{100,101,\ldots,355\}$ by adding 100.
\item \hbox to 3in{\bf Number: 101-356\hfil} $\Omega_8(x)=$ final byte of $x$ expressed as a number with $\{0,1,\ldots,255\}$ mapping to $\{101,102,\ldots,356\}$ by adding 101.
\end{itemize}

% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Two Hex Characters` hash-trimming function `Ω_1`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Four Hex Characters` hash-trimming function `Ω_2`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Letter-Digit` hash-trimming function `Ω_3`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Digit-Letter` hash-trimming function `Ω_4`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Number: 0-255` hash-trimming function `Ω_5`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Number: 1-256` hash-trimming function `Ω_6`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Number: 100-355` hash-trimming function `Ω_7`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows the ElectionManifest to specify the use of the `Number: 101-356` hash-trimming function `Ω_8`.",
  "sc": "ics" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS ElectionManifest PreencryptedBallots feature allows to specify the use of and the complete configuration for an API-user-supplied hash-trimming function.",
  "sc": "ics" }

% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Two Hex Characters` hash-trimming function `Ω_1`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Four Hex Characters` hash-trimming function `Ω_2`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Letter-Digit` hash-trimming function `Ω_3`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Digit-Letter` hash-trimming function `Ω_4`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Number: 0-255` hash-trimming function `Ω_5`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Number: 1-256` hash-trimming function `Ω_6`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Number: 100-355` hash-trimming function `Ω_7`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can produce short codes using the `Number: 101-356` hash-trimming function `Ω_8`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows an API user to provide a custom hash-trimming function for producing short codes.",
  "sc": "nyi" }

% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Two Hex Characters` hash-trimming function `Ω_1`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Four Hex Characters` hash-trimming function `Ω_2`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Letter-Digit` hash-trimming function `Ω_3`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Digit-Letter` hash-trimming function `Ω_4`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Number: 0-255` hash-trimming function `Ω_5`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Number: 1-256` hash-trimming function `Ω_6`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Number: 100-355` hash-trimming function `Ω_7`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature can consume short codes using the `Number: 101-356` hash-trimming function `Ω_8`.",
  "sc": "nyi" }
% xreqj {
  "section": "S4.6",
  "text": "EGRS PreencryptedBallots feature allows an API user to provide a custom hash-trimming function for consuming short codes.",
  "sc": "nyi" }

\pagebreak

% xpage ---------------------------------------- pg. 69 -----------------------------------------

% xxxx 9pIHJ2sPudjH3TBWqgp0bqKwGVdxzKk+aRAgEU0V+gNDapEt5eoXPQGDEHj3OF2tQeXtl+eSOpS1
% xxxx 2g2AtxEy8Fu4xtmcyPll6jp2BJmZUCkVnYuyk4I4LYeZZ8VpMW0e1S3Xo4jX2Ga8XB175LSoAx15
% xxxx AoIH90SPa0lTD1kj7yd2OdwyFeJ9lZR+fHiF7UrwoL+5pxbamCGlMWlCzvgszizd5mc7q+PTlA3O
% xxxx pmcWLKLU78NmjGqIS/qqI5mJocNOZnRJLUeuUfSUdjOXc458SqFCzLsjeaRQCnpuWCN660uW1IcU
% xxxx Ln0MP16A7n5e5JyjDBTwUaGJ9Vwv/NTdDsLf12AUuIOzp1jQicqnkNzWLFNxeHmPXFhLbploLpK/
% xxxx our6U3pJdVp/YgcMZyZDcrZsrtejctnqWsOdMoRZeK4rJDElTD7oSqBkmt0ugMY7mpxHif6smETt
% xxxx q+Ff1kE5M2cQAd9fvii8VgnxmH/4eWpMzZxvb627IprSIB4LVnkOferEqL9dVZLuAa2gEC/dIT+L
% xxxx WgH89ihb8KFf5q3ZEmRsTO1y1unKXbUTXBkJn8dXyKsyx7Q5/CViAnJ2l2nuT/inbdJ4LY6ySvhl
% xxxx k2wt3NPwxYGm09z4WBHaRe87q03o4aTDpRm/VRZKMfNfoTJ71E6a+Y3T4YcvyelWVhXMcJefuf3J
% xxxx WZrI00ZiDr01S/d9UzxDz6Or2olmHCbw+gg8kxRrJLl2PBwDcYCWvfXSgQvgFWXcu3abvJyhXVB6
% xxxx
% xxxx ---- S5 Hash Computation

\section{Hash Computation}\label{sec:hashing}
The function $H$ that is used throughout \EG is instantiated based on the hashed message authentication code \HMAC. This section defines how to evaluate $H$. It first defines how inputs are represented as byte arrays and then how these inputs are used to compute hash values.

% xreqj {
  "section": "S5",
  "text": "EGRI uses `HMAC` as the basis for the function `H`.",
  "sc": "utsp",
  "utsp": "" }

% xxxx MGeHTlm7VZ1HSZk9+w4viKjEsRsq2WrFBS02YOT5cWVXRoqb7Czts1PXd7rPGT5dIfTvhpWXgg9X
% xxxx 4tnWPN9fm1zc+KYc/IhhBFe2UcH8EAl8GeVDoJBK6JtjJNn+BnBTt3tk54c/ciDSRlRAvm6xOYq9
% xxxx G4SlDsau8CGdF0KJhJbDCOpWdNnYjvbIxbevFjYmDfNw/FTml3u+tRu/S/j0JgxGYmi7DN9RUiyn
% xxxx fSNm0vnhKYF4P7FxrjLNqY7FMXSJ7EZ2o15uXMjJcM68VBtCFblbkxF4N7ziV6P2TacnceeFaUpj
% xxxx dNFbPW2+sn4zTdDZ01276tcYzJ44dN/RVetoDhBih4eZMZg4ywaz+iTK5cpcsWuX57liSnZOX7VS
% xxxx cSzTcs6WAjhHQLlKmG4v3FFJBSIAUVHK5VsGZodi9UYTXfC1MgYweYtOQFvmPXLTjKZ/6arW7VOR
% xxxx 61AfnbWger8Ox9FGtX0EbIA8CrWPFOvetnWBl65+xB/qHvC8dqbfHd8R56gGuyQtUTqDOOniQdg7
% xxxx QLB/d46I3HNCnv2I03ebuIz2iQFB45OrG+7Rq4JSm14KGlxmMWOOxB3cPlvtmvlKJyxtMHi4DSYd
% xxxx 77wC1twJnE9T4TXYH9++jAeJ8D7MkyqmwdY2YMASFRityPXweUSNz3YgeXMdI+ISJYwdmhUM7Ff5
% xxxx EuDEIb0pXMoKqetPu5MYHl1927RJiP1r4HrpYATs1WhUCJ0n67uKUq5LW1E51QApN5xTqdiwCFyy
% xxxx
% xxxx
% xxxx ---- S5.1 Input Data Representation

\subsection{Input Data Representation}\label{sec:hashinputdata}

All inputs to the function $H$ are byte arrays. A \emph{byte} is a non-negative integer less than $2^8$, i.e., an integer in the set $\Bcal = \{0,1,\dots,255\}$. Its binary form consists of at most $8$ bits. Its hexadecimal form consists of at most two hexadecimal characters. Here, the leading 0 characters are written out such that a byte always has exactly two hexadecimal characters.  Therefore, $\Bcal$ is represented as $\{\mathtt{0x00}, \mathtt{0x01}, \mathtt{0x02},\dots \mathtt{0xFE}, \mathtt{0xFF}\}$.

A \emph{byte array} $\mathrm{B}$ of length $m$ is an array of $m$ bytes $\mathrm{b}_0, \mathrm{b}_1, \dots, \mathrm{b}_m \in \Bcal$. It is represented by the concatenation\footnote{The symbol $\parallel$ simply denotes concatenation and does not mean that this symbol is inserted as a separator into the array in any way.} of the byte values as $\mathrm{B} = \mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_m$. A byte array of length $m$ consists of $8m$ bits. For $0 \leq i < 8m$, the $i$-th bit of the byte array $\mathrm{B}$ is the $(i \bmod 8)$-th bit of the byte $\mathrm{b}_{\lfloor i/8 \rfloor}$.\footnote{Here, $\lfloor\cdot\rfloor$ denotes the floor function, which means that the result is obtained by rounding down. For a real number $x$, $\lfloor x \rfloor$ is the largest integer that is not larger than $x$.} The set of all byte arrays of length exactly $m$ is denoted by $\Bcal^m$ and the set of all byte arrays of any finite length is denoted by $\Bcal^*$.

Any byte array $\mathrm{B}$ of length $m$ represents a non-negative (i.e., unsigned) integer less than $2^{8m}$ by interpreting the bytes of $\mathrm{B}$ as the digits of the representation in base $2^8$ with the most significant bytes to the left, i.e., in big endian format. For example, the byte array $\mathrm{B} = \mathtt{0x1F}\parallel \mathtt{0xFF}$ of length $2$ represents the integer $\mathtt{0x1FFF}$ in hexadecimal form, which corresponds to the integer $2^{13}-1 = 8191$. In general, let $\mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{m-1}$ be a byte array of length $m$, the integer

% xxxx ---- eq. 122

\begin{equation}
  \mathrm{b}_0\cdot 2^{(m-1)\cdot 8} + \mathrm{b}_1\cdot 2^{(m-2)\cdot 8} + \dots + \mathrm{b}_{m-1}
\end{equation}
is a non-negative integer less than $2^{8m}$. Vice versa, if $0\leq a < 2^{8m}$, then the byte array of length $m$ representing $a$ is given as

% xxxx ---- eq. 123

\begin{equation}
  \bytes(a, m) = \mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{m-1},\mbox{ where } \mathrm{b}_i = \lfloor a/ 2^{8(m-1-i)} \rfloor \bmod 2^8.
\end{equation}
In this document and if not specified otherwise, a byte array and big endian non-negative integers are used synonymously. However, byte arrays representing integer data types have a fixed length and must be padded with $\mathtt{0x00}$ bytes to the left. The byte array $\mathtt{0x00}\parallel\mathtt{0x1F}\parallel \mathtt{0xFF}$ represents the same integer as $\mathrm{B} = \mathtt{0x1FFF}$, but has length $3$ instead of $2$. For the integer data types used in \EG, this is laid out in detail in the following sections.

% xreqj {
  "section": "S5.1",
  "text": "EGRI converts between nonegative integers and fixed-size byte arrays using the big endian convention as specified in EG DS v2.1.0 eq. 122 - 123.",
  "sc": "utsp",
  "utsp": "" }

% xxxx C1xIWL6xdqvIKBlCC3y14Nh2ajUABXp14cVhFtNfDRvvFf1ulKoloF+p9exLTLsw4GdCa4JgRMIO
% xxxx /fL2VPBqXgMzEaHIflJ7IQO7zxGmKjk6sIZpQThg6R0VpXa/S1q++tX7qaXN0ylZJSTWekbMdD8g
% xxxx oaC9rWSjL9k4Ak80dpXV72R9/5tPdSruH0xvZ+8vSy6a/6qGf13ozlNS8wwvQ2dxxOMfvblX/qhh
% xxxx JWfh1ZH3MGR6Kq9Ss0Qwcgzj4eOaWUfY/ULFeYAUjMa/mUCWvFiZch9+DiCZzKrSrJxo6hKgSiv1
% xxxx 4vl9deLwlRks89cNALwLa4uaFAIImt7t8vVo0zAcnI/cJcQRRQ1HFbOyX4RkxfikXXXKCBqUvjrE
% xxxx zcgdskSCCRTymC2pvPsYJkLrRGsP3PAHmAmsJphz6C76xN82jdxiZ79dlU8iSNI5ELB5mWT2Vp2R
% xxxx m+L0hHRRBskS4yIaGau8VKopoIFPVINtl3cPmFwMUT41o5lhE7jCiaC3SXzOzGD0NMNAbTSWAJJH
% xxxx S68pMYsGKBXDRYFb19bovOeBaBK5Mf/xz0B+RNCaetxJ+Er4VAPVRtr4zwxSNfBV9FScp0ZS25jp
% xxxx v1KdFmZJChPR72fwJbjrm/wHuXuEm1U6UsG4+9F7dKgLnfaP/dCNK8IzlPBpual8IaXTibhpayMx
% xxxx 6MHALWzDqxuJFQx7/e97PaQb0Hps+0Bcn6Pk0odLSy8lgRbwrF4IvdIrSlo8wpcBkY7fZL/slryv
% xxxx
% xxxx
% xxxx ---- S5.1.1 Integers Modulo the Large Prime \texorpdfstring{$p$}{p}

\subsubsection{Integers Modulo the Large Prime \texorpdfstring{$p$}{p}}
Most inputs to $H$ like public keys, vote encryptions and commitments for NIZK proofs consist of big integers modulo the large prime $p$, i.e., integers in the set $\Z_p = \{0,1,\dots, p-1\}$. Any such element is represented in big endian format by a fixed size byte array of length exactly $l_p$, the length

% xpage ---------------------------------------- pg. 70 -----------------------------------------

of the byte array representing $p$. If $p$ has 4096 bits like the prime given in the standard parameters in Section~\ref{sec:parameters}, this length is exactly 512. The conversion from an integer to a byte array works explicitly as follows. For $a \in \Z_p$, the byte array $\bytes(a, l_p)$ of length $l_p$ representing $a$ is defined as

% xxxx ---- eq. 124

\begin{equation}
  \bytes(a, l_p)  = \mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{l_p-1},
\end{equation}
where

% xxxx ---- eq. 125

\begin{equation}
  \mathrm{b}_{i} = \lfloor a/ 2^{8(l_p-1-i)} \rfloor \bmod 2^8 \in \Bcal \mbox{ for }  i \in \{0, 1, \dots, l_p-1\}.
\end{equation}
The bytes $\mathrm{b}_i$ are the coefficients of $a$ when it is written in base $2^8$, i.e.,

% xxxx ---- eq. 126

\begin{equation}
a = \sum_{i=0}^{l_p-1} \mathrm{b}_{i} 2^{8(l_p-1-i)} = \mathrm{b}_0\cdot 2^{(l_p-1)\cdot 8} + \mathrm{b}_1\cdot 2^{(l_p-2)\cdot 8} + \dots + \mathrm{b}_{l_p-1}.
\end{equation}
Any byte array $\bytes(a, l_p)$ that represents an integer $a$ modulo $p$ always has length $l_p$.
%
This means that, for the standard parameters, where $l_p = 512$, we have $\bytes(a, 512) = \mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{511}$, where

% xxxx ---- eq. 126.b

\begin{equation*}
  \mathrm{b}_{i} = \lfloor a/ 2^{8(511-i)} \rfloor \bmod 2^8 \in \Bcal \mbox{ for } i \in \{0, 1, \dots, 511\}.
\end{equation*}
For example, $\bytes(0, 512) = \mathtt{0x0000\dots 000000000000}$ is a byte array of 512 \texttt{0x00}-bytes, $\bytes(15, 512) = \mathtt{0x0000\dots 00000000000F}$, $\bytes(8572345, 512)= \texttt{0x0000\dots 00000082CDB9}$, and $\bytes(p-1, 512)$ is the array shown in Section~\ref{sec:parameters} for $p$, but ending with \texttt{\dots FFFFFFFFFFFFFE}.

% xreqj {
  "section": "S5.1.1",
  "text": "EGRI converts between nonegative integers mod `p` and fixed-size byte arrays using the big endian convention as specified in EG DS v2.1.0 eq. 124 - 126.b.",
  "sc": "utsp",
  "utsp": "" }

% xxxx 81iMuwo6EMRGwOBgDuTvHKIQcojTcBLMPzusRYVHZ9mrxWdOHtiSicU8Nj6yZ7qsM7Suw8pT+Z6P
% xxxx tuwN8XqD5EGMErnDELt1gV4qYLlSH18YLrUtNLj1+fLI0l3LCPF7lYEJVAAe6G5gwKI2NeDGkkPy
% xxxx kZi+ZX2QaDNw3qMOwu+y+gJRYVcDIPHYqD2w7o+2+YdCefDvq+I2Zy2wVsvjW3w5pD0/S1U9gNNM
% xxxx HKEfhiMt0e2y8cihHlTdsJJ+KNmxK1o9yMkAx7CYtKs4P/yCYajmQOUybXvKh8Gly/4fIkJ0FL09
% xxxx 6BG5wA7mbv2greuT+hS5O1s3Fw81datZwcT+HGnjfY71d0vAxCXYLFC/ndjkpV+dBEDEAk0a8s3f
% xxxx 2uHQXlcX/8mEAGu4koOY8FfToEnStpQQiKXlfA2HBVqrQMAcTtEGFoUwzSj4niw3yzSQx59q4mGx
% xxxx sUgcRW6eMyBUaGHSpG2aoAw9aQkww24t0obOCHyFNQeSqTdUBgtbTTDk8E6XIzdnhgJtblukk28d
% xxxx 6WMrQIn2sqEBATCP5Z2zs2BlQ4DauM+PuJKySismkOrMySNtSr0TuGaWXNm52N14dh5XjHOcTlcm
% xxxx 25Yp73UTTVfqD/cvQRXD0pzp944GFn3ZEWFeil7zY2w0H7wPQrDS+IC7XW96e2B58SrZXFelGO6o
% xxxx QWXIVU5W6X3ZjYPQqm8r8CVdBRCQhEi/Gg77pu/yO19vPlCY8UW4XbwFbIkQLNSLNibmf+/qsNBp
% xxxx
% xxxx
% xxxx ---- S5.1.2 Integers Modulo the Small Prime \texorpdfstring{$q$}{q}

\subsubsection{Integers Modulo the Small Prime \texorpdfstring{$q$}{q}}\label{sec:intmodq}
Other inputs are integers modulo the smaller prime $q$, such as response values in NIZK proofs and encryption nonces. They are integers in the set $\Z_q = \{0,1,\dots,q-1\}$ and are represented by a fixed size byte array of length exactly $l_q$ in big endian format. For the standard parameters, $l_q=32$. The conversion from integer to byte array works as above. If $a\in \Z_q$, the byte array $\bytes(a,32)$ representing $a$ is defined as

% xxxx ---- eq. 127

\begin{equation}
  \bytes(a,32) = \mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{31},
\end{equation}
where

% xxxx ---- eq. 128

\begin{equation}
  \mathrm{b}_{i} = \lfloor a/ 2^{8(31-i)} \rfloor \bmod 2^8 \in \Bcal \mbox{ for } i \in \{0, 1, \dots, 31\}.
\end{equation}
Again, the bytes are coefficients of $a$ in its $2^8$-adic form, namely

% xxxx ---- eq. 129

\begin{equation}
  a = \sum_{i=0}^{31} \mathrm{b}_{i} 2^{8(31-i)} = \mathrm{b}_0\cdot 2^{31\cdot 8} + \mathrm{b}_1\cdot 2^{30\cdot 8} + \dots + \mathrm{b}_{31}.
\end{equation}
All byte arrays that represent integers modulo q have length 32. For example,
\begin{align*}
  \bytes(0,32) & = \mathtt{0x0000000000000000000000000000000000000000000000000000000000000000},\\
  \bytes(16,32) & = \mathtt{0x0000000000000000000000000000000000000000000000000000000000000010},\\
  \bytes(q-1,32) & = \mathtt{0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF42}.
\end{align*}

% xreqj {
  "section": "S5.1.2",
  "text": "EGRI converts between nonegative integers mod `q` and fixed-size byte arrays using the big endian convention as specified in EG DS v2.1.0 eq. 127 - 129.",
  "sc": "utsp",
  "utsp": "" }

% xxxx IP6KACJbGzTEOQvIprwWFwYvsafptEzaGIUm/6pfscsXqQeKXB0Ebw87VLb3cSv7p5MmsGSFZUxr
% xxxx sv4hHLKCMZ+W2CUAwrRmorU6ccoSMH955T1Lv1yDooJDSdSkNZC9d4OjfTSPdTYXR3Z0NrmFSYPc
% xxxx NqO/10pI/q3+Uv7meMty2MbWJOXCO2kEkAhCEdt1wbwSG+TotdsKuQ4SAfPLdDN2HCM7rR8YFdRb
% xxxx rlDywlQLaZrE7/jLaskOCjrBXWr8s2GXKSVPdEjIggX+3Kjfkzs4ymiiSJR+Ii9/dxtGgqIJFspu
% xxxx 2edHxMXJLp4txlcjYAU/AncOk6NivEJVPX4G78L076fxyGunnxfbQc07/xgXGV2ebfi2R75V8c5Y
% xxxx 50Ho1ANbx2R3CNFQGl70467UU6HInMNNhKRxWSom+HdVIgp+elVUoJB+NWRzKm+3zuUcXmbvVyfo
% xxxx MPjDeup/4bxK2lWiLo6VbwEIORV9ih2PtPBEpxfDBDVqnkANpRHyJVVUumN8pQduKsWiNRys+WLd
% xxxx BF85GbBrJxAHwrQdYuUFyTj4kDY9HT8fCc2vxMkx1OphhesM7iL1AnnBuvy5mC7f9xVc1Fz8LJSB
% xxxx /BRYNyDl8tNXGWFLO+qpxoRfvYJYo51xJe+ot2CRg1XT7bKN/HZMOSRjGsZPyM+7H+JgFZrqbHy1
% xxxx 0uFkdzzXEe+xDINbLT3YlNxbOOQ73m9L+Bfrr0YLg5l/zdR0qW+ainUB5Lu9a54edX21LHObbLCB

% xpage ---------------------------------------- pg. 71 -----------------------------------------

% xxxx
% xxxx
% xxxx ---- S5.1.3 Small Integers

\subsubsection{Small Integers}
Other integers such as \emph{indices} are much smaller and are encoded as fixed length byte arrays in big endian format in the same way, but have much smaller lengths. In \EG, all such small integers are assumed to be smaller than $2^{31}$. They can therefore be encoded with $4$ bytes, i.e., with $32$ bits and the most significant bit set to $0$.\footnote{Setting the most significant bit to $0$ is done in consideration of languages and runtimes that do not have full support for unsigned integers.}

The number of guardians $n$ and the quorum threshold value $k$ are examples of such small integers that require even less than 4 bytes for all reasonable use cases, i.e., they are represented as $\bytes(n, 4)$ and $\bytes(k, 4)$. For example, $\bytes(5,4) = \mathtt{0x00000005}$ and $\bytes(3,4) = \mathtt{0x00000003}$.

% xreqj {
  "section": "S5.1.3",
  "text": "EGRI converts between nonnegative integers less than 2^31 and 4-byte fixed-size arrays using the big endian convention.",
  "sc": "utsp",
  "utsp": "" }

% xxxx jKXWbK3Z1i8C2trFfnhW+qWyiVuIjnABALTPk96GyT0KolQhbiI7KtJbWqBtX2r3BDB3kYQ7ogaj
% xxxx 2fy6Eq9s24me2N9B9ihi+HNl5HInxU8wOio0aGKsFfaacKw8D+Kcoj8dzzNttnKa0nslZWFcIkmr
% xxxx /99cnNXnVrA7ovGJ5x1wFnKFoUrZ9h5jdGl+9f6RAOvA9I+HFUHwU0+wOHu1BHPKeFP3Sd3mzJ00
% xxxx tE01rdNd74uQRToY7Uuk9FfzPpk2CRIIYtHkDAeuUhV2DxH6CiExaMrH9L+OWPgQKyE1urFnxAHT
% xxxx hXmXFiIDuyhBGsum+GO7VPo9ul/JbNguMsxz40uYkpXBAGNxhk+Hk8RRIcAZzAsu/FP9yv31iFqG
% xxxx U2xACW8xlCa/rmQVJxxN2DZssGJxl3Dxdou91UnH1ldTUJA0LD4UIq8P5RbEzOU0gFn8WEDfVQ1y
% xxxx kNGwHqmItFdTkT3RHVJYwcaeOduWjvAVASvNbKLO/pKrWYMng7cyofUXCIDeWkX90JnmWGP12BoQ
% xxxx qT4SYHzyZ4eZqaYlavyVLOquqCqwsLGPkFMOPjCXuaftmK0BK5XLNC9OHssdAaRW7zv9dj/CJOf6
% xxxx mJBR0ip+Dh6MX7fg5WqD4xpqOYUS4XriYXiNBqYZzovKAX92cH2kPQTiIPFUEZWiRin0ORJnWChK
% xxxx yE7PC31O6UyS1YkqznaWDLzNZ81pJvtf5U4/7Y0DB3SNxe1zNNxETaznL1ZTMkcrl8e+dwyf6V/x
% xxxx
% xxxx
% xxxx ---- S5.1.4 Strings

\subsubsection{Strings}\label{sec:stringencoding}
When an input to the function $H$ is a string $s$, it is encoded as a byte array $\bytes(s, \len(s))$ using UTF-8 encoding. Here, $\len(s)$ is the length of the UTF-8 encoding of the string $s$ in bytes. For example, the string ``ElectionGuard" is encoded as $\bytes(\mathrm{``ElectionGuard"}, 13) = \mathtt{0x456C656374696F6E4775617264}$.
Some string inputs may be of variable length that cannot be specified in advance by this document. Such inputs to the \EG hash function $H$ start with a $4$-byte encoding in big endian format of the byte length of the string encoding followed by the encoding itself.\footnote{The maximal length of strings that can be encoded for input to $H$ is therefore $2^{31}-1$ bytes.}

% xreqj {
  "section": "S5.1.4",
  "text": "EGRI hashes fixed-length strings as their minimal UTF-8 encoding.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S5.1.4",
  "text": "EGRI hashes varible-length strings as their minimal UTF-8 encoding prefixed by their length in bytes as a sequence of 4 bytes using big endian convention.",
  "sc": "utsp",
  "utsp": "" }

% xxxx WDaaTn3ObUVqwLNryii9fyiRDS9rqOi5iy3pykcZtrQ+0e+xlI0zWOediDbC3KXwxNYBtyuJWeG+
% xxxx 8G5IQl7zhN00p3FKfdf1DIxSVWaT9PQX91coEdY15N9D7lZyZHpdn3xIhQ1vUxCvzVSbMRPqY1Xe
% xxxx 4kvgH64JRAdWmb7LXc2gFvgoOKNhuBlfv02x/T+7ujC71TEvu4ViW7t8lDcUuv3Glm8WBlp3mgSh
% xxxx BSS7Odj4ywT3fTPBxy/e26E06/KAFZxRLax2Qcb3GA0fbksRYE2MsCSWvZbOHstBLU67nSBtpBL9
% xxxx nV5atE8xU85Jc5OTYK1GHXH6arY8cbxuQgYKMf34txQDUIcER+95QsuEx4y7cJzUzpC9jqgYc0XW
% xxxx NNmzU9EiuU27ZS/3KZDRYS6p1NQT1fQw73cgYRa0rp5WeZPq9cxzrg6Wm57cjMMM+1rRw9sO7cRn
% xxxx GGuD9osTKOLhBR8jmh68MZSagss8iGcw06qQqmQ0MQZ9tPTncrM9QX0cBDFivzM4uRnIC3mNsRRz
% xxxx pcGmSH64Zy/J67ZWyvPDk3DB7MW1ts+ovtX2VBG0Yrm8K7atNordUMNMshbSvTnGG5S+X8uaA61r
% xxxx wezFnf5wHLQIjRRj2SfFijkVCGx5w+Ips0EAv26mCXM/Gl49VTjYDBZdIuJFk1bhjVpGcgbM/Bu7
% xxxx XZy3r+2jwnCkYRivZhlhJfSqredg90k3GphAmDVLyL/L1MljNLzzvI0n09wKNSLkuFOSYN5hMMRe
% xxxx
% xxxx
% xxxx ---- S5.1.5 Files

\subsubsection{Files}
When an input to the function $H$ is a file \texttt{file}, it is parsed as input entirely, meaning that all bytes of the file are parsed to $H$ as a byte array $\bytes(\mathtt{file}, \len(\mathtt{file}))$ that is a concatenation of all the bytes of the file in order. File lengths are not specified in this document and file inputs to $H$ must start with a $4$-byte encoding\footnote{Input files to $H$ are restricted to a length of $2^{31}-1$ bytes.} in big endian format of the file byte length $\len(\mathtt{file})$ followed by the file bytes, i.e., $\bytes(\len(\mathtt{file}), 4)\parallel \bytes(\mathtt{file}, \len(\mathtt{file}))$. An example of this use case in \EG is the computation of the base hash $\HH_B$ from the \texttt{manifest} file.

% xreqj {
  "section": "S5.1.5",
  "text": "EGRI can read and write files as contiguous sequences of bytes.",
  "sc": "nfd",
  "status_note": "" }
% xreqj {
  "section": "S5.1.5",
  "text": "EGRI encodes byte lengths as 4-byte big-endian values.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S5.1.5",
  "text": "EGRI accepts byte lengths less than `2^31`.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S5.1.5",
  "text": "EGRI does not produce byte lengths greater than `2^31 - 1`.",
  "sc": "utsp",
  "utsp": "" }

% xxxx MkwVJeV8J5KQQgTjlIMKitUblIJt7PmmD7fFgQylyhrwQBC454yzRFhg7ILC1hVdSeMbnmBg0J30
% xxxx nz6SKSMkks/g1QtlsTBawLGShz80Hkzh7+rxNt3MQ78GMgdYails404x/Y5r2pTJLn7R+XlSQbj5
% xxxx O1C0pjFesO+0GDoJFPKkN4FgihKSLcygSiLDTBiqvV4z9eyfsXsGcZW4qNfMvYVEbp0/NVg/YhUv
% xxxx FG5o6vsoJ0bXU2yDFnK8BVoBBdnB++eImksLtrn1Lmp67aRm72D0fv0iCtasrzFYBpAtJO2nj6DU
% xxxx bkbWauncHRFA7XqVGcRwH4F1r7gAfTMZ4Sq3W38SNyZf68M+TKDzkjCsNeKOzHbehHhAnJcR8XzH
% xxxx 7uTj8SbTVmHcqrZlQ3ZPhCQl0qvwwnHqFyeL0g1Bzm6WfhZ57kVVnXX1QHYf5VCK5C/T8+bk22U+
% xxxx LcJEp77Xo8XGg2MuycjfIl/gzAcK2iI33Rd+vAu6ZLf/qoRFtB8Y/EJqogc97QnO6I2MBYNH/v8J
% xxxx EPd4p6R2xplIaFbplvPxR7lMpXRXAHNDqY+xZHvMCPvuZuC3WiuyP8NMkq79HvZq97U9BETyctx3
% xxxx 61WzZooH5iHF/dG7W93xLYMwfZ8Qde1/Vlu9pCz3d+xbVjExS0tAkY9YxQGaxjsNcYxp9lK81J9d
% xxxx 1Bp3deVVTEGpk+sGxELD5PS04O8+2IewLYKaeeRsOBOkxRiqVzIe3DsQ7tCZUwbG/1Yn4U9SdfkW
% xxxx
% xxxx
% xxxx ---- S5.2 Hash Function

\subsection{Hash Function}
The hash function $H$ used in \EG is \HMAC-\SHA, i.e., \HMAC\footnote{NIST (2008) The Keyed-Hash Message Authentication Code (HMAC). In: FIPS 198-1. \url{https://csrc.nist.gov/publications/detail/fips/198/1/final}} instantiated with \SHA\footnote{NIST (2015) Secure Hash Standard (SHS). In: FIPS 180-4. \url{https://csrc.nist.gov/publications/detail/fips/180/4/final}}. Therefore, $H$ takes two byte arrays as inputs.

The first input corresponds to the key in \HMAC. The \HMACSHA specification allows arbitrarily long keys, but preprocesses the key to make it exactly 64 bytes (512 bits) long, which is the block size for the input to the \SHA hash function. If the given key is smaller, \HMACSHA pads it with \texttt{0x00} bytes at the end, if it is longer, \HMACSHA hashes it first with \SHA

% xpage ---------------------------------------- pg. 72 -----------------------------------------

and then pads it to 64 bytes. In \EG, all inputs that are used as the \HMAC key, i.e., all inputs to the first argument of $H$, have a fixed length of exactly 32 bytes.

The second input can have arbitrary length and is only restricted by the maximal input length for \SHA and \HMAC. Hence we view the function $H$ formally as follows (understanding that \HMAC implementations pad the $32$-byte keys to exactly $64$ bytes by appending $32$ $\mathtt{0x00}$ bytes):

% xxxx ---- eq. 130

\begin{equation}
  H: \Bcal^{32}\times \Bcal^* \rightarrow \Bcal^{32},\ (\mathrm{B}_0, \mathrm{B}_1) \mapsto \HMACSHA(\mathrm{B}_0,\mathrm{B}_1).
\end{equation}

\EG uses \HMAC not as a keyed hash function with a secret key or a message authentication code, but instead uses it as a general purpose hash function to implement a random oracle.\footnote{Dodis Y., Ristenpart T., Steinberger J., Tessaro S. (2012) \emph{To Hash or Not to Hash Again? (In)differentiability Results for $H^2$ and \HMAC.} This paper shows that \HMAC used as a general purpose hash function with keys of a fixed length shorter than $d-1$, where $d$ is the block length in bits of the underlying hash function, is indifferentiable from a random oracle.}

The first input is used to bind hash values to a specific election by including the \EG version identifier \texttt{ver}, the parameter base hash $\HH_P$, the election base hash $\HH_B$, the extended base hash $\HH_E$, or the selection encryption identifier hash $\HH_I$. The second input consists of domain separation tags for different use cases and the actual data that is being hashed.

% xreqj {
  "section": "S5.2",
  "text": "EGRI implements the function `H` using HMAC and SHA-2-256 as specified in EG DS v2.1.0 eq. 130.",
  "sc": "utsp",
  "utsp": "" }

% xxxx EfBq3+SWrqZfu/+3OV5j7w16fxbwRExybmC4MTofqUWxyn6rVbwe9UoqHAbptu8ANYXhAqRsGfGN
% xxxx AbWEe0tZBle08XshFhTn+JzK+2DZIbW8hWiX8t72rEtGDHp7tCfYYhLkh2dIZW57nauKjT5uKEyR
% xxxx kwh64KpBBpHiy0PXFTdljl8LOE+WgGmjuaxlfMfUtGIoaRRJYUEoGEilgJB1wg5hP+Ph/LnvyNrU
% xxxx IkzfCXOO/v4itZOo7s8o31eUQUojA5PRilM8cqwU330+03rgqMy8F2vfYMSWzDdy/nwcTexQOIUg
% xxxx 7h/ffNOg7Io6DFdExbvew3z6wULnIv/lCaJvMFGLfkNTYSjI2kP5rbK5qxKqx4R2ixTf8xAeklag
% xxxx 5xmZzfuvYVjpMaUtZEkh/Pyh1yZ632oNqpBbTUhPPXE9RFfIJYXawnVTPvi+ZnEgd62pBsCVqjZo
% xxxx hEvgGeS3gEiS6FjQOf3wgonJLe7ONTVEebkr+9qfHfjT2MSLgQI2PGTJStNZIHg+Uiyd3AlOVdUe
% xxxx pwP4PMsAyP3iZeau07dquVv+f4aVa6emhOsW4AO7WNP+cTZFCAN2cVPX6lM3kIhg4PfRfi2L5dw3
% xxxx 1rBsZX+SwvmM9zSjBl82CFNfP6jj5w08pzqgGN6gIUeOwMWKsyj9yyrPQbl/dl1vJQcmvI9EElZ9
% xxxx 8XRrD9YwHoX+A2SgcAT2c2tCFqefmaYpW8kCcfwzUHQA6OGbZ34Eq9l5vM1/9Wj/ZHGUqB6sP35a
% xxxx
% xxxx
% xxxx ---- S5.3 Hashing Multiple Inputs

\subsection{Hashing Multiple Inputs}
\EG often requires that multiple input elements are hashed together. In fact, the second input to the function $H$ specified in the previous section always consists of multiple parts. The input byte array $B_1$ is then simply the concatenation of the byte arrays that represent the multiple input elements as specified in Section~\ref{sec:hashinputdata} in the order specified in each case. As all byte arrays that represent input elements have a fixed length, there is no need for a separator byte or character.

The notation in this document lists the multiple input elements in order separated by commas. The first input element forming the byte array $B_0$ and the list of elements forming the second byte array $B_1$ are separated by a semicolon.

To illustrate the notation, consider, for example, the computation of the parameter hash $\HH_P = H(\mathtt{ver}; \mathtt{0x00}, p, q, g, n, k)$, where $\mathtt{ver} = \mathtt{0x76322E312E30} \parallel \bytes(0,26)$ (see Equation~\eqref{eq:parameterhash}). This notation means that \HMACSHA is called as $\HMACSHA(\mathrm{B}_0, \mathrm{B}_1)$ with the byte arrays\footnote{The symbol $\parallel$ does not represent a separator symbol and is simply used to denote concatenation like for byte arrays as mentioned above.}
$$\mathrm{B}_0 = \mathtt{0x76322E312E30} \parallel \bytes(0,26),\
\mathrm{B}_1 = \mathtt{0x00}\parallel \bytes(p, l_p) \parallel \bytes(q, l_q)\parallel\bytes(g,l_p)\parallel\bytes(n, 4) \parallel\bytes(k,4)$$
as inputs.
The first argument is simply the \EG version identifier \texttt{ver}. The second argument is the byte array that is the result of concatenating the domain separator byte $\mathtt{0x00}$ that identifies the use case and the byte arrays representing the large integers $p$, $q$, and $g$, and the small integers $n$ and $k$.

% xreqj {
  "section": "S5.3",
  "text": "EGRI hashes multiple inputs using an unambiguous separation as specified in the relevant section in EG DS v2.1.0",
  "sc": "utsp",
  "utsp": "" }

% xxxx 9fzn1IZeyhmHsQW42NK+fWUfmZplaT2zKK1ztFcPPeBlFn6v+nPvwRVgWwnPIl2FeFI4bXRDtulv
% xxxx xzQjmLAwbUM26PV4mKA7pxF36ftBAVFJhvMBg4LtPkuRjmEUbDFmYyM8O4S8azm4gzdXdqayrHQc
% xxxx iKmDHnz1Hddr7aR8i2B9UDhYogprpKVxuFRIYECxDajGxGSXrJBkByG15RcMLkPZEcb0ZEy6r/HY
% xxxx LK/9Pk0rw1A7IgRsX8Lq2Pc13xEECSjrPX3Q/omGbetIkIwoppE0wMhMk764EV4Y4lM6XCOx9X7/
% xxxx EHq2DmipoiI+ZzmGWM/lo+m+Jmavtjv7VMC1wB+snqjVjTQVAP0LpHR+LeYMBLMpF+hfA1RDWUbD
% xxxx JRcJ5hbwr5wCgUozeWVjojCL4tK0O6rsSO93yD1I9B1SOh9BddZa06Sl1d4I7fcFFfZ4Ma4Fgvv5
% xxxx jSxQ039Iue1VD0iIgmmLX91s11HgMkBU+arTVZ6p2QEVKeXmBv4FqIbSow9tMkuBYf1MogtPSzfP
% xxxx KLCh/cmsv49E+fIJtq/ukesUDAKipYt/wFjWRehRfiUbDwu068BWx5fkGcVXiu/e3cEMZqqZlhe7
% xxxx H8dtJ+fnZw/ydyfyhh8riIuDITloYLJT9SeSuL/GJU6RjRJ1dlTqNIP7Mm5mJSqssaJ/eTxBVJgI
% xxxx JrjsdvYH7WLj4jVn+J9LKzlIJD8fI4jyDrESXnDwJ9OuuyeXw7j2l1rUIw5vnOmMMcmU1m1mCyJ6
% xxxx
% xxxx
% xxxx ---- S5.4 Hash Function Outputs and Hashing to \texorpdfstring{$\Z_q$}{Zq}

\subsection{Hash Function Outputs and Hashing to \texorpdfstring{$\Z_q$}{Zq}}\label{sec:hashoutputs}
The output of \SHA and therefore $H$ is a 256-bit string, which can be interpreted as a byte array of $32$ bytes. As such, outputs of $H$ are directly used as inputs to $H$ again without any modifications.

In some cases, \EG requires a hash function with outputs that lie in the exponent space, i.e., in the set $\Z_q$. In particular, these outputs must be (close to) uniformly distributed in $\Z_q$. Such a hash function $H_q$ can be defined based on the hash function $H$. To that end, an output byte array $\mathrm{b}_0 \parallel \mathrm{b}_1 \parallel \dots \parallel \mathrm{b}_{31}$ is interpreted as a big endian base-$2^8$ representation of an integer $a$, which means that

% xxxx ---- eq. 131

\begin{equation}
  a = \sum_{i=0}^{31} \mathrm{b}_{i} 2^{8(31-i)} = \mathrm{b}_0\cdot 2^{31\cdot 8} + \mathrm{b}_1\cdot 2^{30\cdot 8} + \dots + \mathrm{b}_{31}.
\end{equation}
With this interpretation, hash function outputs correspond to integers in the interval $[0,2^{256}-1]$. Note that, although this byte representation is identical to the byte representation of integers modulo $q$ as described above, the integers corresponding to hash function outputs do not have to be smaller than $q= 2^{256} - 189$. However, in practice, it is highly unlikely that an integer in the interval $[2^{256}-189, 2^{256}-1]$ will occur. When picking a 256-bit integer uniformly at random, the probability that it is not smaller than $q$ is negligibly small, namely $189/2^{256} < 2^{-248}$.

This allows the hash function $H_q$ to be defined as\footnote{This construction of $H_q$ by simply reducing the output from $H$ modulo $q$ is tailored to the specific choice of $q = 2^{256}-189$. Should \EG be used with other parameters, the group order $q$ might be much further away from $2^{256}$ and care must be taken to ensure that hashing to $\Z_q$ is done securely with a different approach.}

% xxxx ---- eq. 132

\begin{equation}\label{eq:hashmodq}
  H_q: \Bcal^{32}\times \Bcal^* \rightarrow \Z_q,\ (\mathrm{B}_0, \mathrm{B}_1) \mapsto H(\mathrm{B}_0,\mathrm{B}_1) \bmod q
\end{equation}
and notation for hashing multiple inputs is identical in this document.

% xreqj {
  "section": "S5.4",
  "text": "EGRI implements the function `H_q` as specified in EG DS v2.1.0 eq. 131 - 132.",
  "sc": "utsp",
  "utsp": "" }
% xreqj {
  "section": "S5.4",
  "text": "Iff Fixed Parameter `q` begins with 248 or more consecutive leading `1` valued bits, such as is the case with `q` from the standard parameter set, the function `H_q` can be simplified to `H`.",
  "sc": "utsp",
  "utsp": "" }


% xxxx LwQaJEDJzEBBKR/dasb4FtWBXnQU9pWQkmapEu/jaKz8NpSMpW83zzTv+YePuNLtmGt3L/Gugf5Q
% xxxx 3kpZMg0DUMRdGdq8XO5hgMXRqO4VyrPCGAgbhvw0u6DWBZHLvFHQdvYLZRGh+qd70yxYvYj0NjI2
% xxxx tEpxlu+t4x0gnk4ilewyPJwwR1qlwGYRN2zfX/PtginF2fFwrci4prkmTlNe6sJ/3k6xee6hC5av
% xxxx XVGslGOgaAxTJBwhQbx1QP8Ce1XO6XBEVf8yl3TTZd/lxAaYEaUiyIbjc1O24Q5sHtZdh0mbjv0p
% xxxx 6NZsJszJdvrCwMOFJ7nVuhgkokmVi+5OweNzRxlz0aKlkpZUlGxYHh1pfnMBihsKfRy4PpZXTksa
% xxxx I8FSpjqrGfdBKRKPot/YZwSQHmoeX8jnzFoAO8shcApNpHtQGvoNuQ4XWLGy6KQr2LPmq1q3T606
% xxxx NdRN7M7KhS/wqh4qx3q+J1UqU9UHTk2ibzY6mCoG5L8woARWP9PrtGvII2ABTQqz5mvJA8wWu5ui
% xxxx uAkcMpav14Dy/RMBtJ7bHCeUyWsUB9SS0kS25cear+nlqDmo3jvspJcNe2HGBn3eGtKXplaRyVGH
% xxxx OzdEKdefXb2hLnBb2ylBuAnSW6o5G6NM8DAYSScra0W6QIE5iZIlyemzBBvBM0Iw0oJ5ugLReE5O
% xxxx 0/0iyx+zAHzgVIna/vD018HPUo0NG+dW1h6tjtEa2SVegYvcM6+FSd0l1zFtNzoEGz/jYkksGqvC
% xxxx
% xxxx
% xxxx ---- S5.5 Domain Separation

\subsection{Domain Separation}\label{sec:domainsep}
The tables below list every use of the hash function $H$ (and $H_q$) in this specification together with the specific domain separation input for the second argument. They explicitly provide the byte arrays $\mathrm{B}_0$ and $\mathrm{B}_1$ that are passed to \HMAC as inputs to evaluate $\HMACSHA(\mathrm{B}_0,\mathrm{B}_1)$ together with the length $\len(\B_1)$ of $\B_1$ in bytes (note that always $\len(\B_0)=32$). The tables use the standard parameters such that $l_p = 512$ and $l_q = 32$. For other parameters, the values $l_p$ and $l_q$ can be different.

% xreqj {
  "section": "S5.5",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "utsp",
  "utsp": "" }

\pagebreak

% xxxx tyLFw6CHJIjf93lBl2/snDDLnnqGaoPw25iL4av8PmpMBUi0+SFBWuGrbzyiHVOpBkwOKhhOUKc8
% xxxx bYRzmWEfwFx7zbZD1Kfea1RA57hsdkIU7VwvHNjO82aBD5/gvUt+zVrA57AMFYiSuI3ziQLnVJiz
% xxxx 3XSA9DmqVovzPtk8LkTyns4mpeBMJqO8g1eBR64S5PF4dgjr/X7L/48NQvcnrCBmfl8kofKQxYKI
% xxxx c0cTTIAF68yWyJ5BVyllcUdo5iz6Xief+4iBfqYjvr8mNTV3KK4AKhpe5KoUb0aVAoJ2AWfafa+z
% xxxx kJcznOh//VrXtKXefJRYgM+iSTZupbI48cO6+38Sraq9fPoSE3J20cUFht7UCTM33d9sn3WS04PF
% xxxx H45Ytm0hibQxQ8uy9KzP6AmpTVd3DRwvFD2c3DP1Gnj3XNq3Ro86GRz8wMSWcROHXvyghNgd6ReY
% xxxx E8eTrL9zaLTiv1WbaDvQuv6MkD8aXkub32/RiJ14AsjWRUpiawQLSn4/Z3VHj2sQxEqNSaKCcX80
% xxxx xbRrEsyeXjfjY+EEFu+X8z99xwe6IiSNzRvaxjeiqF91D86q0Yz3bWd3cViyhjrBHiB72/KMuxOE
% xxxx +DQFKl1CrifWkARuiOy/SxZuxxd+WWy6T1f9epZdDu6OSpPXl2VAgkQVvkt8UcUcsl3gW2vC8SJO
% xxxx 6wMfO8JvtH8tFM2qQLeEivoq/mZwq+FhMJeNW+iamxVBVj6SnDiml6TU3O/nt2gfnpJaQSMHCjDP
% xxxx
% xxxx
% xxxx ---- S5.5.1 Parameter Base and Base Hashes

\subsubsection{Parameter Base and Base Hashes}
\begin{center}
  \begin{tabularx}{\textwidth}{Xr}
  \toprule
  Computation of the parameter base hash $\HH_P$ & \S\ref{sec:parameterhash}\\
  $\HH_P = H(\mathtt{ver};\mathtt{0x00}, p, q, g, n, k)$ & \eqref{eq:parameterhash}\\
  $\mathrm{B}_0 = \mathtt{ver} = \mathtt{0x76322E312E30} \parallel \bytes(0,26)$\\
  $\mathrm{B}_1 = \mathtt{0x00}\parallel \bytes(p,512)\parallel\bytes(q,32)\parallel \bytes(g,512)\parallel \bytes(n,4) \parallel \bytes(k,4)$\\
  $\len(\B_1) = 1065$\\
  \midrule
  Computation of the base hash $\HH_B$ & \S\ref{sec:basehash}\\
  $\HH_B = H(\HH_P;\mathtt{0x01}, \mathtt{manifest})$ & \eqref{eq:basehash}\\
  $B_0 = \HH_P$ & \\
  $B_1 = \mathtt{0x01} \parallel \bytes(\len(\mathtt{manifest}), 4) \parallel \bytes(\mathtt{manifest}, \len(\mathtt{manifest}))$\\
  $\len(B_1) = 5 + \len(\mathtt{manifest})$ & \\
  \bottomrule
  \end{tabularx}
\end{center}

% xreqj {
  "section": "S5.5.1",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "ace" }

% xxxx sQorpLLyY4B0cw2poBz8RgpkPyH6x7F7NpHVBxROTCh6LTgeJZn+xJyQ3XH/6o4yh4EnzWjCugKM
% xxxx 5d1tQAjnoOqMYWRHDG+KYqUNvi5iprUrQAKYzidhm2+MV9p7VF6HjmiXWvj2yuNbfPTe0mwnkHeH
% xxxx gkC/haUT7jSUQ5ExKCMJSrVvHmGVxdGsDyhEO5n7NTPDvJH/j2Db/gSXQDexSyEO9USL84MoBg8F
% xxxx sbzEo1mV38LgbB9nSZXkXowxaf3yzNt7f+n+23ev8xNPyBE6o3msgv1i09cZJFp27SN1jsnd1AZT
% xxxx q/w8MTW9Y9v/fBp48RQobm6p5/31U70hrk4Cu7D2lGtyKE7od2Ou+HOsnaspJJpBx/j8OiscXBLc
% xxxx Y2XiZHmNeMwSIBx6MtMxYo4G7hwarI577iyZbiJRxUGMP3cDWse9+qQTf7TsmcQ9PVlNnVvB3H61
% xxxx y9IKU2wzlWoUnxjEwVJ6zwC2ilKAxFUHQZ9OkLFgPywlLnt/8k5fAytZTfxWlBpIVGCzq2p6ScbV
% xxxx fmIkgTB31UlZUGq1tXyrnnAlNVGQ8FQ2eZKOwoiNtLAyR3RHzPbYyiXoS685qzWgTtfIsMcpkDjD
% xxxx BDBzu3fITmv5X8ql0ghXjoCGo0h8/B+GtjTdvcXMczb7aqcUiMKAx/hRCmoe4pAYO6my9XO+zx0H
% xxxx 1WEYrTi1sDTOxwpdNrI1zymXxanBVrH1Ih3zopXr4H8j6JOr87/ZmFwhx7pcNLjbXIX8/58gvrZf
% xxxx
% xxxx
% xxxx ---- S5.5.2 Key Generation and Extended Base Hash

\subsubsection{Key Generation and Extended Base Hash}
\begin{center}
  %%%%%%%%%%%%%%%%%%%%%%
  \begin{tabularx}{\textwidth}{Xr}
  \toprule
  NIZK proof of knowledge of polynomial coefficients in key generation & \S\ref{sec:keygendetails}\\
  $c_{i} = H_q(\HH_P; \mathtt{0x10}, ``\mathtt{pk\_vote}", i, K_{i,0}, K_{i,1}, \dots, K_{i,k-1}, \kappa_i, h_{i,0}, h_{i,1}, \dots, h_{i,k-1}, h_{i,k})$ & \eqref{eq:hash_nizk_keygen}\\
  $\mathrm{B}_0 = \HH_P$,
  $\mathrm{B}_1 = \mathtt{0x10}\parallel\mathtt{706B5F766F7465}\parallel\bytes(i, 4)\parallel \bytes(K_{i,0},512)\parallel\dots\parallel\bytes(K_{i,k-1},512)\parallel$ \\
  $\bytes(\kappa_{i},512)\parallel\dots\parallel\bytes(h_{i,k},512)$ \\
  $\len(\B_1) = 12 + 2(k+1)\cdot 512$\\
  $\hat{c}_{i} = H_q(\HH_P; \mathtt{0x10}, ``\mathtt{pk\_data}", i, \hat{K}_{i,0}, \hat{K}_{i,1}, \dots, \hat{K}_{i,k-1}, \kappa_i, \hat{h}_{i,0}, \hat{h}_{i,1}, \dots, \hat{h}_{i,k-1}, \hat{h}_{i,k})$ & \eqref{eq:hash_nizk_keygen2}\\
  $\mathrm{B}_0 = \HH_P$,
  $\mathrm{B}_1 = \mathtt{0x10}\parallel\mathtt{706B5F64617461}\parallel\bytes(i, 4)\parallel \bytes(\hat K_{i,0},512)\parallel\dots\parallel\bytes(\hat K_{i,k-1},512)\parallel$\\
  $\bytes(\kappa_{i},512)\parallel\dots\parallel\bytes(\hat h_{i,k},512)$ \\
  $\len(\B_1) = 12 + 2(k+1)\cdot 512$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Encryption of key shares in key generation & \S\ref{sec:keygendetails}\\
  $k_{i,\ell} = H(\HH_P; \mathtt{0x11}, i, \ell, \kappa_\ell, \alpha_{i,\ell}, \beta_{i,\ell})$ & \eqref{eq:hash_shareenc}\\
  $\mathrm{B}_0 = \HH_P$, $\mathrm{B}_1 = \mathtt{0x11}\parallel\bytes(i,4)\parallel\bytes(\ell,4)\parallel\bytes(\kappa_\ell, 512)\parallel\bytes(\alpha_{i,\ell},512)\parallel\bytes(\beta_{i,\ell},512)$ \\
  $\len(\B_1) = 1545$\\
  Challenge computation for encryption proof & \\
  $c = H_q(H_P; \mathtt{0x12}, i, \ell, \gamma_{i,\ell}, C_{i,\ell,0}, C_{i,\ell,1})$ & \eqref{eq:share_encryption_proof}\\
  $\mathrm{B}_0 = \HH_P$, $\mathrm{B}_1 = \mathtt{0x12}\parallel\bytes(i,4)\parallel\bytes(\ell,4)\parallel\bytes(\gamma_{i,\ell}, 512)\parallel\bytes(C_{i,\ell,0},512)\parallel C_{i,\ell,1}$ \\
  $\len(\B_1) = 1097$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Comparison of different views of preliminary guardian record & \S\ref{sec:keygendetails}\\
    $\HH_{G} = \HH_{G} = H(\HH_B;\mathtt{0x13}, K, \hat{K},
    K_{1,0},\dots, K_{1,k-1}, K_{2,0}, \dots, K_{n, k-1},$ & \eqref{eqn:guardrecordhash}\\
    $\hat{K}_{1,0}, \dots, \hat{K}_{1,k-1}, \hat{K}_{2,0}, \dots, \hat{K}_{n, k-1},
    \kappa_1, \kappa_2, \dots, \kappa_n)$\\
    $\mathrm{B}_0 = \HH_B$\\
    $\mathrm{B}_1 = \mathtt{0x13} \parallel \bytes(K,512) \parallel \bytes(\hat K,512) \parallel \bytes(K_{1,0}, 512) \parallel \dots \parallel$ $\bytes(\kappa_1, 512)  \parallel \dots \parallel \bytes(\kappa_n, 512)$ \\
    $\len(\B_1) =  1 + (2 + 2nk + n)\cdot 512$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of the extended base hash $\HH_E$ & \S\ref{sec:extendedhash}\\
  $\HH_E = H(\HH_B; \mathtt{0x14}, K, \hat K)$ & \eqref{eq:extbasehash}\\
  $\mathrm{B}_0 = \HH_B$,
  $\mathrm{B}_1 = \mathtt{0x14} \parallel \bytes(K,512) \parallel \bytes(\hat K, 512)$ \\
  $\len(\B_1) =  1025$\\
  \bottomrule
  \end{tabularx}
\end{center}

% xreqj {
  "section": "S5.5.2",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "ace" }

% xxxx WKhy56IUgTWtCWItRrJmdOV5kTPmG2hv3vFlqIXrQ+5gFDng9E/djq0sScYw4ok2hk0DvdrmrPew
% xxxx w8h09TUUQaENwB5/zyM7KI9HjdIi7DPhoJ3zCyvjLzeHFQLRUY3EzAAahplSrCJZSq4xCBwZBcQU
% xxxx XsLjHoTSowW/Y40zYHfwCecegeWCoYTLkYiqgpt28SbhNNqSE+PEV2vL071s7uehqIDy22j1PbyR
% xxxx TRkoy1heWlxwNqdmq4SgdBl2tBka8TFm0QPPff2QxoFdt6Z0W7n1by14qZEOQR9Uzq2l+nVfZII4
% xxxx oWA9FmUyEnZhXJkj2SVJ5AOdHLySdi0bj1yGexLlua3YKbtFMWvndJMvi6XlhPhY2s1LM4LnvHUw
% xxxx SPKj07PSGH5YHmzrfx8BniCSJE4wDzHkm33K+osKq3Dc9uCsYPANmkozonfwk3R+JHpRCMtLkZM6
% xxxx OYVC1+cr/2Pg/6f6GNYrGaOKQXzvRy2v/ZSnlNZBdCid7VDjwhrSJzuspvTEem4JUJDXtPWPjC7d
% xxxx bcXMgBS+K86rNW0O0q1w49pyDuf6TrdyM/C/ByOYVW7f16dJQgvMxqvlIyj6o1RWSClWF5mMKowN
% xxxx oTYGcdebwMDw+bAGcjDFAlxsIElBaZ9JKjLp3RdvOYRYnKD6nuY/9vKk+hpGqjbeblSkHnClQBIR
% xxxx LhzJaI6Yv8cf84itN5BUl1GCcrAt2rPh6XWEVUpFGArWoXTAyEo0j3S3h2zYe5Ju3aTxbtKft8cm
% xxxx
% xxxx
% xxxx ---- S5.5.3 Ballot Encryption and Confirmation Codes

\subsubsection{Ballot Encryption and Confirmation Codes}
\begin{center}
  %%%%%%%%%%%%%%%%%%%%%%
  \begin{tabularx}{\textwidth}{Xr}
  \toprule
  Computation of the selection encryption identifier hash & \$\ref{sec:identifier}\\
  $\HH_I = H(H_E; \mathtt{0x20}, \id_B)$ & \eqref{eq:identifier}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\mathrm{B}_1 = \mathtt{0x20} \parallel \bytes(\id_B, 32)$\\
  $\len(\B_1) = 33$ \\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of encryption nonces & \$\ref{sec:noncegen}\\
  $\xi_{i,j} = H_q(\HH_I; \mathtt{0x21},i,j,\xi_B)$ & \eqref{eq:noncegen}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x21} \parallel \bytes(i, 4) \parallel \bytes(j,4) \parallel \bytes(\xi_B, 32)$\\
  $\len(\B_1) = 41$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Key derivation for ballot nonce encryption & \S~\ref{sec:encrypt-ball-nonc} \\
  $h = H(\HH_I; \mathtt{0x22}, \alpha_B, \beta_B)$ & (\ref{eq:master-key-enc-of-ballot-nonce})\\
  $\mathrm{B}_0 = \HH_I$, & \\
  $\mathrm{B}_1 = \mathtt{0x22} \parallel \bytes(\alpha_B,512)\parallel\bytes(\beta_B,512)$ & \\
  $\len(\B_1) = 1025$  & \\
  Challenge for ballot nonce encryption proof & \\
  $c = H_q(H_I; \mathtt{0x23}, a_B, C_{\xi_B,0}, C_{\xi_B,1})$ & \eqref{eq:ballot_nonce_proof}\\
  $\mathrm{B}_0 = \HH_I$, & \\
  $\mathrm{B}_1 = \mathtt{0x23} \parallel \bytes(a_B,512)\parallel\bytes(C_{\xi_B,0},512)\parallel C_{\xi_B,1}$ & \\
  $\len(\B_1) = 1057$  & \\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Challenge computation for 0/1-range proofs for option $\lambda$ in contest $\Lambda$ & \S\ref{sec:proofsballotcorrectness}\\
  $c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\indo(\lambda),\alpha,\beta,a_0,b_0,a_1,b_1)$ & \eqref{eq:encproof0_challenge}, \eqref{eq:encproof1_challenge}\\
  $\mathrm{B}_0 = \HH_I$\\
  %\multicolumn{2}{l}{
  $\mathrm{B}_1 = \mathtt{0x24} \parallel \bytes(\indc(\Lambda), 4) \parallel \bytes(\indo(\lambda), 4) \parallel\bytes(\alpha,512)\parallel\bytes(\beta,512)\parallel\bytes(a_0,512)\parallel\bytes(b_0,512)\parallel$ $\bytes(a_1,512)\parallel\bytes(b_1,512)$ & %}
  \\
  $\len(\B_1) = 3081$\\
  Challenge computation for $R$-range proofs for contest $\Lambda$ and option $\lambda$ & \\
  $c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\indo(\lambda),\alpha,\beta,a_0,b_0,a_1,b_1,\dots,a_R,b_R)$ & \eqref{eq:rangechallenge} \\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x24} \parallel \bytes(\indc(\Lambda), 4) \parallel \bytes(\indo(\lambda), 4) \parallel\bytes(\alpha,512)\parallel\bytes(\beta,512)\parallel\bytes(a_0,512)\parallel\bytes(b_0,512)\parallel$ $\bytes(a_1,512)\parallel\bytes(b_1,512)\parallel\dots\parallel\bytes(a_R,512)\parallel\bytes(b_R,512)$ & \\
  $\len(\B_1) = 9+(2R+4)\cdot 512$\\
  \midrule
  Challenge computation for selection limit proofs in contest $\Lambda$& \S\ref{sec:selectionlimit}\\
  $c = H_q(\HH_I;\mathtt{0x24},\indc(\Lambda),\bar\alpha,\bar\beta,a_0,b_0,a_1,b_1,\dots,a_L,b_L)$ & \eqref{eq:nizk_c_selection_limit}\\
  $\mathrm{B}_0 = \HH_I$\\
  %\multicolumn{2}{l}{
  $\mathrm{B}_1 = \mathtt{0x24} \parallel \bytes(\indc(\Lambda),4)\parallel\bytes(\bar\alpha,512)\parallel\bytes(\bar\beta,512)\parallel\bytes(a_0,512)\parallel\bytes(b_0,512)\parallel\dots\parallel$\\
  $\bytes(a_L,512)\parallel\bytes(b_L,512)$ \\%}\\
  $\len(\B_1) = 5+(2L+4)\cdot 512$\\
  \midrule
\end{tabularx}
%%%%%%%%%%%%%%%%%%%%%%
\begin{tabularx}{\textwidth}{Xr}
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of encryption nonces for contest data for contest $\Lambda$& \S\ref{sec:encrypt_ext_data}\\
  $\xi = H_q(\HH_I; \mathtt{0x25}, \indc(\Lambda), \xi_B)$ & \eqref{eq:noncegen_contestdata}\\
  $\B_0 = \HH_I$\\
  \multicolumn{2}{l}{
  $\B_1 = \mathtt{0x25}\parallel \bytes(\indc(\Lambda), 4)\parallel \bytes(\xi_B,32)$}\\
  $\len(\B_1) = 37$\\
  %%%%%%%%%%%%%%%%%%%%%%
  Key derivation for contest data encryption &\\
  $h = H(\HH_I; \mathtt{0x26}, \indc(\Lambda), \alpha, \beta)$ & \eqref{eq:k_enc_contest}\\
  $\mathrm{B}_0 = \HH_I$, & \\
  $\mathrm{B}_1 = \mathtt{0x26}\parallel \bytes(\indc(\Lambda),4) \parallel\bytes(\alpha,512)\parallel\bytes(\beta,512)$ \\
  $\len(\B_1) = 1029$\\
  %%%%%%%%%%%%%%%%%%%%%%
  Challenge computation for contest data encryption proof\\
  $c = H_q(H_I; \mathtt{0x27}, \indc(\Lambda), a, C_0, C_1)$ & \eqref{eq:contestdatachallenge}\\
  $\mathrm{B}_0 = \HH_I$, & \\
  \multicolumn{2}{l}{$\mathrm{B}_1 = \mathtt{0x27}\parallel \bytes(\indc(\Lambda),4) \parallel\bytes(a,512)\parallel\bytes(C_0,512)\parallel C_1$} \\
  $\len(\B_1) = 1029 + b_\Lambda\cdot 32$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of contest hashes & \S\ref{sec:contesthash}\\
  $\chi_l = H(\HH_I; \mathtt{0x28}, l, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_{m_l}, \beta_{m_l}, C_0, C_1, C_2)$ & \eqref{eq:contesthash}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x28} \parallel \bytes(l, 4) \parallel \bytes(\alpha_1,512)\parallel\ldots\parallel\bytes(\beta_{m_l},512)\parallel\bytes(C_0,512) \parallel C_1 \parallel\bytes(C_2, 64)$ \\
  $\len(\B_1) = 69 + (2m_l+1)\cdot 512 + b_\Lambda\cdot 32$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of confirmation codes & \S\ref{sec:confirmationcode}\\
  $\HH_C = H(\HH_I; \mathtt{0x29}, \chi_1, \chi_2, \ldots, \chi_{m_B}, \B_{C})$ & \eqref{eq:confirmationcode}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x29} \parallel \chi_1\parallel \chi_2\parallel \ldots\parallel \chi_{m_B}\parallel \B_{C}$\\
  $\len(\B_1) = 37 + m_B\cdot 32$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Voting device information hash & \S\ref{sec:votingdevinfohash}\\
  $\HH_{DI} = H(H_E; \mathtt{0x2A}, S_{\mathrm{device}})$ & \eqref{eq:devinfohash}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\mathrm{B}_1 = \mathtt{0x2A} \parallel \bytes(\len(S_{\mathrm{device}}),4) \parallel \bytes(S_{\mathrm{device}}, \len(S_{\mathrm{device}}))$ \\
  $\len(\B_1) = 5 + \len(S_{\mathrm{device}})$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Hash chain initialization for ballot chaining & \S\ref{sec:ballotchaining}\\
  $\HH_0 = H(\HH_E;\mathtt{0x29},\B_{C,0})$ & \eqref{eq:hashchain0}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\B_1 = \mathtt{0x29}\parallel \B_{C,0}$\\
  $\len(\B_1) = 37$ \\
  Hash chain closing for ballot chaining & \\
  $\overline{\HH} = H(\HH_E; \mathtt{0x29}, \overline\B_{C})$ & \eqref{eq:hashchainclose}\\
  \multicolumn{2}{l}{
  $\B_1 = \mathtt{0x29}\parallel\overline\B_{C} = \mathtt{0x29} \parallel \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x2B}, \HH_\ell, \B_{C,0})$}\\
  $\len(\B_1) = 37$ & \\
  Computation of $\overline\B_{C}$ & \\
  $\overline\B_{C} = \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x2B}, \HH_\ell, \B_{C,0})$ & \eqref{eq:hashchaincloseBC}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\B_1 = \mathtt{0x2B}\parallel \HH_\ell \parallel \B_{C,0}$\\
  $\len(\B_1) = 69$\\
  \bottomrule
  \end{tabularx}
  %%%%%%%%%%%%%%%%%%%%%%
\end{center}

% xreqj {
  "section": "S5.5.3",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "ace" }

\pagebreak

% xxxx zvxI1fayhUbw4teHUPQLTLK0qE9tkBcK8Q1i0hUliiWm2vSybctBPsbucCd92uUXYQtlYsgV7ngk
% xxxx 0HfLJyXhyHMa6KxjruCP5SumJsMmklvTgjSskxmTpBX15CvVCG3msy9ox3kxv/6KYaRxCyHzz/wm
% xxxx ChRF5L1ZE+2rzzFy2ccUx5Q6/nUvFGakzyzh11RaJz8kK5GN6GVxzzXK9egx6ltb2HlGbzDEMCYc
% xxxx QLUSJvqnXTaQxRu1RswELXgOLsf4aPtvuqf36WLhCao1OF8EYfB8Ti2/D7qYzr1N447S4RrNuAFg
% xxxx Dlp5MUMXCmH3dy7S6K50jzg1EfVOxJjsGNHXCYGzFHIgF6TzYqlY893AbJH2sUWZgGQxm3HjGBCT
% xxxx xKfdAZsnmazEY0U3DZLhpaENHe50vgVSKSbgvT8ICOnmOdulnLxUOVTQOnnrQVy9hFQICAMD93IE
% xxxx 9wTv9sL/62hPBXFSN1FWJLYcj3xNzLnrs6yMAtNwH6a/x5rkyAqzFMkdr63DGrsJBMUk3G+muU+4
% xxxx tdvG0+55DAgob9TJxaB1sIbUWiYb7h0g1ZgLgOLfI1LiItn4gad/5LXjqUqFjOmKBMzsvDyYTcLY
% xxxx hHCwe3f5azu0kZwbxoyMH2lZsLswaHbYBy3DND1K4N0DRlnFKXAYBx68whtEfhhlG+dgV6LkK2ez
% xxxx pl3jCPqLQ8rBFL+ZUp02xnzurtI55RyigZ9EKgt/BZMiV3Lb5pDh+8ITgnoD5AbOZUR8G0qsSu5S
% xxxx
% xxxx
% xxxx ---- S5.5.4 Verifiable Decryption

\subsubsection{Verifiable Decryption}
\begin{center}
\begin{tabularx}{\textwidth}{Xr}
  \toprule
  Guardian commitments for tally decryption proof for option $\lambda$ in contest $\Lambda$ & \S\ref{sec:verifiable_decrypt_proof}\\
  $d_i = H(\HH_E; \mathtt{0x30}, \indc(\Lambda), \indo(\lambda), i, A, B, a_i, b_i, M_i, U)$ & \eqref{eq:commit2commitment}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\mathrm{B}_1 = \mathtt{0x30} \parallel \bytes(\indc(\Lambda), 4) \parallel \bytes(\indo(\lambda), 4) \parallel\bytes(i, 4)\parallel \bytes(A,512)\parallel\bytes(B,512)\parallel\bytes(a_i,512)\parallel\bytes(b_i,512)\parallel\bytes(M_i,512)\parallel\bytes(\#U, 4)\parallel \bytes(j_1, 4)\parallel \dots \parallel\bytes(j_{\#U},4)$\\
  $\len(\B_1) = 2577 + 4\cdot \#U$\\
  %%%%%%%%%%%%%%%%%%%%%%
  Challenge computation for proofs of correct tally decryption for option $\lambda$ in contest $\Lambda$& \\
  $c = H_q(\HH_E;\mathtt{0x31},\indc(\Lambda),\indo(\lambda),A,B,a,b,M)$ & \eqref{eq:nizk_c_dec}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\mathrm{B}_1 = \mathtt{0x31} \parallel \bytes(\indc(\Lambda), 4) \parallel \bytes(\indo(\lambda), 4) \parallel\bytes(A,512)\parallel\bytes(B,512)\parallel\bytes(a,512)\parallel\bytes(b,512)\parallel\bytes(M,512)$\\
  $\len(\B_1) = 2569$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Guardian commitments for decryption proofs of contest data for contest $\Lambda$ & \S\ref{sec:decrypt_contest_data}\\
  $d_i = H(\HH_I; \mathtt{0x32}, \indc(\Lambda), i, C_0,C_1,C_2, a_i, b_i, m_i, U)$ & \eqref{eq:commit2commit_contestdata}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\mathrm{B}_1 = \mathtt{0x32} \parallel \bytes(\indc(\Lambda), 4)\parallel\bytes(i,4) \parallel\bytes(C_0,512)\parallel C_1\parallel\bytes(C_2,64)\parallel\bytes(a_i,512)\parallel\bytes(b_i,512)\parallel\bytes(m_i,512) \parallel\bytes(\#U, 4)\parallel \bytes(j_1, 4)\parallel \dots \parallel\bytes(j_{\#U},4)$\\
  $\len(\B_1) = 2125 + 32\cdot b_\Lambda + 4\cdot \#U$\\
  %%%%%%%%%%%%%%%%%%%%%%
  Challenge computation for proofs of correct decryption of contest data & \\
  $c = H_q(\HH_I;\mathtt{0x33},\indc(\Lambda),C_0,C_1,C_2,a,b,\beta)$ & \eqref{eq:nizk_c_dec_cont}\\
  $\mathrm{B}_0 = \HH_I$\\
  \multicolumn{2}{l}{$\mathrm{B}_1 = \mathtt{0x33} \parallel \bytes(\indc(\Lambda), 4) \parallel\bytes(C_0,512)\parallel C_1\parallel\bytes(C_2,64)\parallel\bytes(a,512)\parallel\bytes(b,512)\parallel\bytes(\beta,512)$}\\
  $\len(\B_1) = 2117 + 32\cdot b_\Lambda$ & \\
  %%%%%%%%%%%%%%%%%%%%%%
  \bottomrule
\end{tabularx}
\end{center}

% xreqj {
  "section": "S5.5.4",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "ace" }

% xxxx JS437qVRBAjmtsL8qo/shGPLr8cIx4+5s/WYXlv+CNEW9XopeZIaxT2gTVHBjJl9CIqNkL81/uVV
% xxxx 6NMjKg9J0q1SDIEUIzWwene0rybaomzwGoA7oHi+qXsoSdTiJq/vNfCsDJ+BwNFl0OemPSN+ilnq
% xxxx i8+hPqvltHT/2UTgtf4phZXKrSDNrDBPJincb7hH1VYEDVsZ4TTwG0Zunqq27GRRQxBFiY9ekfN7
% xxxx GBFxPyQJEbWWSsVMpzraLIE8SPnr32blazFtCX+X/B/8lXP6q7DFYyu0YquZn0ukdShaQijMLP6P
% xxxx o8RZyVaamvjxUWsEVnvVcm2GRlO7OKBFLPfR87tGomP107TFWRxT5sW7LcQjq0SoRGiC64Qg/Rl/
% xxxx 7agpC8sNnsEZqXb67F34uGxx36RmKlBwPvvji2P27yblzYujH1HPr6W/ghFoXPD/eWDTqN4YOpWR
% xxxx juJEJDke1W7Yh+RSla3QG2ATfBfSltuXv0fJTRiommKodLTgb8JO05DM1kDZdc1VSi+6yYN2/wMY
% xxxx 1tOvtEWjXnjs/ytAvxQh5LkORA2HN34GlzuFTVQEJ0J2ZMHKBlmvtAVkw+4sjJ4OlqARE8DdwKUT
% xxxx qD/XYvEU46eQ/xzPwm1wi1ic4itsZh9QeMcKv8kb+iG9/kUIEYhyDk0Mrd2Y3mmBvxzMp/4FAgBZ
% xxxx rsAZjubPN0dpqIwEtFxh9ZPptrtHiaITeySs6my6MRhFAgjN0ExgEpwz1SGwDXNFU9UmAAHMx0/p
% xxxx
% xxxx
% xxxx ---- S5.5.5 Pre-Encrypted Ballots

\subsubsection{Pre-Encrypted Ballots}
\begin{center}
  %%%%%%%%%%%%%%%%%%%%%%
  \begin{tabularx}{\textwidth}{Xr}
  \toprule
  Computation of selection hashes for pre-encrypted ballots & \S\ref{sec:selectionhash_pre}\\
  $\psi_i = H(\HH_I; \mathtt{0x40}, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_m, \beta_m)$ & \eqref{eq:selectionhash_pre}\\
  $\psi_{m+\ell}=H(\HH_I; \mathtt{0x40}, \alpha_1, \beta_1, \alpha_2, \beta_2\ldots,\alpha_m, \beta_m)$ & \eqref{eq:nullhash_pre}\\
  $\mathrm{B}_0 = \HH_I$\\
  \multicolumn{2}{l}{$\mathrm{B}_1 = \mathtt{0x40} \parallel\bytes(\alpha_1,512)\parallel\bytes(\beta_1,512)\parallel\bytes(\alpha_2,512)\parallel\ldots\parallel\bytes(\alpha_m,512)\parallel\bytes(\beta_m,512)$}\\
  $\len(\B_1) = 1 + 2m\cdot 512$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of contest hashes for pre-encrypted ballots for contest $\Lambda_l$ & \S\ref{sec:contesthash_pre}\\
  $\chi_l = H(\HH_I; \mathtt{0x41}, \indc(\Lambda_l), \psi_{\pi(1)},\psi_{\pi(2)},\ldots,\psi_{\pi(m+L)})$ & \eqref{eq:contesthash_pre}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x41} \parallel \bytes(\indc(\Lambda_l), 4) \parallel \psi_{\pi(1)}\parallel\psi_{\pi(2)}\parallel\ldots\parallel\psi_{\pi(m+L)}$\\
  $\len(\B_1) = 5 + (m+L)\cdot 32$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of ballot hashes for pre-encrypted ballots & \S\ref{sec:confirmationcode_pre}\\
  $\HH_C=H(\HH_I; \mathtt{0x42}, \chi_1,\chi_2,\ldots, \chi_{m_B}, \B_C)$ & \eqref{eq:ballothash_pre}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x42} \parallel \chi_{1}\parallel\chi_{2}\parallel\ldots\parallel\chi_{m_B}\parallel \B_C$\\
  $\len(\B_1) = 37 + m_B\cdot 32$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Hash chain initialization for ballot chaining &  \S\ref{sec:ballotchaining_pre}\\
  $\HH_0 = H(\HH_E;\mathtt{0x42},\B_{C,0})$ & \eqref{eq:hashchain0_pre}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\B_1 = \mathtt{0x42}\parallel \B_{C,0}$\\
  $\len(\B_1) = 37$ \\
  Hash chain closing for ballot chaining & \\
  $\overline{\HH} = H(\HH_E; \mathtt{0x42}, \overline\B_{C})$ & \eqref{eq:hashchainclose_pre}\\
  \multicolumn{2}{l}{
  $\B_1 = \mathtt{0x42}\parallel\overline\B_{C} = \mathtt{0x42} \parallel \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x44}, \HH_\ell, \B_{C,0})$}\\
  $\len(\B_1) = 37$ & \\
  Device information hash & \\
  $\HH_{DI} = H(H_E; \mathtt{0x43}, S_{\mathrm{device}})$ & \eqref{eq:devinfohash_pre} \\
  $\mathrm{B}_0 = \HH_E$\\
  $\B_1 = \mathtt{0x43}\parallel \bytes(\len(S_{\mathrm{device}}), 4) \parallel \bytes(S_{\mathrm{device}}, \len(S_{\mathrm{device}}))$\\
  $\len(\B_1) = 5 + \len(S_{\mathrm{device}})$ \\
  Computation of $\overline\B_{C}$ & \\
  $\overline\B_{C} = \mathtt{0x00000001}\parallel H(\HH_E; \mathtt{0x44}, \HH_\ell, \B_{C,0})$ & \eqref{eq:hashchaincloseBC_pre}\\
  $\mathrm{B}_0 = \HH_E$\\
  $\B_1 = \mathtt{0x44}\parallel \mathtt{0x4C4F434B} \parallel \HH_\ell \parallel \B_{C,0}$\\
  $\len(\B_1) = 69$\\
  \midrule
  %%%%%%%%%%%%%%%%%%%%%%
  Computation of encryption nonces & \$\ref{sec:noncegen_pre}\\
  $\xi_{i,j,k}=H_q(\HH_I; \mathtt{0x45},i,j,k,\xi_B)$ & \eqref{eq:noncegen_pre}\\
  $\mathrm{B}_0 = \HH_I$\\
  $\mathrm{B}_1 = \mathtt{0x45} \parallel \bytes(i, 4) \parallel \bytes(j, 4) \parallel \bytes(k, 4)  \parallel \bytes(\xi_B, 32)$ \\
  $\len(\B_1) = 45 $\\
  \bottomrule
  \end{tabularx}
  \end{center}

% xreqj {
  "section": "S5.5.5",
  "text": "This is expected to be a fully-redundant section, but we could double-check it",
  "sc": "ace" }


\pagebreak

% xxxx 7dzGG4YyA4jinrd5svxoyK6h7fJqr39Ph/4aHY+tvB0Ad3dWDtm+w1ykO4dlfSn6k85Zb1EGMq9i
% xxxx pet75HMPj+yrMmvOPFYkW5mNHTelIs1a1I1tvlZt56SmrlkLQqWF/NeRU3S/rGcd+DDtKp4stiv2
% xxxx USIUGbcd1oHh2e6RO4App6tEag/ZITJH0wPVkUp0Pwlty7oPGy6gRUYWDkCn8ZXkdHdWas+j2xNe
% xxxx B+PT1RGbla5i8NNC8J7iOudhIHTMx1KRd4+8rcl8hIkgwltxn3kslZ6x4Cs+0F6CDmLYzlbKkjq5
% xxxx YIFyvwn+bldcQhZsOxjT/LmPNBA0YCe1swL9o4kUuh42aoxPwVGNO7STq5s9/dXEg91gqwrATj3K
% xxxx JVMZqnBFDyYZjgrr0bfqHQR1cjnm7042W/BnwsVLQuOdFYpW4N5IgKK3QhAIY/jQ6q23/3JPMmdg
% xxxx WWLQzwTSx54GjGbOY28d7aI5bVQroOuEbmkMp1QrerN7BVV2ZHltMDrs+TDcgEMEcS2NKTe06eZX
% xxxx OoKk5LTiHjFQMhdjQ0wwNobfe33SJG1r3Slio6BQQHXH9zgzWHEWMyPGobxclqRC8QoQ/TTcD3Gu
% xxxx GptX0+w16mm9apqrJhiFUZFOZNqPm+wNI4Hs2nabX3i95HhJ0hRtzWLm8furaFvlkUEpl2iFxVSY
% xxxx EnJGm+C8vSIaED7XfRB1/qukTXCKSqfckfxH2hqTcf9zj6LcYGuiK8pV4tB6MHP5hUsTEKYLBWcx
% xxxx
% xxxx
% xxxx ---- S6.a Verifier Construction

\section{Verifier Construction}
While it is desirable for anyone who may construct an \EG verifier to have as complete an understanding as possible of the \EG design, this section isolates the items which must be verified and maps the variables used in the specification equations herein to the labels provided in the artifacts produced in an election.

% xnote S6.a This section generates no unique or specific requirements

% xxxx Yxb6AFW0Glb7MybPZth1X75McproBR+6gKFqnZf6T+gi6M7vV/0rN8+ot40T1Dz+Rv/7AyJW7WPY
% xxxx mK6BLjieVSdyYHA27csYnGb64ONFqwoDgatXieNPCM3SkqrpH3JlnXbId/Cp+CtV8yxJG0klk4z7
% xxxx Fnh6aeXqONDapb8XVnX1i+SJzwEQOxM2MkvqIkCjSwr+gqOmDcRTJBPmpq4IVTXiCuyk9Jw02cP3
% xxxx P8qBU3jys0s99O3PqzzvcYichKvvh1Mf2zxL+me8fPJSgLgntF1o9d0MAQnuEa40TzF8XGEXt9VF
% xxxx qGOFMGXmSSJWi4/nv2IubypWw7KwYc/Y/aVl1Dp/MDdwWONJAPX1GAZREn+3cTz0u1zTMEgC6v5U
% xxxx +lIH2MLA7kqHy2CqQsmI3vjy4ihj/6ygS5BuDNibtYoZ+dTEEuXamJRmj6EiexwEqGrDSeCLfzHE
% xxxx Acst2JG9S+vzgyTNGrj2Ra0I2FEclr7duij6WzvgRmshqR1yYj+3CsftRNMJ+PLtfSHT+DKpPo54
% xxxx l85za9UyjjLoTKJ41eTL8mXFYb0JRv+AgSCRl9NOmhsR/97OYjwa9DQZ+tC+lQI2NOdfAYWGATN6
% xxxx 45GkkHN8NxP1m+zA3+cJ5a3ug5SbDdLWvjoys1zh9xOR7KasrL1Nfz8I8OsXxukK0Eidpfbb6IaE
% xxxx EilhQ4/8L5hSstMPy/CJNHy4uUePbMQziPWQty4wZ8OnE2Ogly855taOVp7pmZKfEsSXN6jxASXa
% xxxx
% xxxx
% xxxx
% xxxx
% xxxx ---- S6.1.a Implementation Details

\subsection{Implementation Details}
There are four operations which must be performed---all on very large integer values: modular addition, modular multiplication, modular exponentiation, and hash computations, i.e., evaluations of the hash function $H$. These operations can be performed using a programming language that provides native support, by importing tools to perform these large integer operations, or by implementing these operations from scratch.

% xnote S6.1.a This section generates no unique or specific requirements

% xxxx BSaPoecYF558ZxXciaXeYmlESjzl5vwnYi9L0iUrxxzo7W48I+3LViIy+uopzzBqsPay7ZOUN+JC
% xxxx bp6WcNQyb9wtSSZPiuK0rUHNCqC6A5QXEgAaVIReMxhFaLMCMt0I+lu9ij9iS85KtrjN1x/filul
% xxxx 1AiLD97p6rHb9XiG08lO56QOWk9GEC9cSehh8JYC4z0sbyRNERBJ0RLaVk8kKEpxIPFf4wz10YYX
% xxxx gg/0I5JeSTJGxASetvfI1uXJ79ZTj4g0cBZd6Ygh/PlQEh3/0Q7f8hP9N5oXrm5FwONzfRTmIZd8
% xxxx ieKl+aqwg4YJoSWRwXKvbhT1Pv5cFVi+dekzzMLmf2nYYChYuMzpC+qiORPI1wuShEBvpyJ1d58G
% xxxx V8A6A++eoKx7F1LQDu9OzG8MO1oG6xUpdbUipf/L0C2B1yd0+csohni3x1cHzG00b45wA68yyO4t
% xxxx n11n6VVpjk/H6s90Ly6lUmm7oFt2J+Lho2ZWdXvhqzCxQp/BoqgBGyHzfgCRDbA67W6/jCOJhVMy
% xxxx 3HUzCfpSs93ShfAxf+J9kHeoq7C0XlTYhvdvNUl3Wuyig0TYdMgG3XaMTg3AvVcaZ31mDbAB1TCW
% xxxx P+e2WxZwSIY6MUW7yRsrl+sHQ1Xpg59du2STTXqqoKsqfjtOFlvlR1YoOtBDpGasC7fhf5uQbQPk
% xxxx LsgKEzuka3Cmbrg5gRVSN+KR6sTFu3Dxl2wvdXnIa3tP7/3aGIkAucqyjouRZ6jUyR9SYCalJzdA
% xxxx
% xxxx
% xxxx ---- S6.1.b Implementation Details - Modular Addition

\subsubsection*{Modular Addition}
To compute $(a+b) \bmod n$, one can compute $((a \bmod n)+(b \bmod n)) \bmod n$.  However, this is rarely beneficial. If it is known that $a,b\in \Z_n$, then one can choose to avoid the division normally inherent in the modular reduction and just use $(a+b) \bmod n = a+b$ (if $a+b<n$) or $a+b-n$ (if $a+b\geq n$).

% xreqj {
  "section": "S6.1.b",
  "text": "TODO",
  "sc": "utsp",
  "utsp": "" }

% xxxx ihsJmwh5tfEsrSrYfjMwQiofnuKUWKqqfccB3J89bqfFEHQ+ncht0Y8rBX82CDyMd161WEQ0k8ZJ
% xxxx W4lxu/6g7KlNK+kMKew/vnmRCEfKmx7dNHg3AgkTQoHcJrpsUuwBkbZrEahz7+Bt0hHsbAw5N4Ip
% xxxx r4csfOui1JUdpl/yZWVyUNDAEK4lS8QPnVJCahZepebE2wEJBRlgOBrRxh/lA50b+SWwQ9S0FMUv
% xxxx HRwy3FUPvAvQw7aOrNbA3YQ0fjjgNfIhmlkDzuKbjDy0XFcqRbqppo30wpvjwLacu12nLlbQgxGD
% xxxx mZZj64bG8iBKMHQtYxIydYJb4buiWi3X2Iy3WwgRNfRogR2svLY1KqUyF4oQ2SnLgsGL16XUETjJ
% xxxx 5uJwpf1J9U3b1Cvoo3EQjdaP0sFviH2HN+YZljPxMDXmdYHj+BsvA3YD6UeD1o0EyNX9NvGMGzLy
% xxxx hu0d3AlAVOXibdGD+M7q/PPEZVj0hFemE/v0yH0w1u2cGOOz2XNLIXQlh+B/orFiF3YXloMC2EPT
% xxxx Hxb6jp5XDcyUgxv0w8LfSxtfV5yCQl3Fa2LBdjoQcYYQiZ0hfjLLaIUU13iF89cjdVE6V1J95kEH
% xxxx 3cvKKpp6rvoe8FgArs9cx7zNXHaSVbIsDZ5BJQihg83iNONRlgOvb+7ZRCY5x/DAL6REpE+E1pwE
% xxxx pFKv6T+C1+KzIxVpyCe5Ba/8dwrjHJDCr5r/QKi0GfTBJJmzi5i5eR/3mx9g+Vs/2oVvN23Z8JmB
% xxxx
% xxxx
% xxxx ---- S6.1.c Implementation Details - Modular Multiplication

\subsubsection*{Modular Multiplication}
To compute $(a\cdot b) \bmod n$, one can compute $((a \bmod n)\cdot (b \bmod n)) \bmod n$. Unless it is already known that $a,b\in \Z_n$, it is usually beneficial to perform modular reduction on these intermediate values before computing the product. However, it is still necessary to perform modular reduction on the result of the multiplication.

% xreqj {
  "section": "S6.1.c",
  "text": "EGRI should compute moduluar multiplication on large integers without generating unnecessarily large intermediate values",
  "sc": "utsp",
  "utsp": "eg::algebra::test::test_field_operations,eg::algebra::test::test_group_operations"
}

% xxxx 1JbFqjL3deg7nGq4f+Ly30lkEQD8juUorFdAYhXpxgSGWnHGxe01kyhY0wW2OmwBPwHqkWVn3ZLQ
% xxxx QSEwyusJR6Q8skgNyOnlDyECVsGBguF/IRncnJJ7mLZ4Wnwlcrr/dBGljGqdO76ZhGiXUn6kEhhz
% xxxx IY541CT3bnqyeZtXlp+lNummzLlcnG/DnwHpuG6K0Sfyl8WL0cgooOtoftaWGJ2LBxLMBMcqPoQt
% xxxx RvMo2TT2C72XSj1UmpyPPonUo7osgDfQGMdhjBry4DXY+2qbwUcAOVq/geceE9DlxxfcZLe/QFXH
% xxxx Xk+xrkvDSUDDmCDUbUJxFFS+uVbluWau1gGHoq7eI2HNLC9oe+KiCJoXSt2T50qWqyYbHKsR3zGF
% xxxx ecKD61IbiUls05vMQkmPBS3qxlV1faKx2ejnBU0nHYlMgnd7mx8iSLRjHZn8yZwNrrN3DDeb87NW
% xxxx RCJeDNpIDYKu7nf+jfHQRals8ZAUmLDY4+ix7B6Ywb15cl7sVDdHBmIEnazktSHMSI4NksaSH/aO
% xxxx YC6GEyZoAFFNbloM691CunyOQg5rFdfu286fEL5nzafo3V4PxrYuHhSWTQr6o9ezhrrg5Nd8xWfS
% xxxx FZl8L3OG+hz7LxtL7wk44nUBOz1bagNwuoD/6I3N3VfhUzaKPKxpJAakthvz/4QadpMuLviUeO7t
% xxxx tWz+9MxH5M06ihDAD6uaFzdnL1rxzBMxmQaM5EzurZwOikqelaJilmqMXShfK/BxuYarJqf/k0m8
% xxxx
% xxxx
% xxxx ---- S6.1.d Implementation Details - Modular Exponentiation

\subsubsection*{Modular Exponentiation}
To compute $a^b \bmod n$, one can compute $(a \bmod n)^b \bmod n$, but one should not perform a modular reduction on the exponent.\footnote{In general, if $n$ is prime, one can compute $a^b \bmod n$ as $(a \bmod n)^{(b \bmod (n-1))} \bmod n$. In the particular instance of this specification, if $a\in \Z_p^r$, then one can compute $a^b \bmod p$ as $a^{(b \bmod q)} \bmod p$.}  One should, however, never attempt to compute the exponentiation $a^b$ before performing a modular reduction as the number $a^b$ would likely contain more digits than there are particles in the universe. Instead, one should use a special-purpose modular exponentiation method such as a repeated square-and-multiply algorithm which prevents intermediate values from growing excessively large. Some languages include a native modular exponentiation primitive, but when this is not available a specialized modular exponentiation tool can be imported or written from scratch.

% xreqj {
  "section": "S6.1.d",
  "text": "EGRI should compute moduluar exponentiation on large integers without generating intermediate values having more digits than there are particles in the universe",
  "sc": "utsp",
  "utsp": "eg::algebra::test::test_field_operations,eg::algebra::test::test_group_operations"
}

\pagebreak

% xxxx 454w+W4qfVXrroIWTC834vVtC/mU/p9fJ34GEIgu+e6aibb5Vmqj6aGkUhoKPocfiKcxKcAdV+2f
% xxxx 0sq75kMU7u4PEz6xT1kKvN6n1YVXXu8pOzE0tkf5mHWcTejFvZio9RGZsz1hBpD6rK3whE4laJQH
% xxxx M1Xbwwy4T69iMihrar6QH0VMmAzNqtwjFWB8IfpumcjOpsf6vUcevNlDVZXwNjamGrCFtIBpV52x
% xxxx HrOrlYGSWaJlRBQtaXWl1LDveeNljAxchuvjQmexchTD+xsn0SAjYeKoOiYrsDIj+lFOJCQyNeXg
% xxxx 5bfQgpYhpGFQt5McmWEWpLQGSovM/84oqP9+qJP6kwRVgQA/DNTxGaIKHE/zvBBVeGUTAC7xWkU8
% xxxx AEN0oJ/l/3Xt6ei4d9tkd7Xp1sogWAoIlr8gjb+zrDJgEHzXlBIh5O2qEvO2mA6VZDEcBQOPgi67
% xxxx hjWZoTQTqk7Bt4e9YRsvNe/9eto7IdU77ZNqfPE844FYPbsKl+ExjPPCt9uLi2o44koWKwehZswG
% xxxx gA8bLMBhyW2/Q98Le5tzH2LbdR98kreUYjEYRKCeLhhRHQ4mNBYmxLbTm9EnDJ/TVzgKkKUcyL6G
% xxxx EZSzK/c3SMBe6DErcJa4edP95yDYUSs/E/KR4UmezhoHr0NILC6J24YS5in9otR1hTxrflVU1uRt
% xxxx 2HwbDiv8Px1hZfAlU4f/nsFeRFNYE6qLBQ5inw9FCskd72wTDEvBrlSt1CahR/oCwSGft8Be9dVA
% xxxx
% xxxx
% xxxx ---- S6.2 Validation Steps

\subsection{Validation Steps}
This section collects the steps to validate an election and, for each step, lists the involved variables together with an explanation and pointers to how they are introduced in the specification.

% xnote S6.2 This section generates no unique or specific requirements

% xxxx 6Dw+CYqlgGEoxIhSicYU51VQMb6Vx9OIPajIgAinGpo2QCAKNyp6KIcYTMIt+Zk30poGLfw7oYnT
% xxxx +DV6gcbxXU0t1EVNmYkEu57tOzppSjx6+eZuFQ9Q7QmzP3ZG3BBynJs0dkaECS208y6BTvvQCWXb
% xxxx b1yHD0NRiNXGky/9iG9OjbjQDJBzrCm7CdTA5+3N7SeciqokMWF6/HKHau3qxukfaVTQGxMTcvUM
% xxxx 9qVKp8B3cqqWSFpTD+BYD/QZyaX9jVhKhr0OM7gMlhcSB+7+X1AVIbZQrMwXCkcpDsicSinwQR86
% xxxx UYVScw2QdFZgsSSArYFLQAY3p84J0eTyIOwXiNKAIY6YHpWuIFEjYKmLddlROFdSxUmPf9SvcT2a
% xxxx T/anywPBvoRMLIhjkSdIfJbL/tAcpzwqVbgcg8kQZ6o0ecJQfe2PIi/C1+V2Ze6t28lGWAtCt7qq
% xxxx dbyu3YplyucpAh5X192zDeZJQYsOTmNln1lT0oXxORIG2/J5vYD76ylHny/gNbPJPEihzHT8MCV2
% xxxx IQXUFVk+xWrgvDwMiGnLcMjNepPHvICM22paqqMHxaOxXjYA1DaBGZx7dGIvXlXlYbeSRiXUYZlK
% xxxx oryfN4Fw2X1txaSehu3S4UsBklw35uzkLCeJKnh9YTGKKCczDNqH/8fe2/d+LEByP0lMi7OOnF5y
% xxxx 4ZA6B4hqjsBF5gEJLg3TjK6BC/MG+/7TZsSXRur7yTaLXnkCnypDLVFpKHQm3FfxxYxGRQhM8XTk
% xxxx
% xxxx
% xxxx ---- S6.2.1.verif1 Parameter Verification

\subsubsection{Parameter Verification}

\EGverifrepeat{verif:parameters}{\veriftitleParameterValidation}{
\veriftextParameterValidation}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.35}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$ in $p-1$& \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ &\\
        \hline
        $n$ & Total number of guardians & \S\ref{sec:parameterhash}\\
        $k$ & Quorum of guardians required to decrypt &\\
        $\HH_P$ & Parameter base hash & \\
        \hline
        \texttt{manifest} & Election manifest & \S\ref{sec:manifest}\\
        \hline
        $\HH_B$	& Base hash &  \S\ref{sec:basehash}\\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.1.verif1",
  "text": "TODO: Verification 1",
  "sc": "ace" }

\pagebreak

% xxxx Buoo8Pnywl+2lwfKeE6aDeFkz8PlPi8c4FVBCAIPJ0cfNkpOi3Nd6m9/3+Xd0RlOYB6Ng7uJbjFg
% xxxx P8rLNl3mWzZRFle1W5pwlT0iA34jat9M9gsQpNHGX6zXVzwTurFmeA850ga/irpHNHfjCZuyXRjf
% xxxx woTKrWGFtG0sdKwE72p2+IyHDgicurqMPD0cdIYhP9Rb3+uRhgBPpw/IkjQN3V1+fvMC0OSPXliT
% xxxx cPmKgYTpHmzVJzQgIFd0S1BxD9RaJOiA/7ChNbfOC/SRd3EA0DSlcvQJDzVQjva/QXGJ574gb5vf
% xxxx ECk4Q7lOSNLGq6z00pDjRlrsOXEJtKsazqAab27CC/5KhFlKXbdW8MKlbJSBctAJsE//DWsZvB9i
% xxxx I8J9uIZwVJTbsbYE1YlWe4BPBr1/IXW8pbivqDNo46tt+vmcxWiND9MtNL6Y9KMaN48Ug3NFQw64
% xxxx V3P8yYlH+F3ZXrfyOz28WF5kw/ipJ3H6PFOWiLd3zXxKgGj8eAUCgiNNC7AnJf+0WAU8L1XftQ3f
% xxxx N+4LDGbQAc6Oor57V71/bve1tdVDpvN6BkQvKqDi/qSF2HgYGJonxzXk5MN9ot16j51XSgdOdhDg
% xxxx 6OVKOU5UD4FASNTB7r93R3nYuey7JJ2pEKwrd1YZH7D4NBdXD1zkMwTus3kTGubKBzXdYjfYzry2
% xxxx TB8n0dCegC2cuJG33oM4e3kGt+3tdchz90PLwb997DUCDr9tflplb0WYpp3RAnmtJkEVm8OfqyQL
% xxxx
% xxxx
% xxxx ---- S6.2.2.a.verif2 Verification 2 Key Ceremony Verification

\subsubsection{Key Ceremony Verification}

\EGverifExtendedrepeat{verif:guardiansPK}{\veriftitleGuardianPublicKeyValidation}{\veriftextGuardianPublicKeyValidation}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$  in $p-1$ & \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $n$ & Total number of guardians & \S\ref{sec:parameterhash}\\
        $k$ & Quorum of guardians required to decrypt & \\
        $\HH_P$ & Parameter base hash & \\\hline
        $i$ & Sequence number of sharing guardian $G_i$& \S\ref{sec:keygendetails}\\
        $j$ & Sequence number of receiving guardian $G_j$& \\
        $K_{i,j}$, $\hat K_{i,j}$ & Public forms of  random coefficients $a_{i,j}$, $\hat a_{i,j}$& \\
        $\kappa_i$ & Additional public key & \\
        $h_{i,j}$, $\hat h_{i,j}$ & Commitment in Schnorr proof of knowledge of coefficient $a_{i,j}$, $\hat a_{i,j}$ or $\zeta_i$& \\
        $c_{i}$, $\hat c_i$ & Challenge value	in proof & \\
        $v_{i,j}, \hat v_{i,j}$ & Response value in proof & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.2.a.verif2",
  "text": "TODO: Verification 2",
  "sc": "ace" }

\enlargethispage{1cm}
\pagebreak

% xxxx QYbrkVn9CG4CcL0k9vfr9dBhReJo8OF0BDgIEOapvBUw6KSWHfaGNJeF92DzvmqLK6D02El2vhuF
% xxxx K3fRRDAMBmXds4JydTfXQUlB/GH6/q6+axhhU7k8pDMhvPMWLCHoIT+OhV7XT15LZMUNYpoFF2Wn
% xxxx 1io5qNPG5cS+ZI85RaxLEoIsSHQHd2EUpaOwlLGZCcWFTsZoqGgY+vXUJZ6DFOc78xfkr+E+L52d
% xxxx sJt7+ap3glIjQVFFaLM01SItNUTcwSJv85hdbgJHSYSUu7CQudBUDn0I7gAPdHRyX1AFDVw9wf9u
% xxxx LWS7oC5uO/lwQ7JApH/bgl8bbl6wFEy+sfq+agu/IMapY+/UD1wfKl+Tk7MbVpFJO/taLjPIIz3M
% xxxx ReQDJ9042ONX5nWAKfp8cakK0R+unyd0lJ31RKNCpWXQwwY1YDurzr80QQlFNG43wYcxUQWoWKnK
% xxxx 439EcaWz9ewxg7YfmCu+5c0l8WtFA3fyjzm4Uz7RN4ieTLYBXQMBMPowgA42MlQvvJ4y+CVgv43X
% xxxx UyAxCHHMSIEv6u7O4etmaLoXQFJiEEqWn+J2pTD4mwQfxh3qKMKHH+bR6PbZEkuBsiUZWd+eQfqF
% xxxx QyiUm/0lfhf2N21b+y79CH2jIXHGuK6LBVKgtC4NwNe9lckYmD0QuTpb5qHGEV/OnfAWDdrzsVla
% xxxx p5GXSK7C1Ru7SkeyeHESsVsxzSB/smu8SH7tGwWQ17bUzqSFRWFKRy6P/h/JhFZOlX5hJzCFswBA
% xxxx
% xxxx
% xxxx ---- S6.2.2.b.verif3 Verification 3 Election Public Key Validation

\EGverifExtendedrepeat{verif:electionPK}{\veriftitleElectionPublicKeyValidation}{\veriftextElectionPublicKeyValidation}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\\hline
        $n$ & Total number of guardians & \S\ref{sec:parameterhash}\\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\
        $\hat K$ & Joint ballot data encryption public key	& \\
        $i$ & Sequence number of sharing guardian $G_i$ & \\
        $K_i$ & Public vote encryption key of guardian $G_i$ & \\
        $\hat K_i$ & Public ballot data encryption key of guardian $G_i$ & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.2.b.verif3",
  "text": "TODO: Verification 3",
  "sc": "ace" }

% xxxx aFl0mIPIB6kNu/6Agqq42V+33m6m6QDQ/CwSmYevZp2pkkFRZ/fPzbdCiXkCsUysrOXLHcM1wV4v
% xxxx umTSJl7StkEL+Ny2ThkZhWqM9s8d68hsDAo0kNiiOX8K0ulq0i/XaKPhXD7ldn+Rn3GivShSmlQb
% xxxx mkOQD1/mOSAoTn/bzpGPxTJbI5CtkuRJoC5YwCERJ1tpnqHdySVFkwFYN6oVceANih/XL6clurgf
% xxxx Xbjtxg+YyanJxizjp60s+KtfidhQBeoMuicShkmA1qOSgSNXUTG866L/kWcpP1m7FRHQ0VKWcRKV
% xxxx JZCJMZ/Kc/aSdBEn/JSya1Sf4rzWvPCjUwW2oamKT0qim7Mn8pMWQk1QpjgL+UhJ8PkvIoMeYXfX
% xxxx UvIbuKMwwFaLccLtoMlXudZriYiugbrmnO1ziaFrrfvX945GKzuJ/v7BOP1cDN8HLcEMqMn/77g/
% xxxx rxMsVOrE2tz0jnjfR2bfwjh3g6uP+51KpmEsHq0R185z0uk7OvvBjoukn1DONt3Len0FBaHyYkBC
% xxxx sY0+x0bl1KFTetR6IY5ydvB5G2kzrc/Nrf9oRsdVxHMVmEwTgPsWm6wN+XtwjpNi6NytnCvXqGPQ
% xxxx uwrhsjLio6hF/xhQ4k9HaV5csg4DLeS9BZeMxBq2OuTVPZKCW7uSCMulihrIHAsRwlmIZAWM5ce0
% xxxx lBvS6VWArm6zkKY+3iYlK0nW4IHDResgGyKD7Hrcy0LhAB7J1XxH1zsTqqkyr3WoOBNuHycJ3RRJ
% xxxx
% xxxx
% xxxx ---- S6.2.3.verif4 Verification 4 Extended Base Hash Verification

\subsubsection{Extended Base Hash Verification}

\EGverifrepeat{verif:extendedBaseHash}{\veriftitleExtendedBaseHashValidation}{\veriftextExtendedBaseHashValidation}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\HH_B$	& Base hash & \S\ref{sec:basehash}\\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\
        $\hat K$ & Joint ballot data encryption public key	& \\\hline
        $\HH_E$ & Extended base hash	& \S\ref{sec:extendedhash}\\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.3.verif4",
  "text": "TODO: Verification 4",
  "sc": "ace" }

\pagebreak

% xxxx PsZhTFcOL1+bbyeV8kI7PEy5bZYIzG3JU6V4loN4NYnIMHbwZXeZRG1MCgiNsAf3mzZ3FAtYPUIP
% xxxx Re8G+oLrHhxPNok2SDCvr2nXyn24rdoK2n87qMaj/hextgPiS2XaDDAlwauC/IIWRfWv8T4TjQsn
% xxxx 2l7LfMF09JnITq3coS4xOofvsJ8BtUTM+wacINmaWIzFNxRqRoDNKfDJOc8gxwEcxVBXY002sOXn
% xxxx 3dhjkv6FrTg5MilThZYNGzN2wdHZm0807dIOFXdJm4bsBybz7P/KXCCKT2cyJAx88b/ufA03u2X3
% xxxx /UCwf1e/s53+t1Ktf9oTU+tVS4Fp6cYZ0/X6Yf2Zsa0xO7OchP5qIAW0FRvSRq1og1vdQhDP9/6c
% xxxx vDzZVCS8Dun6soVw8pKzB8DBDh9ZUt6/XZoIZMn8GZdMdyAqK6vfFu171BldMk5GUFJpRiMtB00P
% xxxx 3u0NCxL0pSLNXEu1DT1ofr5iNLU/6+dlUoAv0gkU9O4z0ZxiXmr0GHbMYGK7590rfM5PQGgzRAQQ
% xxxx XaRQMAbkQNyGybYCxyfRb4kggy+Mf87knVVNkhtJGhuhMQDBjIL9FKnex+eh+WxBcrI5VoFJ/vhE
% xxxx L8dnCx9WZhkG//X30vnzb3V2+qmk9rrCdjZLND6ARm9x8mLBHM1cNyd0lXnogFaSCZhhveEL9I4u
% xxxx t2lLKEoClOcSKTXlkWWqSS/UNCtDcdZuhPaf4oEjESS7LMLqu0VT4l7RPu3y2WOcBUsTXnLbf4sx
% xxxx
% xxxx
% xxxx ---- S6.2.4.a.verif5 Verification 5 Unique Encryption Identifiers

\subsubsection{Ballot Verification}
\EGverifrepeat{verif:uniqueEncryptionIdentifiers}
{\veriftitleUniqueEncryptionIdentifiers}
{\veriftextUniqueEncryptionIdentifiers}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\HH_E$  & Extended base hash	& \S\ref{sec:extendedhash}\\\hline
        $\id_B$	& Selection encryption identifier for ballot $B$ & \S\ref{sec:identifier}
        \\
        $\HH_I$ & Selection encryption identifier hash & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.4.a.verif5",
  "text": "TODO: Verification 5",
  "sc": "ace" }

\pagebreak

% xxxx 9SpCktNMyU5GNG9axpWamgki152K8HMu2wHVNa1GgORfywocxAhJ6EUnls5GRCdqPvJynG/bcsx5
% xxxx 6p9DqT6aHzgkJmwi9Uyn6y53DomVRx7FjRDohbVcdr6KLbUissVXSxkkVs+wcihOmxzz0bOpGczP
% xxxx cj8e5KKZdQvOIynHwEz9eQtNYTgN5ieoTD5kFZ3Rc7+lMJALnmf+wQKaj0slrqJbcV0HwOMaTyK9
% xxxx ZMlL+Ytxd8Ar2ivsXKNp/4ikLgo4O8Vf4x89TJ4Zpkg1BN87wF73grmsBevobNXpjk5KnPfHsDpm
% xxxx d7wzgxYK5S+CRxybq8HM3fobtZyLA4iDESsriSqv5KwBUpLARdPHx6GeMUQQZpTSk5gTJ2Y3miKt
% xxxx I4FWqCcgNlPeN0cThGO2jOg/5dWZbqJ8NL0NbUOlDyuN79qD1OVIr8sqg5tbVbth0nlX6WRZiJ9U
% xxxx dIUEUG6cbif7v6HbDbhGfAiiMkimqK7Jw2YVfgeeQsLMk+l+Dyxy9SFwkUc0a6FAUyZBFdZNKKjO
% xxxx 3iMBptG6v1NLx5KAjdMJf/QSmIw2JnN4Rp3T77opfdZZK+k3Ky6uNK+Hg51P+pcu9b4HZjIzcQ3V
% xxxx gxzuN6SMUao+E8K+XND09joKDiMMNJqf8Wh46t7tf6oF+tVkGsBBd0Twc3/T50SAEU58j63hA0fz
% xxxx ALfqDUf5mgGyLFm1cZmRgN4Z1cPRMOUJfs+uEDxPERby58AtLJZ4u9QYVEqjr5hACVC9Gae6wtq2
% xxxx
% xxxx
% xxxx ---- S6.2.4.b.verif6 Verification 6 Correctness of Selection Encryptions

\EGverifrepeat{verif:selection}{\veriftitleCorrectnessOfSelectionEncryptions}{\veriftextCorrectnessOfSelectionEncryptions}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$  in $p-1$ & \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $(\alpha,\beta)$ & Encryption of vote & \S\ref{sec:selectionencryption}\\\hline
        $R$ & Option selection limit & \S\ref{sec:proofsballotcorrectness}\\
        $j$ & Index running through the range $0,1,\dots, R$ & \\
        $c_j$ & Derived challenge for value $j$	& \\
        $v_j$ & Response to challenge for value $j$ & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.4.b.verif6",
  "text": "TODO: Verification 6",
  "sc": "ace" }

\pagebreak
\vspace{.5in}

% xxxx SYzydX0joEXuoFJzh2tKE3S/M41MVYd9cQ3FxFQivyWoNTIQHW+IJDCisEYVotpE7N1k0eZbFoOX
% xxxx JJH/dKAJcbEXN5MlSPCYDtEGk0deXbTIPUM2Jj3Hko1JU37h7GyYOp1XRJpSuss/s51/dY+CiCui
% xxxx eggcfb2uOu+rAi7ZHxszXynmlz0+TvUKRBcGTME49lCTE8c9xGTYWWfrGH9L+w0ePlqP6aM6wcKt
% xxxx krOefQqzd28DmS4PZzPDv19PiFmPsqDw8XAfkfjKdZGbXc8Lr61oDAbXJfOkM/riFI9SeAwI6o+R
% xxxx adflcZPv2wrhHTd0a4pp9FJ74kbiHFWL6Gf9iDu1SbAaW4ck8ESIRDSomah4Bgbpkcv/fclN640n
% xxxx yy8tXF6eTCeA/8gd17tzrmKFjyj4sz2bESyqKz/39vwMJCDhMLlMIbuKTnM4uY2mGgHEyv2MCrcw
% xxxx FrbruAy4FRumKfEWA0l1W5czIFKd+GAhIsou/draQMWR9rFDWqzkARG0ltpQWGiBhlodgBSee+el
% xxxx dYCM3lzq8ff3y3M8cqQJZUzG8Ji7R+FUf//cEn1+KtmId359HGBmcL/uMVXBnhxO+Z8t8BC11ltT
% xxxx 3bTC1BSqywbiFVryasHEMfazT2lsKenLFno8l88XUrhT+SaEpP7S66m7Cwa/w/Bvy3rz3iofJHde
% xxxx 3fMeYJraCQ912VbDZ2e8aGkOV77hbX4CO4sev16rvlTbMn8Rmo+TBaO2VU20m3cwSjGkefuz3ICH
% xxxx
% xxxx
% xxxx ---- S6.2.4.c.verif7 Verification 7 Adherence to Vote Limits

\EGverifrepeat{verif:selectionlimit}{\veriftitleAdherenceToVoteLimits}{\veriftextAdherenceToVoteLimits}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$  in $p-1$ & \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\HH_I$ & selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $L$ & Contest selection limit & \S\ref{sec:selectionlimit}\\
        $i$ & Sequence number of selections in the contest ($i$-th selection) & \\
        $(\alpha_i,\beta_i)$ & Encryption of vote on $i$-th selection & \\
        $j$ & Index running through the range $0,1,\dots, L$ & \\
        $c_j$ & Selection limit challenge values & \\
        $v_j$ & Responses to selection limit challenges	& \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.4.c.verif7",
  "text": "TODO: Verification 7",
  "sc": "ace" }

\pagebreak

% xxxx UgqBlqdJiBUZ+Yf/IcYnTXU7WZ27SnAjYeeFakvJN1mdFo5p+yVQODJ+mvabJyyOAhyqTLZApyiO
% xxxx e1i/Wyc61BNUuPK1dkCVyDCTUrDTq1tAcqbTJBEgevNXjHSgVkfEeGGSUAlaiEvEUZMxW/C8bV12
% xxxx eEPjqbw/fKlsv9qiWo70dT8Vos0Ud14g3/QCyTiWJyq56GOQXXvf3/IPN/qU6A2/UBMAPqkV4FZ+
% xxxx xvJr2Iz+jMiFyfLawf4Gvt+hRTAKFLR544UfmfQAiVhFjn2OyCLU/k4lY5YnzdkndOKhEYyb0mc6
% xxxx hfZ7N8QA1+eMWMpUOiGoeCNKjGJk6/SFw17xm+CYeSSwIKSaRIUFrOLQoo3+LvtKg3Ig/VbzVvem
% xxxx i/DQUm6tzaHd9xhzLrcCT1TS/iq1zKE76ZsEDCAnNrm8p5+TYmVr8qsvaHVoNsUTMVf3+JddyhHS
% xxxx gF+93Db4+9coZlQJJklCGcbqD+LjZis0/ItgjkHRlbKapJAEDMhYny4oA2IUE/3runFenJi6D3v5
% xxxx ggbh+uu5c1fWJP0Bj/9zigTXkgRGZmH2pNd5DIl967CtJa2UHv/Y1BeVMX9GNs2Qz6pEuUp2LTxe
% xxxx 1FMJeeLpezZAkzqRY3JJzognH0zR1qNw/4FXi2085mmrxvtXheQe2phDHrXKy2YyFrJYh70Xh6ua
% xxxx 5dC5ka/V5nECHUtZbi6i8bh65yAz1ydQ3oj9vGpopouIC4IJa6V4ul4SFxFdrfWumg6r3tG37Xfm
% xxxx
% xxxx
% xxxx ---- S6.2.4.d.verif8 Verification 8 Validation Of Confirmation Codes

\EGverifrepeat{verif:trackingcodes}{\veriftitleValidationOfTrackingCodes}{\veriftextValidationOfTrackingCodes}


{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\HH_E$ & Extended base hash	& \S\ref{sec:extendedhash}\\\hline
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $l$ & Sequence number of contests on the ballot & \S\ref{sec:contesthash}\\
        $(\alpha_i,\beta_i)$ & Encryption of vote on $i$-th selection & \\
        $\chi_l$ & Contest hash of the contest with contest index $l$& \\
        $(C_0, C_1, C_2)$ & Encrypted contest data & \\\hline
        $\HH_C$ & Confirmation code of the ballot& \S\ref{sec:confirmationcode}\\
        $\B_{C}$ & Chaining field byte array & \\\hline
        $\HH_{DI}$ & Device information hash & \S\ref{sec:votingdevinfohash}\\
        $S_{\mathrm{device}}$ & Device information string & \\\hline
        $\B_{C, 0}$ & Initial input byte array for ballot chaining & \S\ref{sec:ballotchaining} \\
        $j$ & Sequence number of ballots in the hash chain & \\
        $\B_{C, j}$ & Chaining field input byte array for ballot chaining & \\
        $\ell$ & Sequence number of last ballot in the hash chain & \\
        $\overline{\B}_{C}$ & Closing input byte array for ballot chaining & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.4.d.verif8",
  "text": "TODO: Verification 8",
  "sc": "ace" }

\pagebreak

% xxxx fyzcCn53Wtgm1FuaiWcG9w5sJfTnip1TOotPauiZ0SF1nDGItW/0E+v0p5GNzlqa4Uo4o0+RkWaH
% xxxx gUDHBi2akvTYKbKPnKg42baM1/EkBrLLcEBuRWykYQbsOBm8h8t+HDS2AEC1hyBz+1NnDPesJhTR
% xxxx II4NikdD/opezDl/RTQr58shvMzphABcbpCG765aYvIHOcquLqPLrfF1hAmqk0CSzPRT6UtsNptH
% xxxx T/QiRVypPl21bVCecpnaz9wEyQOkO5y1qZP8goW8mQ/fxl1zhryxr2IJIL3e17CyQ7N/r695QIzU
% xxxx PTufVtZ3D61FcqcjNMdJj0TwIhIP3e20uCRBcGVAzwufJIDAHHnugMY6tcHCndUspW2r5Ep0VDev
% xxxx dGHBCJwcghjYvcv7L/5kaw0R6lTOhT056cFritsBtqMWtmb5AJc37NI5vE0Wie5i/G1gK9+1BIRz
% xxxx ioklcx4Mh26va8A5Zaima3TpbkvhD9PgywM2klQ5OYIRPNv7jkx50VVQbzl/uV7ehyY7v+JUuGLO
% xxxx OEjnNZOWFq/vOJ45lNAoW5GE+umDwlb+bP4ntbMaMsAjKo3w2IQPOAb2vegFOSxPYP1K0SaZuEb+
% xxxx KXxccHrQVBJH0q+JXp4Wwwqt5hNbGgrSPmS0tLm5JLodh3c7KdUNJizetiAn5VyEgxKpe38LmJQQ
% xxxx jG8DIwzRS1VgnRLVC7OS8GtomTslzGJ0R0z+X1+KAwHUc75lmkJoaYBtNCx61eYP60jW5cNLpvQH
% xxxx
% xxxx
% xxxx ---- S6.2.5.a.verif9 Tally Verification

\subsubsection{Tally Verification}
\EGverifrepeat{verif:aggregation}{\veriftitleCorrectnessOfBallotAggregation}{\veriftextCorrectnessOfBallotAggregation}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\\hline
        $(\alpha_j,\beta_j)$ & Encryption of selection on the $j$-th ballot & \S\ref{sec:ballotaggregation} \\
        $(A,B)$ & Encrypted aggregate total of votes for this option & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.5.a.verif9",
  "text": "TODO: Verification 9",
  "sc": "ace" }

\pagebreak

\vspace{.5in}

% xxxx yeUfu8uV2sHUscyScJizthdkv/NkemzZ6ewra/K3kag5RLnWAAAMLJXxaxhsvzbyRGMpsoH52wyI
% xxxx ESWhsHY6iapMAC2FhletuvDtdmYrazeVFQtOYA026dhG0zzqb+rzP3xIWsXuRoQeKVKyh33zveOF
% xxxx h6ZU6EhgglYRFbXUt77CrnPNOIQgdbsvdoEfbZVBJeFbUq7wuNnncd+MJLhht76v+cCJ8XUgfS60
% xxxx hVomRpdWcvlsAKiak6LKRFH2wrqHjrPF1c7hTsxEebUzhpcOTnLyT72BgSu5Xg5fvEiZF3rkW2Ep
% xxxx IJ3OSVezSkLnMaTcVkDcwIqetE59swZkkhgSHHckWM8gk5aRW4br0f6t4LFC49P2ZvU3caSuGkG8
% xxxx m3BDhu2lXHRIKhu7VI6FI67hZMTjwflRu2hi5J9n7/IPkN1cHcyNOBYa7wc8qxN6y+A8D+hVskc6
% xxxx ZGBXcDKCVghAsK6zv3pt7YCVSuPut6UkLylPP9xEB9t89RK9BCp/kFNAs/03A/AX0Dt8tPuDQ7M6
% xxxx SCZnZSVAPihwRbzd1Lk7QkyAEqf2XF7gpLI7N8qqIHt3S+mVXPxXRbzuXGj6o+jKan8pTfkyTTen
% xxxx jYT2qPQdrbmneUhgE0whJT9qtOA+Gzj968rpWAITIbGZ3/7YyEl1idAEzwGf/Y/XbPmO7fEyrJlB
% xxxx PE/vSqUyaJzYsN+usm9YMI8OqZTYfKY0bmNroJrlBqgR5zZTnSEV6N7nGd6XR8jGZ7Zj4qdX55F0
% xxxx
% xxxx
% xxxx ---- S6.2.5.b.verif10 Tally Verification

\EGverifrepeat{verif:decryption}{\veriftitleCorrectnessOfDecryptions}{
\veriftextCorrectnessOfDecryptions}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$  in $p-1$ & \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\HH_E$ & Extended base hash	& \S\ref{sec:extendedhash}\\\hline
        $(A,B)$ & Encrypted aggregate total of votes for option & \S\ref{sec:ballotaggregation}\\\hline
        $T$ & Decrypted value of $(A,B)$ & \S\ref{sec:verif-decrypt-strat}\\
        $t$ & Decrypted tally value & \\\hline
        $c$ & Challenge to decryption & \S\ref{sec:verifiable_decrypt_proof}\\
        $v$ & Response to challenge & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.5.b.verif10",
  "text": "TODO: Verification 10",
  "sc": "ace" }

\pagebreak
\vspace{.5in}

% xxxx aJnvwRtlrsQdCbtL8O4sZafvRZ8xZJk272f7GrX4FoIynxOjRbP40zcFtS2pgdyBB76wCM0DWnlP
% xxxx PjHQB22p80WJEV0yfbst7UmmM0sRTetr5paYTO7eOe/LZUkPZ18bbyYS7MLdGLVL34pm95IUMWdm
% xxxx HOMXlqB0gxDdk86bdNF6L9gdF+PAAZzwaBXdwUMOKMADdmpfrTh4UJ2F7tVKFMoeTOURy+rEy8Kw
% xxxx SACvZ8724f8OdiP01KG1w/mNm0ENEQdKnw9alBI0f3HVCIcNvQvPvbrcpXiI8hEHH27K718nQ+R3
% xxxx EJkg+xjoxG0VThJ6g1EY1XklTUA5V2hInJtVRiPXfdpqpL3T0Nj82TDFFA5vMGQTgIU/0vm8jhyA
% xxxx bOfOWUAo6Vq7eDMEYz8yvQJPcOJuOo3/nytR3uH2LK0/34y6plHlIP/fu8bwXLFVyM4x/ILrMVtF
% xxxx qVnFrrsELxQzCgZPETl9/AXsWK6KX1iqHvntjL/kgaJ4pVXLqUQTgngV72Di9aOyHZ3yjm4c9q9b
% xxxx QCCxpeCpkIOZvEOH6vkLFRLpch0iR9BV3ltNOnY2GLUZN0M+ZLUODTsIA5UOGqmwQlXu4QBxt7a5
% xxxx Z8xuW51oxUe0U9HkaZO9SKTEZBK7yTKonXzZ26xIqNwCMGKyereIVXpeOnsLv+ArvNkwKpNs+w30
% xxxx cEuA5nHKrvi0kZh2tzljyy00cBPUxKhQgEhiHRQIGbCOfjILIdJ5PHRmM7Y8m80ahH/J/7Ix3rzt
% xxxx
% xxxx
% xxxx ---- S6.2.5.c.verif11 Tally Verification

\EGverifrepeat{verif:tallies}{\veriftitleValidationOfContentOfTallies}{
\veriftextValidationOfContentOfTallies}

% xreqj {
  "section": "S6.2.5.c.verif11",
  "text": "TODO: Verification 11",
  "sc": "ace" }

\pagebreak

% xxxx Rk/E8/+77gtno4qmqSjuyuzuoAQPlt/2nGz4gnNHp/QSgO5bzuzfSmcfrCrbkHNc2Npit7f/b7Aq
% xxxx jLs+Mfn76pV7HzLQLAPAtBqlSD96z8pTTPPQtKLVbJCYsJwZahwyBFMWdQC4X4W6PBWwIddIPryt
% xxxx p3o3sDVihc33r+VWdF0oBMBC4J34LxCda0ZHVZw7l7h9rbhOdtu90ZW44XbZTbnwN9TVOr28YOME
% xxxx kDdcFpqUpWml7/bVx+gixjenp165u3eGTsR+U58yx1ibIjNmb8k8vccOagmiWCC/FBL9dTfM9S+P
% xxxx W7Y2XCbVwhUBkkvgbKLB9bdCWN1Ex86phed9yq4raMVT0J0jIQOl+HHiB6ESJkyfXZQEO5bsK/wH
% xxxx 1gYrQ3fzdudETMlCLTYtLX+EdkP9cLwehzH8vIl74w3xTcoFvab/646kw88lfTE1LpV8aoZ8Vc0a
% xxxx vl1BQ1HNSaWm63t5UzdpDGDsZ0CnCO4S6/zkc5HdQNEHKXgWewE2FxEzdQgxkEKbZU2nkzKNKOOE
% xxxx W3wk1nUHFyYO9AtAD4TGIIEsOFwaPyX5ZdVj7o66mDf2TsJgjjH+PwSAqgcrHsUc1yM2JbpkSbcq
% xxxx RmdV2aY6MP6/QfylguQxd1laJwXIwSMlLKh+DF+4cahVt0t37PdNmmwX2ZHiIYvF3LPUy2y7uRUa
% xxxx P2ownsbQt06sitFE9doocju/WbxPu2fqktQ8ZwoBhWrQKLLgpJPry6HLlouZhB0hhsDApD5hv4Ij
% xxxx
% xxxx
% xxxx ---- S6.2.6.a.verif12 Verification of Correct Contest Data Decryption

\subsubsection{Verification of Correct Contest Data Decryption}
\EGverifrepeat{verif:extdecryption}{\veriftitleCorrectnessOfDecryptionsOfContestData\footnotemark}{\veriftextCorrectnessOfDecryptionsOfContestData}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.4}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $q$	& 256-bit prime order of subgroup of $\Z_p^*$ & \\
        $r$	& Cofactor of $q$  in $p-1$ & \\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $\hat K$ & Joint ballot data encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $(C_0,C_1,C_2)$ & Encrypted contest data & \S\ref{sec:decrypt_contest_data}\\
        $b_\Lambda$ & Byte length of encrypted contest data & \\
        $\beta$ & Decryption factor of $(C_0,C_1,C_2)$ & \\
        $c$ & Challenge to decryption & \\
        $v$ & Response to challenge & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.6.a.verif12",
  "text": "Verification of Correct Contest Data Decryption",
  "sc": "ace" }

\pagebreak

% xxxx ZIXPchk1Q0j1OSq/UTsfspk7tRnospBcgSvXpJPhFdj6OMa9QOGZmk1CEAIcT9269qEf9JB8eymw
% xxxx T1AtVXCABxeehR4NReeDT4NDXDK4x9nURiyBAL8hlYXf7GSw0YGIZYg7HjhHLC/c4LKCbk5B+EEE
% xxxx SXSeEASSe7Jw4DNu2ko0pL6TqxumdBoLTE3o/6YCc8L/p5kQSAk/iWY1Bf4BHX5i2wJ6+isePMLa
% xxxx gPBrE2sRilJ4wORtA8suV9s+dqvXO3pmwB53hBRJsDmt/a7GkO8rRz1bSwI0f8YlUfWxeM42yC5N
% xxxx 6vKOtZIrCxdJBtQ4fIfOVDud8FoIbRKuOcCcQm0C5K0wnqkQ5VXi4VIBbyUlQy7iByr+o6XbmJ5l
% xxxx 8DV1Puj6U+W2VQH1ZslmDWAqZMz8JtxPVHeaPcvPKRXfuiBzBG0ra6zzVtm4J9uNv3ZVbR4Oob+S
% xxxx AmqizLhZE3UgUQc28F1qS2245hXJlWjU75AQ2mePbzr0RQ/5NjJM3WOEbLrY91EMFkpMWX4BLfD/
% xxxx QUHpJuqRGi+avY2S7SXxxDJth98ZiBoRBkNIYoSWeO5fEMgB9mBplA3iCAxBCu4OtC+SE74vybHU
% xxxx BpOgN4dQZ32CnENPDZNngpcf4MWJG0NUH2d9J/K2H8EQ+ssy9c7ODFI/4bUb7L1/aDmduHfFiYfm
% xxxx pQqx3GK3Q74DdwaBl2Ug32cvNghHJdubY5GsQDpXdcwOb9/jXMIj2bu02AeIjxygUsYrFd7EHzsM
% xxxx
% xxxx
% xxxx ---- S6.2.7.a.verif13 Verification 13 Correctness of decryptions for challenged ballot

\subsubsection{Verification of Challenged Ballots}

\EGverifBallotrepeat{verif:challengedDecryptWithNonce}{\veriftitleCorrectnessOfDecryptionsChallengedWithNonce}
{\veriftextCorrectnessOfDecryptionsChallengedWithNonce}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\sigma_{i,j}$ & Selection values & \S\ref{sec:selectionencryption}\\\hline
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $\xi_{i,j}$ & Encryption nonces used for selection encryptions & \S\ref{sec:noncegen}\\\hline
        $(C_0,C_1,C_2)$ & Encrypted contest data & \S\ref{sec:decrypt_challenged}\\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.7.a.verif13",
  "text": "TODO: Verification 13",
  "sc": "ace" }

\pagebreak

% xxxx EDROON8H/QAj9F+BqI/Soko0kZfgZNptIkwxKc23oNDDbqKDicPsIuHq9xK0V4iEu08In1pobKXd
% xxxx KfikKWinwVttUISumivyaTx6g/wC0XChDeYQ1Mu3VxbhxVWsCox8IuLhjPr6b3tU1Wzi7LGbl7lF
% xxxx R2mURCD87EMxnFTfwm9UQptFKxG9Owi3kVBdK4LsDGyaUWpRhT+ttposn6HXG980xRJkZe/xVBpa
% xxxx xRMNyv8pm/Djw1x5w06trJ2pj29wcJdzvY4v0bN6/PGdjVotidlJNEPdZgK8ZN3/d9QndSjppcWM
% xxxx ht88sdHRubhbGpW0j091vTnIC7gFGDzM/9Me5dWBAGZ9OgdpWe48iN3SFJrKshE26R8Gy2fu18Ww
% xxxx GeyLTg37nzIU7WyHyMGXLdu4BGL8f6lOK8h0oANtzdE90gb0HneEk4hMlN978Isa4GHtQshs6+xx
% xxxx tlK4HXRKQnWYKsGuKglyZbddmPae87TgkZWhH49UOtyg1wZXnTSmzo4Z+eiBmmRnG/u0Ay5Nf3l9
% xxxx 0ocfh7Q/wfkMrHKM9O3LdB/wK1zIJY/O+xlm+ruMe1pnev6riJceDrjA/bSjOeDSUkax7gKsM8Uk
% xxxx 3BnCon1rN6jl6SkQ8KtztyaHUZ/E3bLicnOmObEyv/lvhWBbswVOeHLi0eFH8nPkYzHaIwlLtjSl
% xxxx 0zPQeFyYEhg/dZDrVFSatBUnXqeSYIiWoO/e/TtsEgKiFM5RSbP327RwsY20fmP2riL72eMJe87g
% xxxx
% xxxx
% xxxx ---- S6.2.7.b.verif14 Verification 14 Validation of well-formedness and content of challenged ballots

\EGverifBallotrepeat{verif:challengedballots}{\veriftitleValidationOfContentOfChallenged}{\veriftextValidationOfContentOfChallenged}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $L$ & Contest selection limit & \S\ref{sec:selectionlimit}\\\hline
        $\sigma$ & Selection value & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.7.b.verif14",
  "text": "TODO: Verification 14",
  "sc": "ace" }

\pagebreak

% xxxx QuoGzxCNfpoecfyb7RYkv3S2s4I1T5BqNHmW9MBQUx+FyY8EMuKQQmVjbIr4ZIe0QciP3VJI2wVZ
% xxxx CTTKdYR23uojhIIL6kAJerKpiFlUans/xKN+3sGEiKw8eQ6vjuXQ+1ahKWkDCMc+MxFV2v3WSSKx
% xxxx +e1HM2OvXKpkcYmbs31Dd0CeNlVV3q2qBzHKZjm3J/C2pWsWKydnbvnVF9ov9wuxduwQtZvTP8l9
% xxxx JXl/IKRbX1zwMQFh6mf05F1ywE3EDgkGRQ7BLjkMVPiGkuwqaWcV+d9n2vrOQQQxAZ3zl4N436X0
% xxxx IcqqmeM+UMfWtHhhimdlIp6FFyWA5yFbYGT9lSMFGBMXkZEI/QM/EKejlYiuWfEjHf5NJHTe45Yb
% xxxx eS/jRXElkFuMhRtXthi0XIozpckWNEtXHbCFDU8AIJpxKpzx1e6Fo6Lri05PHXu81cQbQEOyC2/8
% xxxx J5dXJhbOiFfRRhDXb0cLABj7LAU2ZnIoSUzQ3IHmMuNlmv7cpsH1nKyyJsyYGtHCYoVzy6sBuc/S
% xxxx mfJKjoVXBTUTfezGCeXGUI+t2+wlSQ8oOj+iotsB3XKJAQeXlR76WFDBhRwOUlFNvLjgtQJnKRW5
% xxxx jwpTiRmXPS4IAeqranoF6/l45ObE8wlk76W2gfo6gYvL2bQzvHzJQir/jNvfkwaOnfIWOMo8TndN
% xxxx sMuXttcUCeqbsj9ygujty/UiUvR0Kr6sYhi/QVh5faTR1VIqhaDw4RBCKabQsu2Xkkzj6VtpYrq8
% xxxx
% xxxx
% xxxx ---- S6.2.8.a.verif15 Verification 15 Validation of correct accumulation of selection vectors

\subsubsection{Verification of Pre-Encrypted Ballots}

\EGverifrepeat{verif:PreEncryptedSelLimitGreaterOne}
{\veriftitlePreEncryptedSelLimitGreaterOne}
{\veriftextPreEncryptedSelLimitGreaterOne}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\Psi_{i,m}$ & Selection vector & \S\ref{sec:selectionhash_pre}\\
        $\Psi$	& Accumulated contest selection vector & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.8.a.verif15",
  "text": "TODO: Verification 15",
  "sc": "ace" }

\pagebreak


\EGverifrepeat{verif:PreEncryptedValidationOfTrackingCodes}
{\veriftitlePreEncryptedValidationOfTrackingCodes}
{\veriftextPreEncryptedValidationOfTrackingCodes}

% xxxx KDy4ez+WI9/ZsQ5P7yva0UdYLzor8dsgbnfTCbu6ICbzKiAiwonn1xEwtyWARlmB9Ghmbqb/DUWY
% xxxx pbhPtunTjzaghNZpqqtRtlHxsuQ8RHshs3x7vSkVl2Gtn94rLTlUzGN0b/acOo012mK656rC1az8
% xxxx 4mantitKC/hUbMwZToeoMGVvO5I+WhdeK6bwWrbqj+T+pXTOFKy9HZkpV1Wh/S4rL0/GCNx8+ylN
% xxxx U8VQ7VH/wHq3f+TAxxBb3SMto1TXCNwimOPuH+WClhhmrHEaKgHQ6DEIeEOf73BbtVnd/sZywVrk
% xxxx 3M6pGnrlve+m78sUWtWNs6GGkd67iYXw6KkxHKLqBWSqbnnSsyRts+XGWQF3cJJuOk3A39fevw9m
% xxxx Ln1njm9orqcXj5YcdeFhtmHquKXT6DUDzgx8Zx28IQS3aW8Hcpz9oHwasNcPGrZiyKxt50CKUIkN
% xxxx R4GWX56+QKApadbZT0bBfylfsiQQrpMNyox+aBXyEAK1JRicxvT98EXFkfQY+6n8Rav8M+z1Lkvy
% xxxx KX6SLJ7ziOaPcJMCoShurSXQ3KnCPTCt3rTOHhNpxkydKlG1+F6YzAob8mrPOjQ620EXXD4V87B/
% xxxx +vbo2KEyX//T91fNoYni86w0NAeb0nhav5w56Kq/ul27mNSbc+C10u2YIKqxra3O//6c6lLM/riE
% xxxx kFfEU/Z6gwUEafyWObwbvyQBNCw6VrwvlG49h4CJOloI1jTB0MYcREUXzhJu3SJewrF/9upWxRkE
% xxxx
% xxxx
% xxxx ---- S6.2.8.b.verif16 Verification 16 Validation of confirmation codes in pre-encrypted ballots

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $i$ & Sequence number of selections in the contest & \S\ref{sec:selectionhash_pre}\\
        $\lambda_i$ & Selection label & \\
        $(\alpha_i,\beta_i)$ & Encryption of vote on $i$-th selection & \\
        $\Psi_{i,m}$ & Selection vector & \\
        $\psi_i$ & Selection hash & \\
        $\pi$ & Permutation reflecting sorting in order \\\hline
        $l$ & Sequence number of contests on the ballot & \S\ref{sec:contesthash_pre}\\
        $\chi_l$ & Contest hash of the $l$-th contest& \\\hline
        $\HH_C$ & Confirmation code of the ballot & \S\ref{sec:confirmationcode_pre}\\
        $\B_{C}$ & Chaining field input byte array & \\\hline
        $\HH_{DI}$ & Device information hash & \S\ref{sec:votingdevinfohash}\\
        $S_{\mathrm{device}}$ & Device information string & \\\hline
        $\B_{C, 0}$ & Initial input byte array for ballot chaining & \S\ref{sec:ballotchaining} \\
        $j$ & Sequence number of ballots in the hash chain & \\
        $\B_{C, j}$ & Chaining field input byte array for ballot chaining & \\
        $\ell$ & Sequence number of last ballot in the hash chain & \\
        $\overline{\B}_{C}$ & Closing input byte array for ballot chaining & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.8.b.verif16",
  "text": "TODO: Verification 16",
  "sc": "ace" }

\pagebreak

% xxxx 9SAMMfxGdzG5fOpOQrV2LK6C9erl5SeFlf1DOpbdFvhvO+S0bJVO/HRloD0pIxfzb9tZEW7DuAvq
% xxxx tLI3bfWLkA4M9+T/Z1A8G477vB0nszJ+t2Ue7GcqH9LarSXRyBGY7VUbxY8OdGIWyIj0GLNkfvtW
% xxxx DNOWeGX9NMHSJ0Z4lCQFQyMBsZ0bwaaBtzLaRMXpICizVSO473FhGlsCaGg9TvRTJcDs2dfDJG77
% xxxx yPEtNt0ikprDJQdXmhdwgPVKPdQpGbXc+7kphUHbNn/kNRZ4ptyeKjKGbv9i5snQQbyKZOJ/L5dZ
% xxxx VniPGcxSRCym7VrnkBm2ESkedl0h8VLMrhEfBu8CvHgXOukckvcr0iz8v3FhA3yYFPQpQ147wRnV
% xxxx jUC+P+SVUo7up7NDZyB5LgcUez3FKQvS0ChS3dQcpqob3hOBvKJwium0BI1ZhFy0rhVQo6O15ouk
% xxxx vSA5lcP8QyTNH6UAvO70pxxzZQ8b6bY8THFcAHVqotm7ZEXMZnU9yofuMlPVkTzEMccHwYAEzPro
% xxxx LLpGBpjYM21tddcXEqEnuRb+n43bMZA0H3tswVI65k0MZcI+XfIb61gE3ehj0OBkXzR20Nhlckss
% xxxx ZgCGOa0SnROyj5iE3g4v+e1Tn+KorXrwFZgeo11W2GOc2i2RX0TiDl9Pjz4KnGcEhVavch3M83Xy
% xxxx ohJWT+1fGhH5ERsPU/SUrvnr4kKcE3ijpI6BCpvFoe6sH9erMCIzwg3vgF/8EezZYAwxUqk35p9J
% xxxx
% xxxx
% xxxx ---- S6.2.8.c.verif17 Verification 17 Validation of short codes in pre-encrypted ballots

\EGverifBallotrepeat{verif:PreEncryptedValidationOfShortCodes}
{\veriftitlePreEncryptedValidationOfShortCodes}
{\veriftextPreEncryptedValidationOfShortCodes}


{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $\psi$ & Selection hash & \S\ref{sec:selectionhash_pre}\\\hline
        $\omega$ & Short code of selection hash & \S\ref{sec:shortcodes_pre}\\
        $\Omega$ & Hash trimming function & \\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.8.c.verif17",
  "text": "TODO: Verification 17",
  "sc": "ace" }

\pagebreak

% xxxx d4r9QPf5QUlw4EkkCQ7lJbWJowjVJg0J/k0m4wlNvMi0vayIoW/SHfM+hGonG1Nei+Ubwc/NkKyA
% xxxx ytRJYogCdgkWGOWIeGAzVwyYrmBlJe9L5GU0/nKr3jWUJhwpkbtGKtobpoBW8prBi96R4BcmroZw
% xxxx JPh8Y4s11cn95NBOI09bCoMkYcmY1gKYIgNzPR4Lu1DG5MsyrH0WTHBXgZxLTgAgCOg/adFW8NEB
% xxxx 9/xkzRH4lncwKCrrhF1cfcupXDMkyaO9+/b98pImCPuHYzivHQmmApGhC9qBccUVbmG9q5RszPOb
% xxxx 2PibGGDqsxHKz9hbuorTfdqTL3eMFbGXrWdSkgMIFMJV5+VoXEF2FdYS6rOIvW0l0kSYYb8X+wQ7
% xxxx zlbo+mcCKlezozeBc6Mo3GSevHR0Lv57wTZ3gMtOlYfuGO1ehxxHImGqVmNPmlhK7w9Fx4+R6EHF
% xxxx a2gPGJWwOofd954VAJH4vcIig32TWjNdRc7gOjvzH9uDcoLnWqIR5krKIqRMJ4J6x3BHEY9gZQQP
% xxxx +ms7R1hLuvF2wIcgawmtdwFj8SA5SkmazWu1Dll3GHghN+NGT3aWGjIQYtIJEf+4yVsboLCWqpVU
% xxxx i2XP9N5QcSjMGWyUCCWcgRKRP7m16AoCqcbLTpZajTj57IGU3awgcidm/nCdjsyOD77aDgrKW2Dd
% xxxx Cgd2pRJOT/fiZc+xkKUPcJmRx4VJWufqw7c76X8U2szTe+3AMDCymdgA8oGwwlYwSdHCNuR0Qedq
% xxxx
% xxxx
% xxxx ---- S6.2.8.d.verif18 Verification 18 Correctness of encryptions for uncast pre-encrypted ballots

\EGverifBallotrepeat{verif:PreEncryptedValidationUncast}
{\veriftitlePreEncryptedValidationUncast}
{\veriftextPreEncryptedValidationUncast}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X|l}
        \toprule
        variable & description & \\
        \midrule
        $p$	& 4096-bit prime modulus & \S\ref{sec:parameters}\\
        $g$	& Generator of subgroup of $\Z_p^*$ of order $q$ & \\\hline
        $K$ & Joint vote encryption public key	& \S\ref{sec:keygendetails}\\\hline
        $\HH_I$ & Selection encryption identifier hash	& \S\ref{sec:identifier}\\\hline
        $\psi_{i,j}$ & Selection hash & \S\ref{sec:selectionhash_pre}\\\hline
        $l$ & Sequence number of contests on the ballot & \S\ref{sec:contesthash_pre}\\
        $\chi_i$ & Contest hash of the $i$-th contest& \\
        $\pi$ & Permutation reflecting sorting in order \\\hline
        $\HH_C$ & Confirmation code of the ballot & \S\ref{sec:confirmationcode_pre}\\
        $\B_{C}$ & Chaining field input byte array & \\\hline
        $\xi_{i,j,k}$ & Encryption nonce & \S\ref{sec:noncegen_pre}\\
        \bottomrule
    \end{tabularx}
}

% xreqj {
  "section": "S6.2.8.d.verif18",
  "text": "TODO: Verification 18",
  "sc": "ace" }

\pagebreak

% xxxx A7O5J+RWIb2cIpokB0A8Da1+8PlaUFpfn/RLT0hEHl1a8U1CcqU9RiRMwo/jiub59S6xLuAbWbrT
% xxxx wI6yF9R0WOq38B2W097y5yujg+rj/ZNxVwCu9nh5ZitJ/7F3U+NSWqsu87C7vHxIvuFhge5urb3p
% xxxx ikUgKwrUCrCblKWgh7j/cPULBtfvcsxTBxVZmbuta4nd17tILX/a/yj0r57StnEUWN6lGV8c++qQ
% xxxx D/9gHGAo8wDtbcr2fkfut5i2VxfJpDFSzvL8t+rquIxCkaikk3ByqfdRI0y8b3kNpLDKYQ4Tw/5q
% xxxx WTvmWuXpe0Xmh+8BVUsZaLm5twO+SsPQ31/EucSjB5+ZQyvn19NqZCPyeKxg47AoaqOsWP29RB0h
% xxxx eA7E5WmHoM4lIwKhB5x0EgMztEPyi+FkStffBo4kRr+qVzBwqWoIzzd4uPHEYIytDjQmP7SD9Fav
% xxxx G5iueIcTj/004j3EMwV9qJRdQrC3svWeqLel3rEsnGqO1xYP6768fu3qzh92b/XB8sHOQyo7Ss3v
% xxxx 2dSRD/s0HUzWz4VxjtnXiMZp5icdB/cXw9IMY6eCVCbjEmfjWalPv/rY0OKgNZ9HOiJxG2s8DDM3
% xxxx xJNsiYGXFXXJjLrtroTnGvSaw5gKAzS3qS+qNPtbzjXIau4p+BvxqDK2LfdKfpmb11vYgoAKOaUy
% xxxx 5bDQREM5IzEsOemIIlw3j7mW1zrKDXaEscvP7nwjzT2TggYOAEbZO54A2pEZukGOkAADt75z+vuN
% xxxx
% xxxx
% xxxx ---- S6.2.8.e.verif19 Verification 19 Validation of content of uncast pre-encrypted ballot

\EGverifBallotrepeat{verif:PreEncryptedValidationOfContentUncast}
{\veriftitlePreEncryptedValidationOfContentOfUncast}
{\veriftextPreEncryptedValidationOfContentOfUncast}

% xreqj {
  "section": "S6.2.8.e.verif19",
  "text": "TODO: Verification 19",
  "sc": "ace" }

\pagebreak

% xxxx 0f1QiTiCUFOkkQs1kVK8jGL8gZs4wYPYyUxf30BgxofOBFfVl3jA8wK5hE6KH67dk0KxrKkafC5A
% xxxx eOxQ5+dGy6LVmHKgeGSJzE+102OE0DG3+6W1vIRQYNwQHmm/awpi0pmyumvVRUGLosK9DbCWaXnD
% xxxx JAVOdCK1fZLOSrG5jAhPHwGzWShktI4H6kmkujU5sPuY/KReCHI7gEbqu3zh/PK12W3/C42DRBKH
% xxxx gvx3cZuXKEsb8Fpxh9/SoE1mol7li1QgBuomxb/Od2DBFFIcWrWzNOVCYLn6/S5SJMDWqSod2+G7
% xxxx 0jQ3Q8YqVX1owgSXTrNWCHXH/xCA6K317JlZJUTkD5P1+KogTuOW1dGIesq8998VtRjd38I2WG4R
% xxxx YB/6EltXl2P9SUXOpIqZYWF1cbi4VrGbwa/Amz0Gwbf/Er6N3+yA5chGBoNlqjI8S33TuUF0e8Rz
% xxxx df0UwleGGICWrPY7h3wnvh6M++qvQUN3YHr30HFVXRytq2oROZwntzmiG0wt30WueBeie8MsdMQ+
% xxxx 0/tibbFBsdINoXYH2FDxmyTxUq4v/7f+NzKholENHKXwidDc530dHr2HhgaWVfiqmHaB8s3ODao9
% xxxx LxaiMVx5QE42TKw+ZB5WqY/QhQnV62KI2YplEtxvNxd5E3hzgdetJAKXGqu5VKyNzfEdg0WviMYE
% xxxx rTKPvsUloK61nj+QpRLqHVMs5+GBGYNxRGKUWJhrAZt2qB6SyEa+JTCO6gN7Gj7vO5g93C9HrXJa
% xxxx
% xxxx
% xxxx ---- S7 Applications to End-to-End Verifiability and Risk-Limiting Audits

\section{Applications to End-to-End Verifiability and Risk-Limiting Audits}
The methods described in this specification can be used to enable either end-to-end (E2E) verifiability or enhanced risk-limiting audits (RLAs). In both cases, the ballots are individually encrypted and proofs are provided to allow observers to verify that the set of encrypted ballots is consistent with the announced tallies in an election.

In the case of E2E-verifiability, voters are given confirmation codes to enable them to confirm that their individual ballots are correctly recorded amongst the set of encrypted ballots.  In the case of RLAs, encrypted ballots are randomly selected and compared against physical ballots to obtain confidence that the physical records match the electronic records.

To support enhanced risk-limiting audits (RLAs), it may be desirable to encrypt the ballot nonce of each ballot with a simple administrative key rather than the “heavyweight” ballot data encryption public key. This streamlines the process for decrypting an encrypted ballot that has been selected for audit. It should be noted that the privacy risks of revealing decrypted ballots are substantially reduced in the RLA case since voters are not given confirmation codes that could be used to associate them with individual ballots.  The primary risk is a coercion threat (e.g., via pattern voting) that only manifests if the full set of ballots were to be decrypted.

While the administratively encrypted nonce can be stored in an electronic record alongside each encrypted ballot, one appealing RLA instantiation is for the administrative encryption of a ballot's nonce to be printed directly onto the physical ballot.  This allows an RLA to proceed by randomly selecting an encrypted ballot, fetching the associated physical ballot, extracting the nonce from its encryption on the physical ballot, using the nonce to decrypt the electronic record, and then comparing the physical ballot contents with those of the electronic record.  A malicious actor with an administrative decryption key would need to go to each individual physical ballot to obtain the nonces necessary to decrypt all of the encrypted ballots, and the access to do so would enable this malicious actor to obtain all of the open ballots without necessitating the administrative decryption key.

If E2E-verifiability and enhanced RLAs are both provided in the same election, there must be separate ballot encryptions (ideally, but not necessarily, using separate election encryption keys) of each ballot. The E2E-verifiable data set must be distinguished from the enhanced RLA data set.  Using the same data set for both applications would compromise voter privacy for voters whose ballots are selected for auditing.

% xnote S7 DEFERRED xreq S7 EGRI supports operation in an "RLA Mode".
% xnote S7 DEFERRED xreq S7 EGRI in RLA Mode allows to encrypt the Ballot Nonce of each ballot with a Simple Administrative Key rather than the “heavyweight” Ballot Data Encryption Public Key.
% xnote S7 DEFERRED xreq S7 EGRI in RLA Mode the Simple Administrative Key may be symmetric.

% xtodo S7 TODO: Consider any special features which may be needed for RLAs

% xxxx l2/kCHJykiUlr2r2xQIGaWG/04YRJBvZYq/2yeBGvYet2cSWsybRh1h/DC0o/wwWrkM+Hxxls/Uy
% xxxx EJrfy1aHfk+4AoEKwU0b6WMyhS1Owlva+T1EL/JhbD/3MqHLql59Gs5BuetPGcZrZBtf+EtKL82y
% xxxx UZI3DnTfdqsVUCdfbzRTbxI2ZHVCmwjSeVxKA4vmw9EJvhQ2Rrj+ui5x3hhTzwk+zN2/zMQO/2uv
% xxxx mA5USxFNHiOPDnet329Z+iJZANId2DoHqD4CgqGB3EBRkRlYmBNU9yi7iLHXll0RzcixNDM9piGn
% xxxx 8at0wDi6tUgcSe6bCA8e9Rce0ZuNNGmPpemkkjSz9LiHp6Bnau+qSWLkt3rdOluSe9xUobq/Z248
% xxxx bPG3Kret5D0tN+JsXok+EIv04Be8dujM0j0NkLj3A1NPl7I+zhgYX45Itz/vF/ozij8JrMKvXGTv
% xxxx H4egmLVgDTWnbbXXa+AQ68mYDiAdIt/yH/x59qd73WawYxGk8bQVZeagIqVIbsFujTtWXoDTh48W
% xxxx eQQh/BVYLL0UlKj+fO4+6Y3vdM/TezhRUHBDoBH1v+Px8NwlBODXyKYaM3XEX/h3pIBSFekNQK7N
% xxxx Qm3aJDZEgF8yzyNU8j6NxJthNgFHdGk4fU0gSW1RrrKTG75D5SVHSIPm8YLMKtFONE3XU5800hXv
% xxxx qF0faSRBu/JOY8UQ2HfxJQ6Fa7gNdIm7UBMCcZP8io5ZUxT+pPw8FB6aaOnefryoDDrBiDvQJOL7
% xxxx
% xxxx
% xxxx ---- S8 Acknowledgments

\section*{Acknowledgments}
\addcontentsline{toc}{section}{Acknowledgments}
The authors are happy to thank Eion Blanchard, Ale\v{s} Bizjak, Nicholas Boucher, John Caron, Henri Devillez, Joey Dodds, Felix Doerre, Gerald Doussot, Aleks Essex, Keith Fung, Rainbow Huang, Chris Jeuell, Anunay Kulshrestha, Moses Liskov, Shreyas Minocha, Arash Mirzaei, Luke Myers, Karan Newatia, Thomas Peters, John Ramsdell, Marsh Ray, Dan Shumow, Vanessa Teague, Aaron Tomb, Daniel Tschudi, Daniel Wagner, Jake Waksbaum, Dan Wallach, Matt Wilhelm, and Greg Zaverucha for many helpful comments and suggestions on earlier versions of this specification.

\pagebreak

% xxxx 9b10NggJgBNu6DWVsMdXz8YF4Q3V3rYAtw8EigIBGYmvr+P1GOd9biRtOE5EFqoDvTXCNCFPX2b4
% xxxx DnCUdN0q+Q1XaA+dp/SQicmRL/OyyeKb3IG68iDDasSaEfWcAjAOo5fjv6/sKEc8CyorvH7vEaRZ
% xxxx ioIEVQW3/R2CC0fgUDSDfP0qLy+sZZq2EvL6HW4Q8cBLKAwA7ghTJNq2VRdab8qlC86xMOksTbHZ
% xxxx b2eJMT1PknS2t19dKnu36ImoACrVZH0j3SamK4U+xHtUfW/Xk05yT5rVs2tlryTS0Qg8MXYCBEm5
% xxxx RDwkPOGMyuiRFyUoH4Fb/qjnIwKf29x7hA4guyUqeprDdIB97xDQA5JuqgdHCFADUw8OPsE/RADJ
% xxxx hRxauW5LENpv+/HkTrv6eCvK8N5gABewWvpt/xO1r5DsGSZ8GBrYhsV9hGIEu+VBc6napvc7qTHn
% xxxx ih+mxousYhapC4Ua7iFcnDH/1QOkkfulfTP67Q0CVqbysuqQm1wOGnLzu3gzomlVuBX0UoUzPJYf
% xxxx SPVOG53rz6E852iOfnImgXN5UUET8U/JTUbWGtfeVwdkMto+RjLYrkhih73r0lNMDHM+ZHgPuq1d
% xxxx awvGbbuOLA/DFin3k6UUt3r7Cm2u5IfkzY/JiXf0MIMsIrmvOhvUgZjpufcPpMSb+yFTEr/0o/3i
% xxxx DHGaJO7l+okBznhEH5ZZwndx6l3dZ1v0veDodK5ZLC0mwF1BXZcdRCCqIxuz/I95fcGPeWeXLDVp
% xxxx
% xxxx
% xxxx ---- S9.a Appendix: Other Parameters

\section*{Appendix}
\addcontentsline{toc}{section}{Appendix}

% xxxx AW7Tp6AXvH2xVav4i57UWl16YEBQneBSc6SdFxpQ2tYT7hLxrXxCzBJ3JAPIHfkiFJDCBwLNJEct
% xxxx cyhxeraHvV6+WC2wEAEHsvG9wziUvY6ZM0ysZyCWSrfGLInOd+igSlPxOQNXBJeIM6gnv3jLvUoQ
% xxxx Br2EU/G7jaLgBmzn3sJ7h9hpYJyt89pF8HE5jURDhXgAVadVjPdglkWrjAxUbiuZmdCTeNmEszRN
% xxxx 7D9GUV4jAfk/0IWoxXh7JMUpUQxXc4r/Tfg7psAjmwNAlkaad4OfUHIV1MC9J00SYKvkMjqpDE8f
% xxxx Dp6LeHTqsmqSjaGlOIZRlxBpU2aJhrjfB5LpYeP1MtopqeeL2ZYZmmf4OMpnuLZTxu515lHh+mHa
% xxxx 8gSefLrSrqCUQe0QytyyWrbZPqiY7fyMN+pQkEsdCVDWJ9PzaCZLQW5PDKf6NB6Wpg28MM1LZP2a
% xxxx FO0jlNnNpc52WNEkG8N4ej0iLup72bmFHE5+BabB/8XAO1wZqcbj/ox5pdLTScpB/44sHhea65mY
% xxxx 8Q0o/mCxAtOyNkOXMfXHzhBFmpkCKe3swuIVEOL7LNv62myJTihFoHSl60S0WRSfNTWNlHyGxv0B
% xxxx H63vLZtS0Yasapau8TVzE91uL5nFx3srooyAF5RF8kqh31pPudNAyR+BuK0cxRZjb53Rvp6DjztO
% xxxx 0VIDzC03Z4Unbnm2fJj1eRw1L7F7EP915uI63qj+5fsGM0dDel/zN0gNHKWrXubS4I9G4qDiskCa
% xxxx
% xxxx
% xxxx ---- S9.b Appendix: Reduced Parameters - Using a 3072-Bit Prime

\subsection*{Reduced Parameters---Using a 3072-Bit Prime}
\addcontentsline{toc}{subsection}{Reduced Parameters---Using a 3072-Bit Prime}
Starting from the same 256-bit prime $q = 2^{256}-189$ for the group order, the procedure outlined in Section~\ref{sec:parameters} on the standard baseline parameters can be used to find a 3072-bit prime $p_{3072}$. This results in the following parameters that are provided here as an alternative. The parameters satisfy all the same requirements, but the smaller prime offers faster arithmetic in the base field and thus improved performance. This comes at the cost of a somewhat lower security level.

When using the reduced parameters in this section, the number of bytes needed to represent integers modulo $p$ is $l_p=384$ instead of $512$ for the standard parameters. This means that when interpreting integers modulo $p$ as byte arrays for hashing as described in Section~\ref{sec:hashinputdata}, representations will have exactly $l_p=384$ bytes and are thus shorter than for the standard parameters.

The prime $p_{3072}$ is given as
$p_{3072} = 2^{3072}-2^{2816}+2^{256} (\lfloor 2^{2560} \mathrm{ln}(2)\rfloor+\delta_{3072}) + 2^{256} - 1$
with
{\small
$$
\delta_{3072}=298707407953437995876300625370749906325322663598036756391867662926569213935809577593.
$$
}
The hexadecimal representation of $p_{3072}$ is as follows.
{\allowdisplaybreaks
\begin{align*}
  p_{3072} \ = \ \mathtt{0x}
  & \mathtt{FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF}\\
  & \mathtt{B17217F7\ D1CF79AB\ C9E3B398\ 03F2F6AF\ 40F34326\ 7298B62D\ 8A0D175B\ 8BAAFA2B}\\
  & \mathtt{E7B87620\ 6DEBAC98\ 559552FB\ 4AFA1B10\ ED2EAE35\ C1382144\ 27573B29\ 1169B825}\\
  & \mathtt{3E96CA16\ 224AE8C5\ 1ACBDA11\ 317C387E\ B9EA9BC3\ B136603B\ 256FA0EC\ 7657F74B}\\
  & \mathtt{72CE87B1\ 9D6548CA\ F5DFA6BD\ 38303248\ 655FA187\ 2F20E3A2\ DA2D97C5\ 0F3FD5C6}\\
  & \mathtt{07F4CA11\ FB5BFB90\ 610D30F8\ 8FE551A2\ EE569D6D\ FC1EFA15\ 7D2E23DE\ 1400B396}\\
  & \mathtt{17460775\ DB8990E5\ C943E732\ B479CD33\ CCCC4E65\ 9393514C\ 4C1A1E0B\ D1D6095D}\\
  & \mathtt{25669B33\ 3564A337\ 6A9C7F8A\ 5E148E82\ 074DB601\ 5CFE7AA3\ 0C480A54\ 17350D2C}\\
  & \mathtt{955D5179\ B1E17B9D\ AE313CDB\ 6C606CB1\ 078F735D\ 1B2DB31B\ 5F50B518\ 5064C18B}\\
  & \mathtt{4D162DB3\ B365853D\ 7598A195\ 1AE273EE\ 5570B6C6\ 8F969834\ 96D4E6D3\ 30D6E582}\\
  & \mathtt{CAB40D66\ 550984EF\ 0C42A457\ 4280B378\ 45189610\ AE3E4BB2\ 2590A08F\ 6AD27BFB}\\
  & \mathtt{FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF\ FFFFFFFF}
\end{align*}
The hexadecimal representation of the cofactor $r_{3072} = (p_{3072}-1)/q$ is shown below.
\begin{align*}
  r_{3072}\ = \ \mathtt{0x01}\
  & \mathtt{00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 00000000\ 000000BC}\\
  & \mathtt{B17217F7\ D1CF79AB\ C9E3B398\ 03F2F6AF\ 40F34326\ 7298B62D\ 8A0D175B\ 8BAB857A}\\
  & \mathtt{E8F42816\ 5418806C\ 62B0EA36\ 355A3A73\ E0C74198\ 5BF6A0E3\ 130179BF\ 2F0B43E3}\\
  & \mathtt{3AD86292\ 3861B8C9\ F768C416\ 9519600B\ AD06093F\ 964B27E0\ 2D868312\ 31A9160D}\\
  & \mathtt{E48F4DA5\ 3D8AB5E6\ 9E386B69\ 4BEC1AE7\ 22D47579\ 249D5424\ 767C5C33\ B9151E07}\\
  & \mathtt{C5C11D10\ 6AC446D3\ 30B47DB5\ 9D352E47\ A53157DE\ 04461900\ F6FE360D\ B897DF53}\\
  & \mathtt{16D87C94\ AE71DAD0\ BE84B647\ C4BCF818\ C23A2D4E\ BB53C702\ A5C8062D\ 19F5E9B5}\\
  & \mathtt{033A94F7\ FF732F54\ 12971286\ 9D97B8C9\ 6C412921\ A9D86797\ 70F499A0\ 41C297CF}\\
  & \mathtt{F79D4C91\ 49EB6CAF\ 67B9EA3D\ C563D965\ F3AAD137\ 7FF22DE9\ C3E62068\ DD0ED615}\\
  & \mathtt{1C37B4F7\ 4634C2BD\ 09DA912F\ D599F433\ 3A8D2CC0\ 05627DCA\ 37BAD43E\ 64CAF318}\\
  & \mathtt{9FD4A7F5\ 29FD4A7F\ 529FD4A7\ F529FD4A\ 7F529FD4\ A7F529FD\ 4A7F529F\ D4A7F52A}
\end{align*}
And the generator $g_{3072}=2^{r_{3072}} \bmod p_{3072}$ has the following hexadecimal representation.
\begin{align*}
  g_{3072}\ = \ \mathtt{0x}
  & \mathtt{4A1523CB\ 0111B381\ 04EBCDE5\ 163F581E\ EEDD9163\ 7AC57544\ C1D22832\ 34272732}\\
  & \mathtt{FF0CD85F\ 38539544\ 3F573701\ 32A237FF\ 38702AB0\ 37F35E7C\ 7003669D\ 83697BA1}\\
  & \mathtt{3BED69B6\ 3C88BD61\ 0D33C6A8\ 9E4882EE\ 6F849F05\ 06A4A8F0\ B169E5CA\ 000A21DC}\\
  & \mathtt{16D7DCEC\ C69E593C\ 65967739\ 3B6CE260\ D3D6A578\ E74E42A1\ B2ADE1ED\ 8627050C}\\
  & \mathtt{FB59E604\ CAC389E9\ 9161DA6E\ 6E9407DF\ 94517864\ 01003A8B\ 7626AC5E\ 90B888EA}\\
  & \mathtt{BB5E07E9\ 96B18662\ 9B17165F\ D630E139\ 788F674D\ FF4978A6\ B74C6D02\ 0A6570CC}\\
  & \mathtt{7C7A9E38\ 21283571\ BA3FA1FC\ C6901A8C\ 28D02EF8\ B8C4B019\ F7DDADE5\ 1A089C57}\\
  & \mathtt{EF90C2CE\ 50761754\ D778BC9A\ BFD84809\ 5C4A0ED0\ FA7B7AE5\ 2CDA4BD6\ E2CB16F3}\\
  & \mathtt{8EDC033F\ 32F259C5\ 13DD9E0D\ 1F780886\ D71D7DB8\ 35F3F08D\ B11CC9CD\ 41EB0D5A}\\
  & \mathtt{37AC6DBA\ 1A1EBA55\ C378BC06\ 95B9D93A\ A59903EB\ A1CE5288\ 6A0BAAFB\ 15354863}\\
  & \mathtt{1BCEAC52\ 07B97205\ BE8FDF83\ 0F27348C\ 7AE852F9\ F8876887\ D23B8054\ A077DC8A}\\
  & \mathtt{EC0BF615\ A1FA74BC\ 727014CF\ AC40E20E\ A194489F\ 63A6C224\ 27CB999C\ 9D04AA61}
\end{align*}
}

% xxxx re95j2+rpLWCQ3oY8faHB85Y7Hurhh9j6jWUge3DZbBYsvKBBs5POMulXbIUT2Am6bt5ZEAx8u3z
% xxxx +XF5RYyFqoSoSFuJ64xxkYcZ0RPKK2u83/j77YOGJ5qgSLHxfXKfGuo0juT3p9nuqOoQgwJMqQuV
% xxxx erOBlOcQq1HU/KranCDAQ3IjAdnrirOjJ7EbDYgwcuTCescg1W0xQuxT59HpCvbKm5IzQPVwy2Rj
% xxxx G36Uf8c2lhMgTz53xKOw15JHlrWT+Sc1mngp+a/ngMEIin8nFk1TseZQdD/HaELN9ZuHdXdaEBPM
% xxxx djBOvYAXEuXwDrzZPBBDnGOCnDOnuxXkP72KNZA7S0zIM9hgKiogiMK1GRfGrVmU2aWnIGPpPydD
% xxxx 5fDHR1nYtaTWOBvqYhpibSVqUNUSgr/nM6xXHYPrapOhbrnEKXPbAw2T43ENU1n9WMgBrA6iwbvZ
% xxxx 4o+YzyTuYmIoDCtCMDzpJYn8YWA0AXXLxInxIFqmb3fj2j5SqxG9Bw/o0zo3AzV3exdkUyPcWZSF
% xxxx 3aqel/lyw5FtzxBKV28Nepjv8pYe67RqrsIHxHlX2ORrYs4I/7nAnVXVr5KOIj580LP3CsPO6cuO
% xxxx gh8o1zGXb9+medr/3+pJuWc0gVQK9lQeFNcmPDe3kU942wFFS6xY7nLIyv3hClIDvUAZvcQt/czM
% xxxx BYrvxG4gXXX3xlJelZw1MLwkb1ice1zdWYnmwirZXg5aQnjG5A3cn20WXyPi7lbfse4Iskq3nq3F
% xxxx
% xxxx ---- S9.c Appendix: Reduced Parameters Toy Parameters for Testing Purposes Only}

\subsection*{Toy Parameters for Testing Purposes Only}
\addcontentsline{toc}{subsection}{Toy Parameters for Testing Purposes Only}
The following parameter sets are provided for testing purposes only and must not be used in any real-world scenario. The involved primes are too small to provide any security at all.

\begin{itemize}
\item 7-bit $q$, 16-bit $p$
\begin{align*}
  q & = 127 = \mathtt{0x007F},\\
  p & = 59183 = \mathtt{0xE72F},\\
  r & = 466 = \mathtt{0x01D2},\\
  g & = 32616 = \mathtt{0x7F68}
\end{align*}
\item 16-bit $q$, 32-bit $p$
\begin{align*}
  q & = 65521 = \mathtt{0xFFF1},\\
  p & = 4214179679 = \mathtt{0xFB2B\ 475F},\\
  r & = 64318 = \mathtt{0xFB3E},\\
  g & = 496451214 = \mathtt{0x1D97\ 3E8E}
\end{align*}
\item 16-bit $q$, 48-bit $p$
\begin{align*}
  q & = 65521 = \mathtt{0xFFF1},\\
  p & = 281010572049407 = \mathtt{0xFF93\ DF53\ 3BFF},\\
  r & = 4288862686 = \mathtt{0xFFA2\ D9DE},\\
  g & = 109132885510074 = \mathtt{0x6341\ 7ADF\ C7BA}
\end{align*}
\item 24-bit $q$, 64-bit $p$
\begin{align*}
  q & = 16777213 = \mathtt{0xFFFFFFFD},\\
  p & = 18444843247520538623 = \mathtt{0xFFF93F35\ 6A395FFF},\\
  r & = 1099398526294 = \mathtt{0x000000FF\ F9423556},\\
  g & = 14757355607624201864 = \mathtt{0xCCCCA8BC\ C08F3688}
\end{align*}
\item 32-bit $q$, 96-bit $p$
\begin{align*}
  q & = 4294967291 = \mathtt{0xFFFFFFFB},\\
  p & = 79227651399410325621583970303\\
    & = \mathtt{0xFFFF93C4\ 6882B6AA\ F57CFFFF},\\
  r & = 18446625091983808922\\
    & = \mathtt{0xFFFF93C9\ 6880999A},\\
  g & = 60786014689883675535506158858\\
    & = \mathtt{0xC469034B\ 2CE5EC6E\ 1970350A}
\end{align*}
\item 32-bit $q$, 128-bit $p$
\begin{align*}
  q & = 4294967291 = \mathtt{0xFFFFFFFB},\\
  p & = 340282366887442052436576802921059975167\\
    & = \mathtt{0xFFFFFFFF\ 93C46B0F\ B6C381D8\ FFFFFFFF},\\
  r & = 79228162598699067120922761626\\
    & = \mathtt{0x00000001\ 00000004\ 93C46B26\ 9999999A},\\
  g & = 55628101181055236817878380639043675517\\
    & = \mathtt{0x29D99524\ 0DFB12B3\ 6FD0F8CC E06B657D}
\end{align*}
\item 48-bit $q$, 192-bit $p$
\begin{align*}
  q & = \mathtt{0x0000FFFF\ FFFFFFC5},\\
  p & = \mathtt{0xFFFFFFFF\ FFFFFFFF\ 9ECB7796\ 49D9A82D\ FFFFFFFF\ FFFFFFFF},\\
  r & = \mathtt{0x00010000\ 0000003A\ FFFF9ECB\ 852F49C3\ 4115B1E6},\\
  g & = \mathtt{0x0B5DA090\ 0B367E3C\ 92A11019\ 54DB5E3C\ 873E929A\ 0E324F00}
\end{align*}
\item 64-bit $q$, 256-bit $p$
\begin{align*}
  q & = \mathtt{0xFFFFFFFF\ FFFFFFC5},\\
  p & = \mathtt{0xFFFFFFFF\ FFFFFFFF\ 93C467E3\ 7DB1212B\ 89995855\ 493FF059\ FFFFFFFF\ FFFFFFFF},\\
  r & = \mathtt{0x00000001\ 00000000\ 0000003A\ 93C467E3\ 7DB12EAB\ 97DD49C3\ 4115B1E6},\\
  g & = \mathtt{0x3B543166\ 9E3E4893\ DF745C67\ CDCFD95C\ CDDA2248\ 78A3CD5D\ 3226F75C\ C5A95638}
\end{align*}
\end{itemize}

\pagebreak

% xxxx E2Q3ZmtUUVBmwt5zzSesv/UYAgve4BFLSjcVKufIR1ZAHSaiyj8vbzaoexqrc5iNTHAvrmcG8C8W
% xxxx 2rNMO/LAybt+ARFBJth6tehaX+dxznApOw34YMbG7DnhlkeD3sADboXCcTLQw2DuSYbkFc+3WlJq
% xxxx o2yQmHMt6WMiB14EhLXlAY3qYkSdf1H9mSQ+NPN2n6YG5wZaMZ2QIN4zeGqqHncTmAaMXnDwZRIf
% xxxx d1bf54KohiVbV1busgD7eecQoS5H0C7WxptesxBgcROfAK8cG4DJ91Xms1GzXqVOtQny51x7sFb7
% xxxx XTq9VNr1TLyxgI1IWN5uJdPuvpUJzHTk36+W+xOSFf5rymX5Dq+JKMqzoIBc/KomxvZVrISB6ZJ4
% xxxx nLfd8ePgDEM9DbD6jI8Tx27ls733HDwdobJsR8zB1LJSuiOWlQRKMNJGMO5YmDwuUOWAt73Kqycg
% xxxx zSoKlx5QEZ+lNYN9yIsIesJbo8xR20HZ6lCXQkLUajBbStdKiomgpZGXgTfIjw/uexWDrkI2ChaB
% xxxx +4dGJbrgC6J2BPlyZTvF8uC1Tt/2JlP1qU1+C2sDMh81S4+82zUuWxYvKQF1qo5mfJ8whqRDN1iz
% xxxx US0gbYaP7uirN3ppnOdctvpv7/U29p7LzxQFq9eNYRqcHb2GJ02jGcatmV2+ZII1R/5KjGOl8eoV
% xxxx lC0Micb4K9u0JrhLKKFb8ylvcj3UTvWDollsLrgtVUgRAjtdZczXwjZA4UhWI4bh6pEg/6At1f99
% xxxx
% xxxx
% xxxx ---- S9.d Appendix: Glossary of Typical Variable Usage

\subsection*{Glossary of Typical Variable Usage}
\addcontentsline{toc}{subsection}{Glossary of Typical Variable Usage}

{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X}
        \toprule
        variable & description \\
        \midrule
        $(a,b)$, $(a_i, b_i)$ & Commitments to an encryption \\\hline
        $(A,B)$ & Aggregation of multiple encrypted votes \\\hline
        $a_{i,j}$, $\hat{a}_{i,j}$ & Polynomial coefficients of secret polynomials of guardian $G_i$ \\\hline
        $\mathrm{b}_i$ & Bytes  \\\hline
        $B$ & Ballot \\\hline
        $\mathrm{B}$, $\mathrm{B}_i$ & Byte arrays \\\hline
        $c$, $c_i$, $c_{i,j}$, $\hat c_{i,j}$, $\bar c_{i,j}$ & Challenge values \\\hline
        $C_i$ & Ciphertext components \\\hline
        $d_i$ & Commitment of guardian $G_i$ to decryption proof commitments \\\hline
        $D$, $D_i$ & Contest data field and components \\\hline
        $E_i$ & Encryptions, ciphertexts \\\hline
        $G_i$ & Guardians \\\hline
        $g$ & Generator of order-$q$ group of $\Z_p^*$ \\\hline
        $h$ & Encryption key \\\hline
        $H$ & Hash function \\\hline
        $\HH$ & Hash value \\\hline
        $i,j$ & Index values \\\hline
        $id_B$ & Selection encryption identifier \\\hline
        $k$ & Decryption threshold \\\hline
        $k_i$ & Encryption and MAC keys \\\hline
        $K$, $\hat K$ & Joint vote encryption and joint ballot data encryption public keys	\\\hline
        $K_i$, $\hat{K}_i$ & Public keys of $i^\mathrm{th}$ guardian \\\hline
        $K_{i,j}$, $\hat{K}_{i,j}$ & Public commitment to polynomial coefficents $a_{i,j}$ and $\hat{a}_{i,j}$ \\\hline
        $l$, $\ell$ & Index values \\\hline
        $L$ & Selection or range limit \\\hline
    \end{tabularx}
}
{\centering
    \renewcommand{\tabcolsep}{5pt}
    \renewcommand{\arraystretch}{1.5}
    \begin{tabularx}{\textwidth}{c|X}
        \toprule
        variable & description \\
        \midrule
        $m$, $m_i$ & Messages \\\hline
        $M$ & Exponentiated decryption \\\hline
        $M_i$ & Partial decryption of $i^\mathrm{th}$ guardian \\\hline
        $n$ & Number of guardians \\\hline
        $p$	& Large prime modulus \\\hline
        $P$, $P_i$ & Polynomials for secret sharing \\\hline
        $q$	& Small prime order of subgroup of $\Z_p^*$ \\\hline
        $r$	& Cofactor of $q$  in $p-1$ \\\hline
        $R$ & Range limit or option selection limit \\\hline
        $s$ & Secret election key \\\hline
        $s_i$ & Secret guardian keys \\\hline
        $S$ & Encoded selection value \\\hline
        $t$ & Tally value \\\hline
        $T$ & Encoded tally value \\\hline
        $u_i$, $u_{i,j}$, $\hat u_{i,j}$, $\bar u_{i,j}$ & Random values in proofs \\\hline
        $v_i$, $v_{i,j}$, $\hat v_{i,j}$, $\bar v_{i,j}$ & Proof response values \\\hline
        $w_i$ & Lagrange coefficients \\\hline
        $W_i$ & Ballot weights \\\hline
        $x$ & Polynomial indeterminate \\\hline
        $z_i$, $\hat{z}_i$ & Guardian $G_i$'s shares of the decryption keys $K$ and $\hat{K}$ \\
        \bottomrule
    \end{tabularx}
    \begin{tabularx}{\textwidth}{c|X}
      \toprule
      variable & description \\
        \midrule
        $(\alpha,\beta)$ & Encryption of individual vote	\\\hline
        $\gamma$ & Proof component \\\hline
        $\zeta_i$ & Secret communiation keys \\\hline
        $\kappa_i$ & Public communication keys \\\hline
        $\lambda$, $\Lambda$ & Selection and contest labels \\\hline
        $\xi$, $\xi_i$, $\xi_{i,j}$ & Random nonces \\\hline
        $\pi$ & Sorting permutation \\\hline
        $\sigma$ & Selection value \\\hline
        $\chi$, $\chi_i$ & Contest hashes \\\hline
        $\psi$ & Selection hash \\\hline
        $\Psi$ & Selection vector \\\hline
        $\omega$ & Short code of selection hash \\\hline
        $\Omega$ & Hash trimming function \\
        \bottomrule
    \end{tabularx}
}

\pagebreak

% xxxx nfSr+DNKhL0qZAhX02xxX9RKxQkmHftb6DHRCkkK/QQW/qj4x9hqbzqwimSmseXZXB94KYTB1EOS
% xxxx 1Dp0Y/4ZDL4ffSJv20day+jjcz0SylYIQWITfofYu+5AWrBfvXk+G/rI8IeLOq2Adh9NRJvIsWJc
% xxxx lWtF4NUZWLpBb4SPFbCI/JSF0wbHdFvHXTXKlR+tyAYJjrUx+uTZmYj0VCKU0vdcLWZX4ROtcFrm
% xxxx 55pCX/z5stZ3ZeGbOWkMYgZ53E4wGBvRJ6AqL/otz/E7r43IZN5OEulYIM93n9dk6kMCUQnvQKsD
% xxxx 3CikD062N40txfoxKcM/aDG6CgHy5Nmm9/nFWXkithjwj/AcBu0f7WPa6drLMx4QG/Mf1Lmw+Al5
% xxxx 7wbU/YqjI9wu72hF5w4X3IhYX+ulQ9y6x5rgBGfd35+9cgzcyIj7aYGjKd39Wjb4nVjem6LxWY11
% xxxx BQ6YA9/8+FwymI8F5vSWXDX7lgajjSchSvyFETYl0b0+j7Q7JWi1kOIu5C0lHgKRcHdOMnYMEORz
% xxxx LlALHzc2WJV5Q8YviILZAABqRoHPDPHg00U1cIYdW1p94EmP+JtRjOQ8pKM90M9SOAWHgKs8fn9g
% xxxx 0hZNfQWeI2d1S1+MSwyrzdT+c7JqsL+3D5veXG+eCztIdfP8OIUxGozBinXihPDSG50xXVE1bvTg
% xxxx 2oxJ5iRoJ/Yn00c364p77bvyZETBb4Nv94K8H3gidwh+VH6o3zSyTlanYYFdvLAG9i9CSbKkYGdI
% xxxx
% xxxx
% xxxx ---- S9.e.a Appendix: List of Changes Over Version 2.0.0

\subsection*{List of Changes Over Version 2.0.0}
\addcontentsline{toc}{subsection}{List of Changes Over Version 2.0.0}

% xxxx tuqr3roITdYs0bynMZKGRB/v/du7maCYldmW+8tBEtjlB73cXS5ji3qa1eJv9NRjIVsJghhOOIOB
% xxxx eEO2y2zqLgBOtVJJdVE7XLjYjrES3NhmZ5H4xT+dS4zC1hZH7OMgqyvxyiCIKb9X9wDwQAdY1JUM
% xxxx 1k/pTKqBUvFBoCXcucAZH+DcWBHqcx/o2MFMms4iUUUmkHcRYQOPnmfhouTbddxtjOvXt9d7njjo
% xxxx yJBPULwp/JsEYHa3TKLMtCRf+pc0KZlhX/NEO9R6FMT8Dzk02xainnwotdF61ex6dS6UoEPHcHTC
% xxxx e1o+wxNXV/OPygIglM6zwu/vqgOgruMnkPA0wHc+Z6wLH+waNlBhdfVgP/0EW+OLwLff2h7iEO+R
% xxxx 2Vbraxklq9UjJ/f5mpTKXOEz/5KEZ7LnW+HnpYgl85CpQdU+E8T/KBs2+cddVCujp1K5uZ9Bhph6
% xxxx U5UTu+Xn6LP3WsX1FFRib6EI2a/bMF+U/GAowOsLNYiEVLAsQEuiRNiK8kR3AbDc/WGi2RFpAnT5
% xxxx UnfMhwr4G+Xjt+Unii+2gwvRuHLEpzzcHOP/bNWG4ip3c93/kHenm3xTeKOCOHAuuzhg1oEKOqaX
% xxxx W8j67E6wdTeyeBRYO9/4WvOX5QNUPnTs6sVhZzPWjfHfubdUvAeVJtITr8X2LmNVpQQQm5o1h29S
% xxxx tPe5CdK6wHFU2x7e3CIw1pTvAaILTD4XCVZYof7aBgrE72quJjS5cclT+5YyRYP6dDiyBX2tUrTT
% xxxx
% xxxx
% xxxx ---- S9.e.3.1 Appendix: List of Changes Over Version 2.0.0 - Section 3.1

\paragraph{Section~\ref{sec:parameterreqs}}
\begin{itemize}
\item The version byte array is now an encoding of the string \texttt{"v2.1.0"} and the parameter base hash $\HH_P$ now includes the small integers $n$ and $k$ as hash inputs.  See Equation \eqref{eq:parameterhash} in Section \ref{sec:parameterhash}. Therefore, $\HH_P$ is not a fixed hash value anymore and the old Equation (5) has been removed accordingly.
\item The manifest hash $\HH_M$ has been removed, i.e., the old section 3.1.4 with the old Equation (6) defining $\HH_M$ has been removed.
\item The election base hash $\HH_B$ is now directly computed from the manifest the same way $\HH_M$ was computed before. See Equation \eqref{eq:basehash} in the current Section \ref{sec:basehash}.
\item Verification \ref{verif:parameters} has been changed accordingly to reflect the above modifications. The verification of the cofactor $r$ has been removed from Verification~\ref{verif:parameters}.
\end{itemize}

% xxxx z5KXUZran7u8D1WiaDcGSFibdCgsa1T1C7f8sEAuN1NQj8INXRHHuC80SjpH4/ouIEC2iWs/Fgcj
% xxxx kBOdlGPzZGyKlFtWal7zNPwJxJ76hBvqnb1f1DEVBQ6dTW0oxH92uAEbDO8MdWZ9js31pZNl3+bB
% xxxx RvFZa+jTXW2TvDbwIEvYn8gbECO+vj6CAZata0r29E1TqkECPdNThCYHWcJKcRg7NKdpV5PYLCAN
% xxxx 9W44yUjEXSfNq/K+JMyoB/WtncXgu8hXRSLJ3Tpiek62S4j41D8cPv8jjshbqN0Ur/XfBG+exuT/
% xxxx MwxIBeaPcCiRpQxAz6CZLCs2lOESmH8al9BFAaZUpUx9Y8iqwMK1e8mowVy3Uky6W4Yt0MNYQjUD
% xxxx tmeKgnzm+8Sq6k3wlmXvEAcbzuPtPrhzBeKJS5MUmxj5Kcu335/fuOxQcveWbs8VhZ9RWajiEtwf
% xxxx U8qrZrAen4gMSPdmY5/cjd/4MgBIRQAv6sC7yDmlnkre5n5YltHx9jIxgOkm9YrVzE5DSaG95g0B
% xxxx pLxgaKPiWNLIPdrvQ/4WR9bmZskd125P0n3O72g3w5pjkbGy+nUJWT/kZOBAcugQCg5rILfWpvnA
% xxxx Z+TIgdQPtt6Zfki0ZEsjqeqA87xVgsRE5BN5xRMK2hnPwDeEswwAX/fPG9kMwefg114l1AGPeoRM
% xxxx nO1k+YhOuG9lobRNRP7ob9ziWznuiogguhWtvkF2kZkF4AtgCKm+C2nqRjzB/cFS+unk5+TNFWo6
% xxxx
% xxxx
% xxxx ---- S9.e.3.2 Appendix: List of Changes Over Version 2.0.0 - Section 3.2

\paragraph{Section~\ref{sec:keygen}}
\begin{itemize}
\item The challenge values $c_{i,j}$ for the Schnorr proofs in the old Equation (12) in Section 3.2.2 have been replaced by a single challenge value $c_i$ per guardian, see Equation \eqref{eq:hash_nizk_keygen} in Section \ref{sec:keygendetails}. Verification \ref{verif:guardiansPK} has been adjusted.
\item The key generation process is now run twice to generate not only an election public key $K$ but also a ballot data encryption key $\hat K$ to obtain separate keys for different encryption modes. The key $K$ is used to encrypt votes and other verifiable fields that are homomorphically aggregated, the key $\hat K$ is used to encrypt data on the ballot such as the ballot nonce and contest data. See Section~\ref{sec:keygendetails}.
\item Each guardian now generates an additional ElGamal public/secret key pair $(\kappa_i, \zeta_i)$ that is used for encrypting secret shares that are sent between guardians, see Equation \eqref{eq:additionalkey} in Section \ref{sec:keygendetails}.
\item The Schnorr proofs of knowledge of the coefficients $a_{i,j}$ now also include a proof of knowledge of the additional secret key $\zeta_i$. See Equation \eqref{eq:hash_nizk_keygen} and the adjusted Verification \ref{verif:guardiansPK}.
\item Share encryption now uses the additional public keys, see Equations \eqref{eq:share_encrypt_ct} and \eqref{eq:hash_shareenc}. Share encryption is now done with signed ElGamal encryption, see the end of the paragraph \emph{Share encryption} in Section~\ref{sec:keygendetails}.
\item The end of Section \ref{sec:keygendetails} now describes the verification steps that guardians perform to confirm that key shares have been successfully distributed and that the key generation protocol was correctly and consistently executed. These steps are the prerequisites for publishing the guardian record and for enabling the use of \EG in the election.
\item The domain separator byte in the computation of the extended base hash has changed to \texttt{0x14}, see Equation \eqref{eq:extbasehash}.
\end{itemize}

% xxxx FxcwJESQYtSlyyB3OK2MmVTHEzjM5TRfRi1EVfD/FPL1zQAH3V9IzfOpNM2aVk2ZC/5XOd9sTcVf
% xxxx c1Ajh8QXmGHs41TXOwiI62VRSRNdhEueoqF+Yk/aomHt25mVS2srLhZYXGmk/jDvOFuVv+oyc+eN
% xxxx L4zc50Pp93ezlN4D2oicZ+PJHCjJlRH43gGo6lNk6M9DvzmPRx+dH6PmdGjZfoh5agXu2UJ0EoRt
% xxxx yugkAyy7SkfT1Yg89Uw5SXfeegs3JATjv8wVMkuZn5/yJfEh2/Ld6cxG25d1YJxtKL2nCVe2M8NH
% xxxx IXyEwB4TlbFyOA5EoQiN/fnvquEjH+UxEff0nDhjvH68cR+0nRTw24Wqc/GEF0xLTEdj9mc3R17w
% xxxx yxDFtNB1fvLELiQhw2aApFUqYmB0J+FKJCkBb6K/BmKo9t8qf7Wp7DAujb0wUGR1UoKcSfq77Yn4
% xxxx zgemeT7b7CUSPYrzYmXt9otTEjWRKs56P8RRUPXzAxJPrvnzqVkes/IOFE23GMfdFAPtBY7DTUgS
% xxxx Rbq1iKe1+gumh6eGmUnEutQ0bNjN2o7jeAJnkUqOdF8InHNqfDtXHKkF4gW7vvCrVozNIS7idkD6
% xxxx MLLbke6eTmPzE0vOoWZXLaIVgxbKloPD0U4k6oN6aXUNtgexbc9MWCTWVkTlCZf7aX9v64kHcfA2
% xxxx /3RyLI+nZkpjw5wU7umQH3n4J/AReIRVoMF9PxqCbrPhWCFlytNoBCPpWbctwE556CC1FfhgVpUs
% xxxx
% xxxx
% xxxx ---- S9.e.3.3 Appendix: List of Changes Over Version 2.0.0 - Section 3.3

\paragraph{Section~\ref{sec:ballotencryption}}
\begin{itemize}
\item The new Section \ref{sec:identifier} introduces the selection encryption identifier $\id_B$ for each ballot and the selection encryption identifier hash $\HH_I$, see Equation \eqref{eq:identifier}. A new verification step has been introduced in Verification \ref{verif:uniqueEncryptionIdentifiers}. Subsequent numbering has changed accordingly.
\item The order of inputs to $H_q$ when computing encryption nonces has changed and the first input is now the selection encryption identifier hash $\HH_I$ instead of the extended base hash, see Equation \eqref{eq:noncegen}.
\item The new Section \ref{sec:encrypt-ball-nonc} now describes how to encrypt ballot nonces using the ballot data encryption key. Encryption is done using signed ElGamal.
\item Challenge computation for proofs of ballot well-formedness have changed. In equations \eqref{eq:encproof0_challenge}, \eqref{eq:encproof1_challenge}, and \eqref{eq:rangechallenge}, the first input is now the selection encryption identifier hash $\HH_I$, the domain separator byte has changed to \texttt{0x24}, and the contest and option indices have been added as inputs. The new Verification~\ref{verif:selection} (previously Verification 5) has been adjusted.
\item The new Note~\ref{note:setproofs} discusses the adaptation of the range proof technique to the proof of membership in a discrete set within a range. The old Note 3.4 has become the new Note \ref{note:expotables}.
\item Computations of the pseudo-random nonce $\xi$ and the secret key $h$ for encrypting contest data have changed. They now include $\HH_I$ as the first argument, domain separation bytes have changed, and the public key $K$ for $h$ has been replaced by the contest index, see Equations~\eqref{eq:noncegen_contestdata} and \eqref{eq:k_enc_contest}.
\item Challenge computation for the proof of satisfying the selection limit has changed. The first input is now $\HH_I$, the public key has been replaced by the contest index, and the domain separation byte has changed, see Equation~\eqref{eq:nizk_c_selection_limit}. Verification \ref{verif:selectionlimit} has been adjusted.
\item The contest data field is now an optional field and does not have to be included, see the updated Section~\ref{sec:encrypt_ext_data}.
\item Contest data is now encrypted using signed ElGamal, counters in the KDF have changed, see the updated Section~\ref{sec:encrypt_ext_data}.
\end{itemize}

% xxxx tdccyCH5NOdJ/o82RSANdAP8+14o5HdKi0oly0jcVFjKBDcX7rgQ40feTl15Ckb0qw2S71L7FR42
% xxxx l4GortPGC1uG2b37zMfan31dWYttSXPJtFgpob14KX8YBF1F5ZFhbXnBalo4G2qt7UBtUHy/+vfB
% xxxx nBJPkJdHNpPQHsE3q8nLFvasEmg3tLYzI6FVA6UO1RDFLxndSAHJHY/JBFcfWRgO3bjQuthCyH8+
% xxxx gNfs3jGyzs95xDr5H4tdYanRQoGfx5rLG2LaEmnFl2Lqu/APxV16jMJdAn3i3R3685rhpTfdo4SY
% xxxx XiB4dXbG3OMFMIusj4URt0EZSlrXTqlKUVqvYG8Oaa6zSEQ7/72grjvi+Rk/ednBsCZmamxhYXdu
% xxxx 9gfwM3nKDGmFkYiJNpDQBTNYjQUvqqfF/80kqjMHGiHbo2vJd3pbc7IO6I6T82l3BnPsX08sUeCU
% xxxx MU4WNy+AYfT9AjTshpxI2GAc2yanXe/K0C5imxuQr9C/yfvtumSsv147NjWiyqkXXZtutGP/es7X
% xxxx oRXG2zjrj9NTUUgyOGg2vem0AVLgvwv0VjO6LT/gFR4XlbhcNaBytCtLckPmuVJFqahn9Vx8kOzB
% xxxx HvbWPueX/K5mULT6ErM+RktxS4mCdb2i7i1QGWQ0RXWSuVbY2fyxte4FxJjV3oc5HWzqJFlkBU2N
% xxxx JKIKWfPPAGOxmROIyj5spdSavyQvmqrVziiVYo3sfsvCH7yiDiXPJ1c3CYi4uktBWC2Eq4N05L3q
% xxxx
% xxxx
% xxxx ---- S9.e.3.4 Appendix: List of Changes Over Version 2.0.0 - Section 3.4

\paragraph{Section~\ref{sec:confirmationcodes}}
\begin{itemize}
\item The computation of the contest hash has changed. The first input is now $\HH_I$, the domain separation byte has changed, the public key has been omitted, and the encrypted contest data is included as an input, see Equation~\eqref{eq:contesthash}.
\item Notation of the confirmation code has changed to $\HH_C$. Computation of the confirmation code has changed. The first input is now $\HH_I$ and the domain separation byte has changed, see Equation~\eqref{eq:confirmationcode}.
\item The new Section~\ref{sec:votingdevinfohash} defines the newly introduced device information hash that is an input to the confirmation code computation.
\item Section~\ref{sec:ballotchaining} has been updated. Domain separation bytes in hash computations have changed. Hash inputs that facilitate chaining have been simplified and two chaining modes are now described explicitly, the no chaining mode and the simple chaining mode. Verification~\ref{verif:trackingcodes} has been adjusted accordingly.
\end{itemize}

% xxxx tUkJD+IH7AA9/psKC0Q8HJZbyuYBnZn2+MopFLXVHrdYUrYzCoPbwZnJpvC98EFw9yq6afh9Xk48
% xxxx fzQ6SX2sKoRhU0My8wZTc1Nd25upa9SxiNTNUjY76S9crU8Y0l5I8Ws25haCo5+6+YPk64+lrCV5
% xxxx X6NrOlQTvysQ6a/+Fj245mmmrtyLgBAuzCQTCJrHY9DPEhonyESODbntiAQwt3PRtfUr/fAoc/5A
% xxxx XNCxcj9BQwvgOeJlGTo3x8f9dSfEFpF8/Se/pR5KE2vZMTMIt+bBencEdIJSj1RVnDopXk0bxtob
% xxxx N0lvBoVNNP9+0c7QTO6qmUdn1+qdFO6GbzG0EIODlQPtpjndW5BesR/YS08XQa2PGOrnYhZbh/w9
% xxxx kmMYvD6RAO2phuJWKIBNpfgr8IbpjQwMfBkSPUUt1KYXDp2nT1fH/XCcxz6KsMM28oZ8yrjujhrf
% xxxx r2aW6DNDFMMlu1T/SBn3JxnYesHJ/RlB0UpHQvN809NarMg3pK4QHXqHCplIZoF6pZKJZXIwFbQ/
% xxxx EourWrZrWSTU7mI1nCCRePu55MrsJKKfBl/NvqilkrwCubOIwfY15JyEdtcyfglhuW5GAqJd9sZG
% xxxx 5i5JAYAmw2P7OQqAKLkfPSDfGsutHFfHGf1eGm+kssyODwtygPqowzJSrLh0DpUNxCEtv6ypMa9Z
% xxxx J7QE+oj1mA1c2RJnioRfbBuEsRZeD9wqMdGL7rCOtOHLENOFx3RO6e+he2nWr61xLoqrrx5WGNTE
% xxxx
% xxxx
% xxxx ---- S9.e.3.5 Appendix: List of Changes Over Version 2.0.0 - Section 3.5

\paragraph{Section~\ref{sec:ballotaggregation}}
\begin{itemize}
\item Section~\ref{sec:ballotaggregation} on ballot aggregation now describes how to use ballot weights.
\end{itemize}

% xxxx yqAdWKZZvCCsbPdaWRX62LqNLB6FBcGsBUjd2/Ws/Ht8XG5ToLcOEkyibfwgkLFHYYLbyL7lbBK3
% xxxx lUFhN3Y+ElhlgDRNdpe0pG1dOw1K/Lb0AP/murqpH+Oy2DVPs5HdsdIz/r7uh9wwp6C6tNNPfb1f
% xxxx neSCz3iH1OHt+2Ifa85PmDZsCa8EYeE4Sml4X7x8XpvteLYOsL9TTqhvbTJoMzLpokX3xTUf8Dox
% xxxx ooNSVY/2eqbJOKFdlTOJlapkOoGti1CJX0RLV4vtuC+Titc8wTXfDZx1QAJVBsMettBaA8cjMXOi
% xxxx hn3diFbfxt/EAWLT6Za8J3TLaJDTU1j1Kym7kDUxFadwJFZDaUvbKtHPj27Z+T/7sIau7VQL4w48
% xxxx mweS4UFfxuryztydHKfrTWoRIi/CMMAjz5mcXl+CU7u8V3OtU1UoyB7zw/BEKNvWFKMe3l6wjBuQ
% xxxx yBnKsJS87q1wihTxOFLIkND4WWxg7ZSOizca0OBOyaHL802Mjc0LjVOpVDiovjQrUisPlLwzM28Y
% xxxx LtyzWv7S2RHFybDLNrqTKrtalIKBYBN0DMINpJagA2ClKpUEUtn2tf6CwHFMrHk98Lf1E5ump3Qs
% xxxx Rc58gyhXfEtyBt9Rm9OIQRsx5X72GXC55rPGuylJ47vCI0hxfTZlK5vbr47eRrb0eGMsYR8k8bn3
% xxxx luGdALduzHWDaWGHD1Qw5yYvBlH0I9vaWYBdafheWgDMANr3GUOrDMBvCOP9gLjZtB3nYMrNFlzf
% xxxx
% xxxx
% xxxx ---- S9.e.3.6 Appendix: List of Changes Over Version 2.0.0 - Section 3.6

\paragraph{Section~\ref{sec:verifiable_decrypt}}
\begin{itemize}
\item The new Section~\ref{sec:prel-verif-steps} describes the verification steps all available guardians must confirm before participating in any decryption operation.
\item When participating in the generation of the verifiable decryption proof, each guardian must now commit to the commitment pair $(a_i, b_i)$ by computing a hash value $d_i$ as shown in Equation~\eqref{eq:commit2commitment}. A guardian should only publish the commitment pair after all $d_i$ have been verified. This step adds a round of communication and a verification step to the verifiable decryption protocol.
\item Challenge computation the proof has changed, the domain separation byte has changed and the public key has been replaced by the contest and option indices, see Equation~\eqref{eq:nizk_c_dec}. Verification~\ref{verif:decryption} has been adjusted accordingly.
\item Due to the above additional commitment step, the check in the new Note~\ref{note:decproofindividuals} is now an optional tool to be used when trying to resolve disputes. It does not need to be verified during the proof generation protocol.
\item Contest data decryption in Section~\ref{sec:decrypt_contest_data} now also has an additional commitment step before publishing the commitment pairs and the challenge computation has been modified. See the new Equation~\eqref{eq:commit2commit_contestdata} and modified Equation~\eqref{eq:nizk_c_dec_cont}. Verification~\ref{verif:extdecryption} has been adjusted.
\item Challenged ballots are always decrypted verifiably by decrypting the ballot nonce and by generating and releasing all or a set of selected encryption nonces. Section \ref{sec:decrypt_challenged} now describes this in more detail. The previous approach of verifiably decrypting all selections by the available guardians as is used for decrypting the tallies has been removed.
\end{itemize}

% xxxx y9XevRNvCV+dLMXL9ewm/8HEfP1AIphWp/+Mn1EDFy2Rm15SpBzQxqnXy4I9SzTfLQC3KKPYGPv/
% xxxx zeizmLzhccNNK6h9Kk7YdjKgSG8WVshuC47IsgXjL7OxKfJrWNHNhQN0VS4hPDCzZ5ckW0ASbAYg
% xxxx /ed5p0tskq2hVIuz1s/Dnny2CL50yHDBto5dwz5ZRr5ISYX+JvO3hCAwaQC2zW++iR9WzRQAQqCw
% xxxx IF1FOIzjjH4FCDdvFJmyO86dWZvV0XQM5AtAu4gM26mHViFSLf5cBp5RNZCFj7t8Kewctiinsmoj
% xxxx c+or6jIRijvGDLw1sJYQjDLJSf3QI4xzHgn3tM0Jf/wx4BX9eUaATZH43XGGTuNIXEFq0Npl4U/4
% xxxx zBtdq67ujjGvVlTEO7neSCJbZ4GQU8r/rT3M89f0PoBr2UJfaM9E7TAEzW9TneI/8cnCN7T5+h2j
% xxxx QP5MRgnuxwvX043S95TIcnlJMPgbGCTsKIRnst0ldYdePGj+OIQvfpA5/lWdgzPralZvUWSr7kce
% xxxx 8eAUIytElZ6i4e//PC9WdZ1H3ERSwpAvyKuEj7o3IKTzUZW3xmwEGa0vfMsV+DIV0VR2U5G5/ZeK
% xxxx CxcH1TQWpjd29Nd+Oro/q+k7KSp1d2WQxRYE5K9dvoFIWUi46Y2vZiSanMKeBEgHABpEXmnpbyUK
% xxxx R/6QV2TrlCxhV5a1VCpzt8v/+9u8I3sLM/CVx23ZZ2TTsQi8ZgJiuIJHLdkjep/a0UQUGSxeWFHC
% xxxx
% xxxx
% xxxx ---- S9.e.3.7 Appendix: List of Changes Over Version 2.0.0 - Section 3.7

\paragraph{Section~\ref{sec:electionrecord}}
\begin{itemize}
\item The newly introduced keys and identifier values have been added as required data in the election record as well as the status of the ballot, i.e., whether it was cast or not (challenged).
\end{itemize}

% xxxx sFScoupva2r172zNq1HeHXGtvAuLoOevZXst1yn5wJ7FNBURCKdqqqikdHO8hfrWaL5W6LQGWaNh
% xxxx U/yX18gA+2TbpiMX/bQgTlbnX65fJ9EGwgOAQCzJRyq+AshEDVxqMqIG89NkdYvYw++sSkJzozrm
% xxxx l15K3rdItZF3iB0V+BE2hwnqVB+ZfFrLAg/tz3rvQhydZGS/gxR494KKc+4SG2TRoo+ZLwgndh2B
% xxxx luvFmu0Xx0b/mh0F4y5RSPk68hfO265MO6wuLq0doxwiKQJIWCchS7mWcuFhMUX3AWbiXYo9OXxd
% xxxx UhPeiIaHVA+5mDs+XQhCXdcFgNr/oE8aJuiGt5J+Kj/wuadJL6yTXuxI150EtDovlY+rlMOHLR+3
% xxxx YYwHwieJt+CQCbDBdIrSycNCpEuQlGKKBJwMgJ9NCXY1/D+QD5PUlsTBiH6KahYu2I/seBThDc5L
% xxxx QDbHLxxJ+R2NbypiCgCnN5JXBPVlZ1BQY2ltDVVueuOua2ueQ0I6zUYt7BkNFluLS/w6UWO36nSa
% xxxx ppGtnqYLxZF8xtxEl9c66uv3BT7W375kukaqJzpNH2e1J9kmyAn+O8T1tmAurKDRssFlMO0Zwuwz
% xxxx zs2L6cHUqeVHWWSwIOR1VCmMByZVGH9UDIjF1H9ZysVJRrg3ttXtFgFEjdYqVSlY2fmVwN9wuwni
% xxxx UVELW2O5w7F2Z6jq8mnsrYkkgcaU4bl6g1+z1qiVbwQd/jKA+Sm0u32GQUm1i9yL9kbtVcVW9D8E
% xxxx
% xxxx
% xxxx ---- S9.e.4 Appendix: List of Changes Over Version 2.0.0 - Section 4

\paragraph{Section~\ref{sec:pre-encrypted}}
\begin{itemize}
\item Pre-encrypted ballots now also have a selection encryption identifier and the corresponding identifier hash.
\end{itemize}

% xxxx sY7mWaw6SWEY6FlKVxcCaaJEGEPhn2pz3gifcqGhCTHNFL/H6vSRe5ZZVhXBwxDmhkBDkw6EpLls
% xxxx YneweqsYoVh+Dp2GltKYoV+CZhug5AMcIGxu+WgQ9xypZnMMxxYWsDpaO7c1uVoXnvyDhPQhPK7x
% xxxx OH8E7gv7Ucs5k66+cHBKh0Ggzu7cL5g/CH53H+gSjOr58T1XgvwvL0FM6hv9qN8EGHqL1sYFxQpv
% xxxx cQxldGXPYeXedtLmgQ2K7nWzY2Qw654LFofB0UmMKeH3C8yhKk441j/R8wwKcUV3Av/SLW7KAIXH
% xxxx o0lIb229DQXip9FlgUytQhhMl0XO1ZLwYS19oCqvbYzaX1Uj3pQWv+uvzFTaJAHAnZC1go63gcz7
% xxxx m6HVkZ4iwfOOOXT4lziI5a76C0ZnMQmHiroe1lVI1qhHQL5sev1MSxMDlF0+AEKUU+IKVaWvIKHT
% xxxx 5JplHaUPun1bSJAPBgZipnLQciP5HLjIOCjIN2uC/ksB3Sp3iGcG9/cxqKW8YwnS3dJ+H0vl6cFO
% xxxx Uz8JZqc+v0wsccfTEcXB2P3D0uXJHRSgdAUx97QbPwamvnwe7VqZuzw2aGxvCGpLayxrUI3ojgJg
% xxxx 9dIeqQrDEM8TDRX2dK8vguclo26QwNfHOW4vSxsuxH6zWS4uVAR5bvatu5tI0RHfkehgONcfrQ1V
% xxxx tBzBVw7g+jd2pcgb55KIo/hl0If62ibj3BFO0PSPCQ2+4lOhVUEWP0ssNIaC30ZVtOQ60bZIPE8i
% xxxx
% xxxx
% xxxx ---- S9.e.4.1 Appendix: List of Changes Over Version 2.0.0 - Section 4.1

\paragraph{Section~\ref{sec:preenc_format}}
\begin{itemize}
\item The first input to the selection and contest hashes has changed to $\HH_I$, see Equations~\eqref{eq:selectionhash_pre}, \eqref{eq:nullhash_pre}, and \eqref{eq:contesthash_pre}.
\item Notation of the confirmation code has changed to $\HH_C$. The first input to the confirmation code has changed to $\HH_I$ and the chaining description has been adjusted as defined in Section~\ref{sec:ballotchaining}, see Equations~\eqref{eq:ballothash_pre}, \eqref{eq:hashchain0_pre}, and \eqref{eq:hashchainclose_pre}.
\end{itemize}

% xxxx HnqCzJ/iGCpR2yP/ZK61iO6WYdKL03/10OV4ggetO8Q+zKbAXelXf7wji6eb63G9BpU6nYBT4KQS
% xxxx cGJpaJsN1zqZa1Uxp8634qwHDfIp8L+djbB1lRmLD/vHe7ymVjACTDpAR3G0q0q1+AxjmkFSTFyh
% xxxx Bvhby2svLdk5P3fKrYJtkJXiKysnFKwXZWSHxAfKJifm0YLAe+lJbhQZlkKPo0sfEkAFu/Wv346C
% xxxx IN8XdRXRGHZ7gLjrBnYvk9dqLs2AoXnt28XDc6cWdG9jmTVUi9wkCQfFrM40IMpIQXPWpWy6XHa8
% xxxx iP76maU2xi3GXrBdSJQJ0qM9ho4Jk7zSsMSKaQ5ZghRCbcAK2Oj2T83hfnBaDerAA/3QqJoDWU68
% xxxx nrwxSb6VGOh6/9GR7VtQsZCPGfOw9bmicj5DZZPiPJirwW5jamvVp6VwyrG5i4vIzU21NpoRHwEw
% xxxx N2RmILWPLTFivhxBsV+ZgeG9dsrEb4deQntGCiA8lPTNYdsDSZ/eM8YGpCWEj1fGIeiCOFuZH/Bl
% xxxx ln+qWWFE2idKkUkKXWHcIj7eaaNKxPk7Vd3C4msTG9x3SY3VXAxi+eNhAvE4GeYItF0hTy3mSW6Z
% xxxx GNbnobezLzFEKLY43syWOcnrHE2zKvy6V7PTDITPqKulCUgAs6Jm4qX9ZJduUpVV2vUwhJ51mDXy
% xxxx Q0kG1BzI+PuM7QqVR0D+qlexcDuLeUM4DLcLek39Cp+inNgb6wTuY36xDLHHsJaCLI3TAjytFJQJ
% xxxx
% xxxx
% xxxx ---- S9.e.4.5 Appendix: List of Changes Over Version 2.0.0 - Section 4.5

\paragraph{Section~\ref{sec:verification_preencrypted}}
\begin{itemize}
\item Section~\ref{sec:verification_preencrypted} now contains an explicit list of verification steps that must be validated for pre-encrypted ballots, pointing to steps that are unchanged from regular ballots and listing differing and new verification steps.
\end{itemize}

% xxxx E0OFhDjbeQsnR0vC8HPZnFaoDTUKGrWKolxzSHPnFBEHgtTp4LYYQbZ/wkrtFXDeZbbLt3OEXgAT
% xxxx yXvVT28qwM84yZqGCpJk2zD1CyXOtNMrUYOX+CJs94+tEJeWoKLvnzWGUbop2WIUtPe0C4PyVbGl
% xxxx BlYJ1nbO+W+D2YV2jVjn9jnRbp2KBEk66GDqnF0E4e/bkYcY7WZtv5gvFOxiT4df5HzqRVcz1DSF
% xxxx 15AbaiZCaIyppbMOhiShxJmbsZU6PKNjL52sDbEPgluMy/5eR+4fdwO9XXEDjxuHDq+XkU94cXkG
% xxxx 3AyOZZ1iBOBIRTAQsv6tfHbYt13BYVqPjg0ai0HWhrIgCGcgp/gRTMQszcV5E+I5oxUzYCCzSNnO
% xxxx UY3kZJ909VPpO3VUhSqh9w/WG64M9WKIxS6BNPa8+3sYxmQf1MBIT+YrMG2dE2/KWUUyK+qyBDSP
% xxxx JYAHds30vo88auVr7+DXK6BN0SKeaECEl5GOlW7oeKy7Nqxec4RsnhLMI+VrIjEf+VKXHHxOrDjt
% xxxx cL7pZvN6ziyALDz55q0eEZaLzJJqPLYdePLNax7GXDuXn4iTLJYVZy2ZeA5Rd00jKWTontWk7hFr
% xxxx QT4RepgG/zVQO3dVk5tlUgPhJGU2cFBZZJp3+PjNPoI0uLuE91mB/xxmmDkLXKVXHVt9G3KRZT1d
% xxxx MDRJ8IPNKPCUlZNMmxu/MTuuQbg7VPM2O4rHk4sDKEgeq2nAD8bZH4upgMcLTaFoKHJ66YTR+1ke
% xxxx
% xxxx
% xxxx ---- S9.e.5.4 Appendix: List of Changes Over Version 2.0.0 - Section 5.4

\paragraph{Section~\ref{sec:hashoutputs}}
\begin{itemize}
\item Section~\ref{sec:hashoutputs} now explicitly defines a hashfunction $H_q$ that maps into $\Z_q$. It is obtained by reducing the output of the function $H$ modulo $q$, see Equation~\eqref{eq:hashmodq}.
\end{itemize}

% xxxx 7+KlbsXnu8Zf2mrlHAUyh6p+m/Z3cNuE2GCTpYAy0e2zEnEw2MVJ+N8SP1rHmEI88aT3OrkjICMv
% xxxx p3FmjllXFnwnDh5CBb44nhK6dh19/maevNZWEL1/DKF7RDwuqbQCsyrJEAqE2P58XJ/I7AbC8VI1
% xxxx xokIDKzh+UYVSWDBX7aUCIC2H3+FFn4jAx/NgJ9lX0kNMHgrt7SfVO1HdK4/dghtS8Qzlh2mboAI
% xxxx L02ZJXD4NSw0e1q3qq8ZOV3CkrWzDudP4JJF40rg+VIxaQwvJeXZyrzy884LO/yukdUrlgYYORpO
% xxxx Wf8YyFooyGtFl3lLLHmJhro5GGv1Kd6LgJvUZdW97zjHZ+miqHDneIQcPLA2l6wd6BeRsRtwlu69
% xxxx IZs0Y/oTdKygi0xxhWxWsO3tiWt/u+qhGdM+M9RvbZ/MrYYyArsmLE85Nyaml1Dbiig8V0DeNSmH
% xxxx o7TgACbtgnHZLkPMCzRFyhiLpb8Rmp0CcVuiZjz5BOMoDfQIqE7WGZr3CAYMbpadi0iVGNz4fUaD
% xxxx cZZRYF7N2scqeRkLhcgjjGlj2Mhs+YdS4lpq+24s15RB3yBq1FJGPd8l7uAUOVX7qCIEU4mgmZF+
% xxxx O5JDRcDytrXxd6PtlW1saIhWLhTacTZcAcscfJZoPBAWSoc8mA2TNfs5LzoBZznhP7b4+uBeAHtr
% xxxx VJVi06SCYsFi4rRBXNjwXyv7VAZcgQHft8cxfwb6nAJpN81f9orOgSyxjx51rU10kPiQ9FWoR1H8
% xxxx
% xxxx
% xxxx ---- S9.e.5.5 Appendix: List of Changes Over Version 2.0.0 - Section 5.5

\paragraph{Section~\ref{sec:domainsep}}
\begin{itemize}
\item Many of the domain separation bytes have changed because several hash computations have been added at different positions in the specification. Domain separation bytes might have to be adjusted even if not mentioned explicitly in this list of changes.
\end{itemize}

\end{document}
