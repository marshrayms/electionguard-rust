section,xtext
S0,"move types for numbers mod p and mod q back into 'eg' lib so they can be known at compile time"
S0,"change obtain_resource_production_result_from_cache_downcast"
S0,"electionguard.exe: common parameter: election filesystem directory to look for files (%ELECTIONGUARD_ARTIFACTS_DIR%)"
S0,"electionguard.exe: seed: write random seed to artifact file"
S0,"electionguard.exe manifest: write ElectionManifest to pretty json file"
S0,"electionguard.exe manifest: write ElectionManifest to canonical bytes file"
S0,"electionguard.exe parameters: write ElectionParameters to json file"
S0,"H_V, H_P, H_M, and H_B updated for 2.0 calculation"
S0,"Generate joint election public key"
S0,"Extended base hash H_E"
S0,"electionguard-test script: implementation in cmd started"
S0,"electionguard-test script: implementation in cmd exercises all (current) functionality"
S0,"BigUint values (mod p or q) now left-padded as necessary to avoid leaking value via serialized file size"
S0,"Hash values now serialized with 'H(upper hex)' format to match spec"
S0,"exe: Csprng now seeded with more entropy from the operating system RNG"
S0,"Election-varying parameters (n and k) now checked for validity"
S0,"Serialization of BigUints now uses base64 encoding"
S0,"Rename guardian private key to secret key"
S0,"electionguard.exe: generate guardian secret key"
S0,"electionguard.exe: write guardian secret key"
S0,"electionguard.exe: derive guardian public key from secret key"
S0,"electionguard.exe: write guardian public key"
S0,"Guardian i uses 1-based indexing"
S0,"compute H_E extended base hash"
S0,"compute joint election public key"
S0,"electionguard.exe: write joint election public key to json file"
S0,"standardize on 'validate' instead of 'verify' when checking deserialized structures"
S0,"instead of from_json and to_json implement from_stdioread and to_stdiowrite"
S0,"every struct that has Self::from_stdioread*() should prefer Self::from_stdioread_validated() and have a self.validate()"
S0,"electionguard.exe: write H_E extended base hash to json file"
S0,"convert many uses of if !() { bail!() } to ensure!()"
S0,"Generate data structure docs from the Reference Implementation in Rust"
S0,"eg: New constrained numeric type for indices. Convert n, k, and other indices to this type."
S0,"build-docs script: initial implementation in cmd"
S0,"evaluate scripting language 'nu' https://www.nushell.sh/"
S0,"electionguard-test script: begin rewrite in nu"
S0,"doc/LICENSE: checked"
S0,"doc/SECURITY.md: complete"
S0,"docs/general: begin writing"
S0,"docs/api: begin writing"
S0,"Remove link to internal site"
S0,"VaryingParameters: enum BallotChaining { Prohibited, Allowed, Required, }"
S0,"remove old EG 1.54 constants"
S0,"exe: Under artifacts dir, first level dirs are specific to secrecy requirements"
S0,"Ballot define data type"
S0,"get fixeduint stuff out of bunna branch"
S0,"Merge code from Anunay"
S0,"doc/SUPPORT.md: complete"
S0,"doc/README.md: complete"
S0,"doc/CODE_OF_CONDUCT.md: complete"
S0,"doc/BUILDING.md: complete"
S0,"Complete all planned code reorganization/renaming"
S0,"docs/implementation guide/References: complete"
S0,"a trait for fn to_canonical_json()"
S0,"many to_stdiowrite() methods have common code that could be factored into a common function"
S0,"a trait for types that have to_stdiowrite()"
S0,"a trait for types that have to_stdiowrite() and perhaps _pretty() and _canonical() variants"
S0,"serialize bignums only all as uppercase hex"
